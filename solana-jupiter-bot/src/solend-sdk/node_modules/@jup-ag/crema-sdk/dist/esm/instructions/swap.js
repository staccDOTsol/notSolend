import { struct, u8 } from "@solana/buffer-layout";
import { TOKEN_PROGRAM_ID } from "@solana/spl-token";
import { TransactionInstruction } from "@solana/web3.js";
import { decimalU64 } from "../util/layout";
import { TokenSwapInstruction } from "./instruction";
const DataLayout = struct([
    u8("instruction"),
    decimalU64("amountIn"),
    decimalU64("minimumAmountOut"),
]);
export const swapInstruction = (programId, tokenSwapKey, authority, userTransferAuthority, userSource, userDestination, swapSource, swapDestination, ticksKey, amountIn, minimumAmountOut) => {
    const data = Buffer.alloc(DataLayout.span);
    DataLayout.encode({
        instruction: TokenSwapInstruction.Swap,
        amountIn,
        minimumAmountOut,
    }, data);
    const keys = [
        { pubkey: tokenSwapKey, isSigner: false, isWritable: true },
        { pubkey: authority, isSigner: false, isWritable: false },
        { pubkey: userTransferAuthority, isSigner: true, isWritable: false },
        { pubkey: userSource, isSigner: false, isWritable: true },
        { pubkey: userDestination, isSigner: false, isWritable: true },
        { pubkey: swapSource, isSigner: false, isWritable: true },
        { pubkey: swapDestination, isSigner: false, isWritable: true },
        { pubkey: ticksKey, isSigner: false, isWritable: true },
        { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },
    ];
    return new TransactionInstruction({
        keys,
        programId,
        data,
    });
};
//# sourceMappingURL=swap.js.map