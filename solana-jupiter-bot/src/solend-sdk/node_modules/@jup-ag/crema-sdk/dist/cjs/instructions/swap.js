"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.swapInstruction = void 0;
const buffer_layout_1 = require("@solana/buffer-layout");
const spl_token_1 = require("@solana/spl-token");
const web3_js_1 = require("@solana/web3.js");
const layout_1 = require("../util/layout");
const instruction_1 = require("./instruction");
const DataLayout = (0, buffer_layout_1.struct)([
    (0, buffer_layout_1.u8)("instruction"),
    (0, layout_1.decimalU64)("amountIn"),
    (0, layout_1.decimalU64)("minimumAmountOut"),
]);
const swapInstruction = (programId, tokenSwapKey, authority, userTransferAuthority, userSource, userDestination, swapSource, swapDestination, ticksKey, amountIn, minimumAmountOut) => {
    const data = Buffer.alloc(DataLayout.span);
    DataLayout.encode({
        instruction: instruction_1.TokenSwapInstruction.Swap,
        amountIn,
        minimumAmountOut,
    }, data);
    const keys = [
        { pubkey: tokenSwapKey, isSigner: false, isWritable: true },
        { pubkey: authority, isSigner: false, isWritable: false },
        { pubkey: userTransferAuthority, isSigner: true, isWritable: false },
        { pubkey: userSource, isSigner: false, isWritable: true },
        { pubkey: userDestination, isSigner: false, isWritable: true },
        { pubkey: swapSource, isSigner: false, isWritable: true },
        { pubkey: swapDestination, isSigner: false, isWritable: true },
        { pubkey: ticksKey, isSigner: false, isWritable: true },
        { pubkey: spl_token_1.TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },
    ];
    return new web3_js_1.TransactionInstruction({
        keys,
        programId,
        data,
    });
};
exports.swapInstruction = swapInstruction;
//# sourceMappingURL=swap.js.map