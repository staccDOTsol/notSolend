{"version":3,"file":"token.js","sourceRoot":"","sources":["../../../src/util/token.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-return */\nimport type { AccountInfo } from \"@solana/spl-token\";\nimport {\n  AccountLayout,\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  Token,\n  TOKEN_PROGRAM_ID,\n  u64,\n} from \"@solana/spl-token\";\nimport type {\n  AccountInfo as BaseAccountInfo,\n  Connection,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport invariant from \"tiny-invariant\";\n\n/**\n * Get a authority token account address\n * @param tokenMint The mint of token\n * @param owner The owner associated token address\n * @returns\n */\nexport async function getAssociatedTokenAddress(\n  tokenMint: PublicKey,\n  owner: PublicKey\n): Promise<PublicKey> {\n  return await Token.getAssociatedTokenAddress(\n    ASSOCIATED_TOKEN_PROGRAM_ID,\n    TOKEN_PROGRAM_ID,\n    tokenMint,\n    owner,\n    true\n  );\n}\n\n/**\n * Get a create associated token account instruction\n * @param tokenMint The mint of token\n * @param owner The owner associated token address\n * @param payer The pays for transaction\n * @returns\n */\nexport function createAssociatedTokenAccountInstruction(\n  tokenMint: PublicKey,\n  associatedAccount: PublicKey,\n  owner: PublicKey,\n  payer: PublicKey\n): TransactionInstruction {\n  return Token.createAssociatedTokenAccountInstruction(\n    ASSOCIATED_TOKEN_PROGRAM_ID,\n    TOKEN_PROGRAM_ID,\n    tokenMint,\n    associatedAccount,\n    owner,\n    payer\n  );\n}\n\n/**\n * Get the token account info by address\n * @param conn The connection to use\n * @param address The token account address\n * @returns\n */\nexport async function getTokenAccount(\n  conn: Connection,\n  address: PublicKey\n): Promise<AccountInfo> {\n  const account = await conn.getAccountInfo(address);\n  invariant(\n    account?.data !== null,\n    `The token account:${address.toBase58()} data is null`\n  );\n  invariant(account !== null, \"the account is null\");\n  const accountInfo = parseTokenAccount(account);\n  accountInfo.address = address;\n  return accountInfo;\n}\n\n/**\n * Get the token accounts by owner\n * @param conn The connection to use\n * @param owner The owner address\n * @returns The token accounts\n */\nexport async function getTokenAccounts(\n  conn: Connection,\n  owner: PublicKey\n): Promise<AccountInfo[]> {\n  const accounts = await conn.getTokenAccountsByOwner(owner, {\n    programId: TOKEN_PROGRAM_ID,\n  });\n  const accountInfos: AccountInfo[] = [];\n  accounts.value.forEach((v) => {\n    invariant(\n      v.account.data !== null,\n      `The token account:${v.pubkey.toBase58()} data is null`\n    );\n    const accountInfo = parseTokenAccount(v.account);\n    accountInfo.address = v.pubkey;\n    accountInfos.push(accountInfo);\n  });\n  return accountInfos;\n}\n\nexport function parseTokenAccountData(data: Buffer): AccountInfo {\n  const accountInfo = AccountLayout.decode(data);\n  accountInfo.mint = new PublicKey(accountInfo.mint);\n  accountInfo.owner = new PublicKey(accountInfo.owner);\n  accountInfo.amount = u64.fromBuffer(accountInfo.amount);\n\n  if (accountInfo.delegateOption === 0) {\n    accountInfo.delegate = null;\n    accountInfo.delegatedAmount = new u64(0);\n  } else {\n    accountInfo.delegate = new PublicKey(accountInfo.delegate);\n    accountInfo.delegatedAmount = u64.fromBuffer(accountInfo.delegatedAmount);\n  }\n\n  accountInfo.isInitialized = accountInfo.state !== 0;\n  accountInfo.isFrozen = accountInfo.state === 2;\n\n  if (accountInfo.isNativeOption === 1) {\n    accountInfo.rentExemptReserve = u64.fromBuffer(accountInfo.isNative);\n    accountInfo.isNative = true;\n  } else {\n    accountInfo.rentExemptReserve = null;\n    accountInfo.isNative = false;\n  }\n\n  if (accountInfo.closeAuthorityOption === 0) {\n    accountInfo.closeAuthority = null;\n  } else {\n    accountInfo.closeAuthority = new PublicKey(accountInfo.closeAuthority);\n  }\n\n  return accountInfo;\n}\n\nexport function parseTokenAccount(\n  account: BaseAccountInfo<Buffer>\n): AccountInfo {\n  invariant(account?.data !== null, `The account data is null`);\n  const accountInfo = AccountLayout.decode(account?.data);\n  accountInfo.mint = new PublicKey(accountInfo.mint);\n  accountInfo.owner = new PublicKey(accountInfo.owner);\n  accountInfo.amount = u64.fromBuffer(accountInfo.amount);\n\n  if (accountInfo.delegateOption === 0) {\n    accountInfo.delegate = null;\n    accountInfo.delegatedAmount = new u64(0);\n  } else {\n    accountInfo.delegate = new PublicKey(accountInfo.delegate);\n    accountInfo.delegatedAmount = u64.fromBuffer(accountInfo.delegatedAmount);\n  }\n\n  accountInfo.isInitialized = accountInfo.state !== 0;\n  accountInfo.isFrozen = accountInfo.state === 2;\n\n  if (accountInfo.isNativeOption === 1) {\n    accountInfo.rentExemptReserve = u64.fromBuffer(accountInfo.isNative);\n    accountInfo.isNative = true;\n  } else {\n    accountInfo.rentExemptReserve = null;\n    accountInfo.isNative = false;\n  }\n\n  if (accountInfo.closeAuthorityOption === 0) {\n    accountInfo.closeAuthority = null;\n  } else {\n    accountInfo.closeAuthority = new PublicKey(accountInfo.closeAuthority);\n  }\n\n  return accountInfo;\n}\n"]}