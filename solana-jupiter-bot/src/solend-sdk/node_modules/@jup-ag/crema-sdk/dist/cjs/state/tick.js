"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseTicksAccount = exports.isTicksAccount = exports.TickLayout = exports.TICKS_ACCOUNT_TYPE = void 0;
const buffer_layout_1 = require("@solana/buffer-layout");
const layout_1 = require("../util/layout");
//export const TICKS_ACCOUNT_SIZE = 504000;
exports.TICKS_ACCOUNT_TYPE = 1;
exports.TickLayout = (0, buffer_layout_1.struct)([
    (0, buffer_layout_1.s32)("tick"),
    (0, layout_1.decimalU128)("tickPrice", 12),
    (0, layout_1.decimalU128)("liquityGross"),
    (0, layout_1.decimal128)("liquityNet"),
    (0, layout_1.decimalU128)("feeGrowthOutside0", 16),
    (0, layout_1.decimalU128)("feeGrowthOutside1", 16),
], "tickInfo");
const isTicksAccount = (info) => {
    return info.data.readUInt8(33) === exports.TICKS_ACCOUNT_TYPE;
};
exports.isTicksAccount = isTicksAccount;
const parseTicksAccount = (pubkey, info) => {
    if (!(0, exports.isTicksAccount)(info))
        return;
    const Layout = (0, buffer_layout_1.struct)([
        (0, buffer_layout_1.u8)("swapVersion"),
        (0, layout_1.publicKey)("tokenSwapKey"),
        (0, buffer_layout_1.u8)("accountType"),
        (0, buffer_layout_1.s32)("len"),
        (0, buffer_layout_1.blob)(info.data.length - 38, "dataFlat"),
    ], "ticksAccount");
    const buffer = Buffer.from(info.data);
    const { swapVersion, tokenSwapKey, accountType, len, dataFlat } = Layout.decode(buffer);
    const tickSpan = len * exports.TickLayout.span;
    const ticksBuffer = dataFlat.slice(0, tickSpan);
    const ticks = (0, buffer_layout_1.seq)(exports.TickLayout, len).decode(ticksBuffer);
    const ticksAccount = {
        swapVersion,
        tokenSwapKey,
        accountType,
        len,
        ticks,
    };
    return {
        pubkey,
        info,
        data: ticksAccount,
    };
};
exports.parseTicksAccount = parseTicksAccount;
//# sourceMappingURL=tick.js.map