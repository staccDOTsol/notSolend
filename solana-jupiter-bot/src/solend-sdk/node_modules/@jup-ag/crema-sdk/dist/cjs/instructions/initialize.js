"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.initializeInstruction = void 0;
const tslib_1 = require("tslib");
const buffer_layout_1 = require("@solana/buffer-layout");
const spl_token_1 = require("@solana/spl-token");
const web3_js_1 = require("@solana/web3.js");
const decimal_js_1 = tslib_1.__importDefault(require("decimal.js"));
const layout_1 = require("../util/layout");
const instruction_1 = require("./instruction");
const DataLayout = (0, buffer_layout_1.struct)([
    (0, buffer_layout_1.u8)("instruction"),
    (0, buffer_layout_1.u8)("nonce"),
    (0, buffer_layout_1.u8)("curveType"),
    (0, layout_1.decimalU64)("fee", 12),
    (0, layout_1.decimalU64)("managerFee", 12),
    (0, buffer_layout_1.u32)("tickSpace"),
    (0, layout_1.decimalU128)("currentSqrtPrice", 12),
    (0, layout_1.decimalU128)("currentLiquity"),
    (0, layout_1.decimalU128)("feeGrowthGlobal0"),
    (0, layout_1.decimalU128)("feeGrowthGlobal1"),
    (0, layout_1.decimalU128)("managerFeeA"),
    (0, layout_1.decimalU128)("managerFeeB"),
]);
const initializeInstruction = (programId, tokenSwapKey, authority, manager, managerTokenA, managerTokenB, swapTokenA, swapTokenB, ticksKey, positionsKey, nonce, curveType, fee, managerFee, tickSpace, currentSqrtPrice) => {
    const data = Buffer.alloc(DataLayout.span);
    DataLayout.encode({
        instruction: instruction_1.TokenSwapInstruction.Initialize,
        nonce,
        curveType,
        fee,
        managerFee,
        tickSpace,
        currentSqrtPrice,
        currentLiquity: new decimal_js_1.default(0),
        feeGrowthGlobal0: new decimal_js_1.default(0),
        feeGrowthGlobal1: new decimal_js_1.default(0),
        managerFeeA: new decimal_js_1.default(0),
        managerFeeB: new decimal_js_1.default(0),
    }, data);
    const keys = [
        { pubkey: tokenSwapKey, isSigner: false, isWritable: true },
        { pubkey: authority, isSigner: false, isWritable: false },
        { pubkey: manager, isSigner: false, isWritable: false },
        { pubkey: managerTokenA, isSigner: false, isWritable: false },
        { pubkey: managerTokenB, isSigner: false, isWritable: false },
        { pubkey: swapTokenA, isSigner: false, isWritable: false },
        { pubkey: swapTokenB, isSigner: false, isWritable: false },
        { pubkey: ticksKey, isSigner: false, isWritable: true },
        { pubkey: positionsKey, isSigner: false, isWritable: true },
        { pubkey: spl_token_1.TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },
    ];
    return new web3_js_1.TransactionInstruction({
        keys,
        programId,
        data,
    });
};
exports.initializeInstruction = initializeInstruction;
//# sourceMappingURL=initialize.js.map