"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const anchor_1 = require("@project-serum/anchor");
const state_helpers_1 = require("./state-helpers");
describe('state-helpers', () => {
    describe('unstakeNowFeeBp', () => {
        [
            // 0.3 % -> 3 %, obtaining more than available
            { lpMinFeeBasisPoints: 30, lpMaxFeeBasisPoints: 300, lpLiquidityTarget: 100, lamportsAvailable: 50, lamportsToObtain: 60, expectedResult: 300 },
            // 0.3 % -> 3 %, obtaining such amount that available lamports remain greater than liquidity target
            { lpMinFeeBasisPoints: 30, lpMaxFeeBasisPoints: 300, lpLiquidityTarget: 100, lamportsAvailable: 150, lamportsToObtain: 20, expectedResult: 30 },
            // 0.3 % -> 3 %, obtaining such amount that available lamports are less than liquidity target
            { lpMinFeeBasisPoints: 30, lpMaxFeeBasisPoints: 300, lpLiquidityTarget: 100, lamportsAvailable: 150, lamportsToObtain: 70, expectedResult: 84 },
        ].forEach((args, testNo) => it(`calculates the fee correctly (#${testNo})`, () => {
            const { lpMinFeeBasisPoints, lpMaxFeeBasisPoints, lpLiquidityTarget, lamportsAvailable, lamportsToObtain, expectedResult, } = args;
            const actualResult = (0, state_helpers_1.unstakeNowFeeBp)(lpMinFeeBasisPoints, lpMaxFeeBasisPoints, new anchor_1.BN(lpLiquidityTarget), new anchor_1.BN(lamportsAvailable), new anchor_1.BN(lamportsToObtain));
            expect(actualResult).toBe(expectedResult);
        }));
    });
    describe('proportionalBN', () => {
        [
            { amount: 10, numerator: 1, denominator: 2, expectedResult: 5 },
            { amount: 10, numerator: 2, denominator: 3, expectedResult: 6 },
            { amount: 10, numerator: 1, denominator: 0, expectedResult: 10 },
        ].forEach(({ amount, numerator, denominator, expectedResult }) => it(`calculates the proportional amount (${amount} * ${numerator} / ${denominator} ~ ${expectedResult})`, () => {
            const actualResult = (0, state_helpers_1.proportionalBN)(new anchor_1.BN(amount), new anchor_1.BN(numerator), new anchor_1.BN(denominator)).toNumber();
            expect(actualResult).toBe(expectedResult);
        }));
    });
});
//# sourceMappingURL=state-helpers.spec.js.map