"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parsePositionsAccount = exports.isPositionsAccount = exports.MAX_ACCOUNT_POSITION_LENGTH = exports.PositionsAccountLayout = exports.PositionLayout = exports.POSITIONS_ACCOUNT_TYPE = exports.POSITIONS_ACCOUNT_SIZE = void 0;
const buffer_layout_1 = require("@solana/buffer-layout");
const layout_1 = require("../util/layout");
exports.POSITIONS_ACCOUNT_SIZE = 360000;
exports.POSITIONS_ACCOUNT_TYPE = 2;
exports.PositionLayout = (0, buffer_layout_1.struct)([
    (0, layout_1.publicKey)("nftTokenId"),
    (0, buffer_layout_1.s32)("lowerTick"),
    (0, buffer_layout_1.s32)("upperTick"),
    (0, layout_1.decimalU128)("liquity"),
    (0, layout_1.decimalU128)("feeGrowthInsideALast", 16),
    (0, layout_1.decimalU128)("feeGrowthInsideBLast", 16),
    (0, layout_1.decimalU128)("tokenAFee", 16),
    (0, layout_1.decimalU128)("tokenBFee", 16),
], "position");
exports.PositionsAccountLayout = (0, buffer_layout_1.struct)([
    (0, buffer_layout_1.u8)("swapVersion"),
    (0, layout_1.publicKey)("tokenSwapKey"),
    (0, buffer_layout_1.u8)("accountType"),
    (0, buffer_layout_1.s32)("len"),
    (0, buffer_layout_1.blob)(exports.POSITIONS_ACCOUNT_SIZE - 38, "dataFlat"),
], "positionsAccount");
exports.MAX_ACCOUNT_POSITION_LENGTH = Math.floor((exports.POSITIONS_ACCOUNT_SIZE - 38) / exports.PositionLayout.span);
const isPositionsAccount = (info) => {
    return info.data.readUInt8(33) === exports.POSITIONS_ACCOUNT_TYPE;
};
exports.isPositionsAccount = isPositionsAccount;
const parsePositionsAccount = (pubkey, info) => {
    if (!(0, exports.isPositionsAccount)(info))
        return;
    const buffer = Buffer.from(info.data);
    const { swapVersion, tokenSwapKey, accountType, len, dataFlat } = exports.PositionsAccountLayout.decode(buffer);
    const positionSpan = len * exports.PositionLayout.span;
    const positionsBuffer = dataFlat.slice(0, positionSpan);
    const positions = (0, buffer_layout_1.seq)(exports.PositionLayout, len).decode(positionsBuffer);
    const positionsAccount = {
        swapVersion,
        tokenSwapKey,
        accountType,
        len,
        positions,
    };
    return {
        pubkey,
        info,
        data: positionsAccount,
    };
};
exports.parsePositionsAccount = parsePositionsAccount;
//# sourceMappingURL=positions.js.map