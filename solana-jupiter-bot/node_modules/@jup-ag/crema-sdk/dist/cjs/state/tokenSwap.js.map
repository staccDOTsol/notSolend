{"version":3,"file":"tokenSwap.js","sourceRoot":"","sources":["../../../src/state/tokenSwap.ts"],"names":[],"mappings":";;;AAAA,yDAAwD;AAKxD,2CAAoE;AAEvD,QAAA,uBAAuB,GAAG,CAAC,CAAC;AA8B5B,QAAA,sBAAsB,GAAG,IAAA,sBAAM,EAC1C;IACE,IAAA,kBAAE,EAAC,SAAS,CAAC;IACb,IAAA,kBAAS,EAAC,cAAc,CAAC;IACzB,IAAA,kBAAE,EAAC,aAAa,CAAC;IACjB,IAAA,kBAAE,EAAC,eAAe,CAAC;IACnB,IAAA,kBAAE,EAAC,OAAO,CAAC;IACX,IAAA,kBAAS,EAAC,gBAAgB,CAAC;IAC3B,IAAA,kBAAS,EAAC,SAAS,CAAC;IACpB,IAAA,kBAAS,EAAC,eAAe,CAAC;IAC1B,IAAA,kBAAS,EAAC,eAAe,CAAC;IAC1B,IAAA,kBAAS,EAAC,YAAY,CAAC;IACvB,IAAA,kBAAS,EAAC,YAAY,CAAC;IACvB,IAAA,kBAAS,EAAC,YAAY,CAAC;IACvB,IAAA,kBAAS,EAAC,YAAY,CAAC;IACvB,IAAA,kBAAS,EAAC,UAAU,CAAC;IACrB,IAAA,kBAAS,EAAC,cAAc,CAAC;IACzB,IAAA,kBAAE,EAAC,WAAW,CAAC;IACf,IAAA,mBAAU,EAAC,KAAK,EAAE,EAAE,CAAC;IACrB,IAAA,mBAAU,EAAC,YAAY,EAAE,EAAE,CAAC;IAC5B,IAAA,mBAAG,EAAC,WAAW,CAAC;IAChB,IAAA,oBAAW,EAAC,kBAAkB,EAAE,EAAE,CAAC;IACnC,IAAA,oBAAW,EAAC,gBAAgB,CAAC;IAC7B,IAAA,oBAAW,EAAC,kBAAkB,EAAE,EAAE,CAAC;IACnC,IAAA,oBAAW,EAAC,kBAAkB,EAAE,EAAE,CAAC;IACnC,IAAA,oBAAW,EAAC,aAAa,CAAC;IAC1B,IAAA,oBAAW,EAAC,aAAa,CAAC;CAC3B,EACD,kBAAkB,CACnB,CAAC;AAEW,QAAA,uBAAuB,GAAG,8BAAsB,CAAC,IAAI,CAAC;AAE5D,MAAM,kBAAkB,GAAG,CAAC,IAAyB,EAAW,EAAE;IACvE,OAAO,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,KAAK,+BAAuB,CAAC;AAC7D,CAAC,CAAC;AAFW,QAAA,kBAAkB,sBAE7B;AAEK,MAAM,qBAAqB,GAA6B,CAC7D,MAAiB,EACjB,IAAyB,EACzB,EAAE;IACF,IAAI,CAAC,IAAA,0BAAkB,EAAC,IAAI,CAAC,EAAE;QAC7B,OAAO;KACR;IAED,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACtC,MAAM,gBAAgB,GAAG,8BAAsB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IAE/D,OAAO;QACL,MAAM;QACN,IAAI;QACJ,IAAI,EAAE,gBAAgB;KACvB,CAAC;AACJ,CAAC,CAAC;AAhBW,QAAA,qBAAqB,yBAgBhC","sourcesContent":["import { struct, u8, u32 } from \"@solana/buffer-layout\";\nimport type { AccountInfo, PublicKey } from \"@solana/web3.js\";\nimport type Decimal from \"decimal.js\";\n\nimport type { Parser } from \"../util/layout\";\nimport { decimalU64, decimalU128, publicKey } from \"../util/layout\";\n\nexport const TOKEN_SWAP_ACCOUNT_TYPE = 0;\n\nexport interface TokenSwapAccount {\n  version: number;\n  tokenSwapKey: PublicKey;\n  accountType: number;\n  isInitialized: number;\n  nonce: number;\n  tokenProgramId: PublicKey;\n  manager: PublicKey;\n  managerTokenA: PublicKey;\n  managerTokenB: PublicKey;\n  swapTokenA: PublicKey;\n  swapTokenB: PublicKey;\n  tokenAMint: PublicKey;\n  tokenBMint: PublicKey;\n  ticksKey: PublicKey;\n  positionsKey: PublicKey;\n  curveType: number;\n  fee: Decimal;\n  managerFee: Decimal;\n  tickSpace: number;\n  currentSqrtPrice: Decimal;\n  currentLiquity: Decimal;\n  feeGrowthGlobal0: Decimal;\n  feeGrowthGlobal1: Decimal;\n  managerFeeA: Decimal;\n  managerFeeB: Decimal;\n}\n\nexport const TokenSwapAccountLayout = struct<TokenSwapAccount>(\n  [\n    u8(\"version\"),\n    publicKey(\"tokenSwapKey\"),\n    u8(\"accountType\"),\n    u8(\"isInitialized\"),\n    u8(\"nonce\"),\n    publicKey(\"tokenProgramId\"),\n    publicKey(\"manager\"),\n    publicKey(\"managerTokenA\"),\n    publicKey(\"managerTokenB\"),\n    publicKey(\"swapTokenA\"),\n    publicKey(\"swapTokenB\"),\n    publicKey(\"tokenAMint\"),\n    publicKey(\"tokenBMint\"),\n    publicKey(\"ticksKey\"),\n    publicKey(\"positionsKey\"),\n    u8(\"curveType\"),\n    decimalU64(\"fee\", 12),\n    decimalU64(\"managerFee\", 12),\n    u32(\"tickSpace\"),\n    decimalU128(\"currentSqrtPrice\", 12),\n    decimalU128(\"currentLiquity\"),\n    decimalU128(\"feeGrowthGlobal0\", 16),\n    decimalU128(\"feeGrowthGlobal1\", 16),\n    decimalU128(\"managerFeeA\"),\n    decimalU128(\"managerFeeB\"),\n  ],\n  \"tokenSwapAccount\"\n);\n\nexport const TOKEN_SWAP_ACCOUNT_SIZE = TokenSwapAccountLayout.span;\n\nexport const isTokenSwapAccount = (info: AccountInfo<Buffer>): boolean => {\n  return info.data.readUInt8(33) === TOKEN_SWAP_ACCOUNT_TYPE;\n};\n\nexport const parseTokenSwapAccount: Parser<TokenSwapAccount> = (\n  pubkey: PublicKey,\n  info: AccountInfo<Buffer>\n) => {\n  if (!isTokenSwapAccount(info)) {\n    return;\n  }\n\n  const buffer = Buffer.from(info.data);\n  const tokenSwapAccount = TokenSwapAccountLayout.decode(buffer);\n\n  return {\n    pubkey,\n    info,\n    data: tokenSwapAccount,\n  };\n};\n"]}