{"version":3,"file":"tick.js","sourceRoot":"","sources":["../../../src/state/tick.ts"],"names":[],"mappings":";;;AAAA,yDAAmE;AAKnE,2CAAoE;AAEpE,2CAA2C;AAC9B,QAAA,kBAAkB,GAAG,CAAC,CAAC;AA4BvB,QAAA,UAAU,GAAG,IAAA,sBAAM,EAC9B;IACE,IAAA,mBAAG,EAAC,MAAM,CAAC;IACX,IAAA,oBAAW,EAAC,WAAW,EAAE,EAAE,CAAC;IAC5B,IAAA,oBAAW,EAAC,cAAc,CAAC;IAC3B,IAAA,mBAAU,EAAC,YAAY,CAAC;IACxB,IAAA,oBAAW,EAAC,mBAAmB,EAAE,EAAE,CAAC;IACpC,IAAA,oBAAW,EAAC,mBAAmB,EAAE,EAAE,CAAC;CACrC,EACD,UAAU,CACX,CAAC;AAEK,MAAM,cAAc,GAAG,CAAC,IAAyB,EAAW,EAAE;IACnE,OAAO,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,KAAK,0BAAkB,CAAC;AACxD,CAAC,CAAC;AAFW,QAAA,cAAc,kBAEzB;AAEK,MAAM,iBAAiB,GAAyB,CACrD,MAAiB,EACjB,IAAyB,EACzB,EAAE;IACF,IAAI,CAAC,IAAA,sBAAc,EAAC,IAAI,CAAC;QAAE,OAAO;IAElC,MAAM,MAAM,GAAG,IAAA,sBAAM,EACnB;QACE,IAAA,kBAAE,EAAC,aAAa,CAAC;QACjB,IAAA,kBAAS,EAAC,cAAc,CAAC;QACzB,IAAA,kBAAE,EAAC,aAAa,CAAC;QACjB,IAAA,mBAAG,EAAC,KAAK,CAAC;QACV,IAAA,oBAAI,EAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,EAAE,EAAE,UAAU,CAAC;KACxC,EACD,cAAc,CACf,CAAC;IAEF,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACtC,MAAM,EAAE,WAAW,EAAE,YAAY,EAAE,WAAW,EAAE,GAAG,EAAE,QAAQ,EAAE,GAC7D,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IAExB,MAAM,QAAQ,GAAG,GAAG,GAAG,kBAAU,CAAC,IAAI,CAAC;IACvC,MAAM,WAAW,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;IAChD,MAAM,KAAK,GAAG,IAAA,mBAAG,EAAC,kBAAU,EAAE,GAAG,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;IAEvD,MAAM,YAAY,GAAiB;QACjC,WAAW;QACX,YAAY;QACZ,WAAW;QACX,GAAG;QACH,KAAK;KACN,CAAC;IAEF,OAAO;QACL,MAAM;QACN,IAAI;QACJ,IAAI,EAAE,YAAY;KACnB,CAAC;AACJ,CAAC,CAAC;AAtCW,QAAA,iBAAiB,qBAsC5B","sourcesContent":["import { blob, s32, seq, struct, u8 } from \"@solana/buffer-layout\";\nimport type { AccountInfo, PublicKey } from \"@solana/web3.js\";\nimport type Decimal from \"decimal.js\";\n\nimport type { Parser } from \"../util/layout\";\nimport { decimal128, decimalU128, publicKey } from \"../util/layout\";\n\n//export const TICKS_ACCOUNT_SIZE = 504000;\nexport const TICKS_ACCOUNT_TYPE = 1;\n\nexport interface Tick {\n  tick: number;\n  tickPrice: Decimal;\n  liquityGross: Decimal;\n  liquityNet: Decimal;\n  feeGrowthOutside0: Decimal;\n  feeGrowthOutside1: Decimal;\n}\n\nexport interface TicksAccount {\n  swapVersion: number;\n  tokenSwapKey: PublicKey;\n  accountType: number;\n  len: number;\n  ticks: Tick[];\n}\n\n/* @internal */\nexport interface TicksAccountDataFlat {\n  swapVersion: number;\n  tokenSwapKey: PublicKey;\n  accountType: number;\n  len: number;\n  dataFlat: Uint8Array;\n}\n\nexport const TickLayout = struct<Tick>(\n  [\n    s32(\"tick\"),\n    decimalU128(\"tickPrice\", 12),\n    decimalU128(\"liquityGross\"),\n    decimal128(\"liquityNet\"),\n    decimalU128(\"feeGrowthOutside0\", 16),\n    decimalU128(\"feeGrowthOutside1\", 16),\n  ],\n  \"tickInfo\"\n);\n\nexport const isTicksAccount = (info: AccountInfo<Buffer>): boolean => {\n  return info.data.readUInt8(33) === TICKS_ACCOUNT_TYPE;\n};\n\nexport const parseTicksAccount: Parser<TicksAccount> = (\n  pubkey: PublicKey,\n  info: AccountInfo<Buffer>\n) => {\n  if (!isTicksAccount(info)) return;\n\n  const Layout = struct<TicksAccountDataFlat>(\n    [\n      u8(\"swapVersion\"),\n      publicKey(\"tokenSwapKey\"),\n      u8(\"accountType\"),\n      s32(\"len\"),\n      blob(info.data.length - 38, \"dataFlat\"),\n    ],\n    \"ticksAccount\"\n  );\n\n  const buffer = Buffer.from(info.data);\n  const { swapVersion, tokenSwapKey, accountType, len, dataFlat } =\n    Layout.decode(buffer);\n\n  const tickSpan = len * TickLayout.span;\n  const ticksBuffer = dataFlat.slice(0, tickSpan);\n  const ticks = seq(TickLayout, len).decode(ticksBuffer);\n\n  const ticksAccount: TicksAccount = {\n    swapVersion,\n    tokenSwapKey,\n    accountType,\n    len,\n    ticks,\n  };\n\n  return {\n    pubkey,\n    info,\n    data: ticksAccount,\n  };\n};\n"]}