"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.decimalU128 = exports.decimal128 = exports.decimalU64 = exports.decimal64 = exports.uint128 = exports.int128 = exports.int64 = exports.uint64 = exports.publicKey = exports.encodeDecode = void 0;
const buffer_layout_1 = require("@solana/buffer-layout");
const web3_js_1 = require("@solana/web3.js");
const decimalExt_1 = require("./decimalExt");
/** @internal */
const encodeDecode = (layout) => {
    const decode = layout.decode.bind(layout);
    const encode = layout.encode.bind(layout);
    return { decode, encode };
};
exports.encodeDecode = encodeDecode;
const publicKey = (property = "publicKey") => {
    const layout = (0, buffer_layout_1.blob)(32, property);
    const { encode, decode } = (0, exports.encodeDecode)(layout);
    const publicKeyLayout = layout;
    publicKeyLayout.decode = (buffer, offset) => {
        const src = decode(buffer, offset);
        return new web3_js_1.PublicKey(src);
    };
    publicKeyLayout.encode = (publicKey, buffer, offset) => {
        const src = publicKey.toBuffer();
        return encode(src, buffer, offset);
    };
    return publicKeyLayout;
};
exports.publicKey = publicKey;
const uint64 = (property = "uint128") => {
    return (0, buffer_layout_1.blob)(8, property);
};
exports.uint64 = uint64;
const int64 = (property = "uint128") => {
    return (0, buffer_layout_1.blob)(8, property);
};
exports.int64 = int64;
const int128 = (property = "uint128") => {
    return (0, buffer_layout_1.blob)(16, property);
};
exports.int128 = int128;
const uint128 = (property = "uint128") => {
    return (0, buffer_layout_1.blob)(16, property);
};
exports.uint128 = uint128;
const decimal64 = (property = "uint64", precision = 0) => {
    const layout = (0, buffer_layout_1.blob)(8, property);
    //const { encode, decode } = encodeDecode(layout);
    const decimal64Layout = layout;
    const _decode = layout.decode.bind(layout);
    const _encode = layout.encode.bind(layout);
    decimal64Layout.decode = (buffer, offset) => {
        const src = Buffer.from(_decode(buffer, offset));
        return decimalExt_1.DecimalExt.from64Buffer(src, precision);
    };
    decimal64Layout.encode = (decimal, buffer, offset) => {
        const src = decimalExt_1.DecimalExt.to64Buffer(decimal, precision);
        return _encode(src, buffer, offset);
    };
    return decimal64Layout;
};
exports.decimal64 = decimal64;
const decimalU64 = (property = "uint64", precision = 0) => {
    const layout = (0, buffer_layout_1.blob)(8, property);
    //const { encode, decode } = encodeDecode(layout)
    const _decode = layout.decode.bind(layout);
    const _encode = layout.encode.bind(layout);
    const decimalU64Layout = layout;
    decimalU64Layout.decode = (buffer, offset) => {
        const src = Buffer.from(_decode(buffer, offset));
        return decimalExt_1.DecimalExt.fromU64Buffer(src, precision);
    };
    decimalU64Layout.encode = (decimal, buffer, offset) => {
        const src = decimalExt_1.DecimalExt.toU64Buffer(decimal, precision);
        return _encode(src, buffer, offset);
    };
    return decimalU64Layout;
};
exports.decimalU64 = decimalU64;
const decimal128 = (property = "uint64", precision = 0) => {
    const layout = (0, buffer_layout_1.blob)(16, property);
    //const { encode, decode } = encodeDecode(layout);
    const _decode = layout.decode.bind(layout);
    const _encode = layout.encode.bind(layout);
    const decimal128Layout = layout;
    decimal128Layout.decode = (buffer, offset) => {
        const src = Buffer.from(_decode(buffer, offset));
        return decimalExt_1.DecimalExt.from128Buffer(src, precision);
    };
    decimal128Layout.encode = (decimal, buffer, offset) => {
        const src = decimalExt_1.DecimalExt.to128Buffer(decimal, precision);
        return _encode(src, buffer, offset);
    };
    return decimal128Layout;
};
exports.decimal128 = decimal128;
const decimalU128 = (property = "uint64", precision = 0) => {
    const layout = (0, buffer_layout_1.blob)(16, property);
    //const { encode, decode } = encodeDecode(layout);
    const _decode = layout.decode.bind(layout);
    const _encode = layout.encode.bind(layout);
    const decimalU128Layout = layout;
    decimalU128Layout.decode = (buffer, offset) => {
        const src = Buffer.from(_decode(buffer, offset));
        const val = decimalExt_1.DecimalExt.fromU128Buffer(src, precision);
        return val;
    };
    decimalU128Layout.encode = (decimal, buffer, offset) => {
        const src = decimalExt_1.DecimalExt.toU128Buffer(decimal, precision);
        return _encode(src, buffer, offset);
    };
    return decimalU128Layout;
};
exports.decimalU128 = decimalU128;
//# sourceMappingURL=layout.js.map