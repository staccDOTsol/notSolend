{"version":3,"file":"decimalExt.js","sourceRoot":"","sources":["../../../src/util/decimalExt.ts"],"names":[],"mappings":"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","sourcesContent":["import BN from \"bn.js\";\nimport Decimal from \"decimal.js\";\nimport invariant from \"tiny-invariant\";\n\nDecimal.config({\n  precision: 64,\n  rounding: Decimal.ROUND_DOWN,\n  toExpNeg: -64,\n  toExpPos: 64,\n});\n\nconst TEN = new Decimal(10);\nconst P64 = new Decimal(2).pow(64);\nconst MAX_INT64 = P64.div(2).sub(1);\nconst MIN_INT64 = P64.div(2).neg();\nconst MAX_UINT64 = P64.sub(1);\nconst MAX_INT128 = P64.pow(63).sub(1);\nconst MIN_INT128 = MAX_INT128.neg();\nconst MAX_UINT128 = P64.pow(64).sub(1);\nconst MAX_PRECISION = 40;\n\nexport class DecimalExt {\n  /**\n   * New a Decimal from a int64 buffer\n   * @param buffer The buffer\n   * @param precision The pricision\n   * @returns The Decimal value, the result will be div 10^precision\n   */\n  static from64Buffer(buffer: Buffer, precision = 0): Decimal {\n    invariant(buffer.length === 8, `Invalid buffer length: ${buffer.length}`);\n    invariant(\n      Math.abs(precision) < MAX_PRECISION,\n      `Invalid precision: ${precision}`\n    );\n    invariant(buffer[7] !== undefined);\n    if (buffer[7] >= 0x80) {\n      const ss = [];\n      for (const v of buffer) {\n        ss.push(`00${Math.abs(~v & 0xff).toString(16)}`.slice(-2));\n      }\n      const bn = new BN(ss.join(\"\"), 16, \"le\").add(new BN(1)).neg();\n      return new Decimal(bn.toString()).div(TEN.pow(precision));\n    }\n    return new Decimal(new BN(buffer, \"le\").toString()).div(TEN.pow(precision));\n  }\n\n  /**\n   * New a Decimal from a uint64 buffer\n   * @param buffer The buffer\n   * @param precision The precision\n   * @returns The Decimal value, the result will be div 10^precision\n   */\n  static fromU64Buffer(buffer: Buffer, precision = 0): Decimal {\n    invariant(buffer.length === 8, `Invalid buffer length: ${buffer.length}`);\n    invariant(\n      Math.abs(precision) < MAX_PRECISION,\n      `Invalid precision: ${precision}`\n    );\n    return new Decimal(new BN(buffer, 16, \"le\").toString()).div(\n      TEN.pow(precision)\n    );\n  }\n\n  /**\n   * New a Decimal from a int128 buffer\n   * @param buffer The buffer\n   * @param precision The pricision\n   * @returns The Decimal value, the result will be div 10^precision\n   */\n  static from128Buffer(buffer: Buffer, precision = 0): Decimal {\n    invariant(buffer.length === 16, `Invalid buffer length: ${buffer.length}`);\n    invariant(\n      Math.abs(precision) < MAX_PRECISION,\n      `Invalid precision: ${precision}`\n    );\n\n    invariant(buffer[15] !== undefined);\n    if (buffer[15] >= 0x80) {\n      const ss = [];\n      for (const v of buffer) {\n        ss.push(`00${Math.abs(~v & 0xff).toString(16)}`.slice(-2));\n      }\n      const bn = new BN(ss.join(\"\"), 16, \"le\").add(new BN(1)).neg();\n      return new Decimal(bn.toString()).div(TEN.pow(precision));\n    }\n    return new Decimal(new BN(buffer, \"le\").toString()).div(TEN.pow(precision));\n  }\n\n  /**\n   * New a Decimal from a uint128 buffer\n   * @param buffer The buffer\n   * @param precision The precision\n   * @returns The Decimal value, the result will be div 10^precision\n   */\n  static fromU128Buffer(buffer: Buffer, precision = 0): Decimal {\n    invariant(buffer.length === 16, `Invalid buffer length: ${buffer.length}`);\n    invariant(\n      Math.abs(precision) < MAX_PRECISION,\n      `Invalid precision: ${precision}`\n    );\n    return new Decimal(new BN(buffer, \"le\").toString()).div(TEN.pow(precision));\n  }\n\n  /**\n   * Convert a Decimal value to int64 buffer\n   * @param v The Decimal value\n   * @param precision The precision\n   * @returns The buffer, the result will be mul 10^precision\n   */\n  static to64Buffer(v: Decimal, precision = 0): Buffer {\n    invariant(\n      Math.abs(precision) < MAX_PRECISION,\n      `Invalid precision: ${precision}`\n    );\n    v = v.mul(TEN.pow(precision)).round();\n    invariant(\n      v.greaterThanOrEqualTo(MIN_INT64) && v.lessThanOrEqualTo(MAX_INT64),\n      `Invalid v: ${v.toString()} to int128 buffer with precision: ${precision}`\n    );\n    const bn = new BN(v.toString());\n    if (bn.isNeg()) {\n      const buffer = bn.add(new BN(1)).toArrayLike(Buffer, \"le\", 8);\n      buffer.forEach(function (item, index, input) {\n        input[index] = ~item & 0xff;\n      });\n      return buffer;\n    } else {\n      return bn.toArrayLike(Buffer, \"le\", 8);\n    }\n  }\n\n  /**\n   * Convert a Decimal value to uint64 buffer\n   * @param v The Decimal value\n   * @param precision The precision\n   * @returns The buffer, the result will be mul 10^precision\n   */\n  static toU64Buffer(v: Decimal, precision = 0): Buffer {\n    invariant(\n      Math.abs(precision) < MAX_PRECISION,\n      `Invalid precision: ${precision}`\n    );\n    v = v.mul(TEN.pow(precision)).round();\n    invariant(\n      v.greaterThanOrEqualTo(0) && v.lessThanOrEqualTo(MAX_UINT64),\n      `Invalid v: ${v.toString()} to uint64 buffer with precision: ${precision}`\n    );\n    return new BN(v.toString()).toArrayLike(Buffer, \"le\", 8);\n  }\n\n  /**\n   * Convert a Decimal value to int128 buffer\n   * @param v The Decimal value\n   * @param precision The precision\n   * @returns The buffer, the result will be mul 10^precision\n   */\n  static to128Buffer(v: Decimal, precision = 0): Buffer {\n    invariant(\n      Math.abs(precision) < MAX_PRECISION,\n      `Invalid precision: ${precision}`\n    );\n    v = v.mul(TEN.pow(precision)).round();\n    invariant(\n      v.greaterThanOrEqualTo(MIN_INT128) && v.lessThanOrEqualTo(MAX_INT128),\n      `Invalid v: ${v.toString()} to int128 buffer with precision: ${precision}`\n    );\n    const bn = new BN(v.toString());\n    if (bn.isNeg()) {\n      const buffer = bn.add(new BN(1)).toArrayLike(Buffer, \"le\", 16);\n      buffer.forEach(function (item, index, input) {\n        input[index] = ~item & 0xff;\n      });\n      return buffer;\n    } else {\n      return bn.toArrayLike(Buffer, \"le\", 16);\n    }\n  }\n\n  /**\n   * Convert a Decimal value to uint128 buffer\n   * @param v The Decimal value\n   * @param precision The precision\n   * @returns The buffer, the result will be mul 10^precision\n   */\n  static toU128Buffer(v: Decimal, precision = 0): Buffer {\n    invariant(\n      Math.abs(precision) < MAX_PRECISION,\n      `Invalid precision: ${precision}`\n    );\n    v = v.mul(TEN.pow(precision)).round();\n    invariant(\n      v.greaterThanOrEqualTo(0) && v.lessThanOrEqualTo(MAX_UINT128),\n      `Invalid v: ${v.toString()} to int128 buffer with precision: ${precision}`\n    );\n    return new BN(v.toString()).toArrayLike(Buffer, \"le\", 16);\n  }\n}\n"]}