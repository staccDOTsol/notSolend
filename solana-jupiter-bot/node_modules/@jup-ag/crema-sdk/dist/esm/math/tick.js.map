{"version":3,"file":"tick.js","sourceRoot":"","sources":["../../../src/math/tick.ts"],"names":[],"mappings":"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","sourcesContent":["import { Decimal } from \"decimal.js\";\nimport invariant from \"tiny-invariant\";\n\nimport type { Tick } from \"../state\";\n\n// The max ticker\nexport const MAX_TICK = 443632;\n// export const MAX_TICK = 552648\n\n// The min ticker\nexport const MIN_TICK = -MAX_TICK;\n\n// The price pieces\n// price = pow(PIECES, TICK)\nexport const PIECES = new Decimal(\"1.0001\");\nexport const PRICE_OFFSET = new Decimal(\"1e-12\");\nexport const MAX_PRICE = PIECES.pow(MAX_TICK).add(PRICE_OFFSET);\nexport const MIN_PRICE = PIECES.pow(MIN_TICK).add(PRICE_OFFSET);\nexport const MAX_SQRT_PRICE = PIECES.pow(MAX_TICK / 2)\n  .add(PRICE_OFFSET)\n  .toDP(12);\nexport const MIN_SQRT_PRICE = PIECES.pow(MIN_TICK / 2)\n  .sub(PRICE_OFFSET)\n  .toDP(12);\n\n/**\n * Get the tick by sqrt price\n *\n * @param sqrtPrice the sqrt price\n  let afterSqrtPrice = liquity.div(amountIn.add(liquity.div(upperSqrtPrice)));\n */\nexport function sqrtPrice2Tick(sqrtPrice: Decimal): number {\n  invariant(\n    sqrtPrice.lessThanOrEqualTo(MAX_SQRT_PRICE),\n    `Invalid sqrtPrice: ${sqrtPrice.toString()} Max: ${MAX_SQRT_PRICE.toString()}, too large`\n  );\n  invariant(\n    sqrtPrice.greaterThanOrEqualTo(MIN_SQRT_PRICE),\n    `Invalid sqrtPrice: ${sqrtPrice.toString()}, Min: ${MIN_SQRT_PRICE.toString()}, too small`\n  );\n  return sqrtPrice.pow(2).log(PIECES).toDP(0, Decimal.ROUND_HALF_UP).toNumber();\n}\n\n/**\n * Get the sqrt price by tick\n * @param tick the tick\n * @returns the sqrt price\n */\nexport function tick2SqrtPrice(tick: number): Decimal {\n  invariant(\n    tick >= MIN_TICK && tick <= MAX_TICK,\n    `Invalid tick: ${tick}, must be in range [${MIN_TICK}, ${MAX_TICK}]`\n  );\n  return PIECES.pow(tick / 2);\n}\n\n/**\n * Get the tick by price\n * @param price the price\n * @returns the tick\n */\nexport function price2Tick(price: Decimal): number {\n  invariant(\n    price.lessThan(MAX_PRICE),\n    `Invalid price:${price.toString()} Max: ${MAX_PRICE.toString()},  too large`\n  );\n  invariant(\n    price.greaterThan(MIN_PRICE),\n    `Invalid price:${price.toString()} Min: ${MIN_PRICE.toString()}, too small`\n  );\n  return price.log(PIECES).toDP(0, Decimal.ROUND_HALF_UP).toNumber();\n}\n\n/**\n * Get the price by tick\n * @param tick the tick\n * @returns the price\n */\nexport function tick2Price(tick: number): Decimal {\n  invariant(\n    tick >= MIN_TICK && tick <= MAX_TICK,\n    `Invalid tick: ${tick}, must be in range [${MIN_TICK.toString()}, ${MAX_TICK.toString()}]`\n  );\n  return PIECES.pow(tick);\n}\n\n/**\n * Get the nearest valid tick\n * @deprecated please use {@link getNearestTickBySqrtPrice Or getNearestTickByPrice} instead\n * @param sqrtPrice the sqrt price\n * @param tickSpace the tick space\n * @returns the tick or null\n */\nexport function getNearestTick(\n  sqrtPrice: Decimal,\n  tickSpace: number\n): number | null {\n  return getNearestTickBySqrtPrice(sqrtPrice, tickSpace);\n}\n\n/**\n * Get the nearest valid tick for positions\n * @param sqrtPrice the sqrt price\n * @param tickSpace the tick space\n * @returns the tick or null(if the tick space <= 0)\n */\nexport function getNearestTickBySqrtPrice(\n  sqrtPrice: Decimal,\n  tickSpace: number\n): number {\n  invariant(\n    tickSpace > 0 && tickSpace % 1 === 0,\n    `Invalid tickSpace:${tickSpace}`\n  );\n  invariant(\n    sqrtPrice.lessThan(MAX_SQRT_PRICE),\n    `Invalid sqrtPrice: ${sqrtPrice.toString()} Max: ${MAX_SQRT_PRICE.toString()}, too large`\n  );\n  invariant(\n    sqrtPrice.greaterThan(MIN_SQRT_PRICE),\n    `Invalid sqrtPrice: ${sqrtPrice.toString()}, Min: ${MIN_SQRT_PRICE.toString()}, too small`\n  );\n  const t = sqrtPrice2Tick(sqrtPrice);\n  const m = (t - MIN_TICK) % tickSpace;\n  if (m > tickSpace / 2) {\n    return t - m + tickSpace;\n  }\n  return t - m;\n}\n\n/**\n * Get the nearest valid tick for positions\n * @param price the price\n * @param tickSpace the tick space\n * @returns the tick or null(if the tick space <= 0)\n */\nexport function getNearestTickByPrice(\n  price: Decimal,\n  tickSpace: number\n): number {\n  invariant(\n    tickSpace > 0 && tickSpace % 1 === 0,\n    `Invalid tickSpace:${tickSpace}`\n  );\n  invariant(\n    price.lessThan(MAX_PRICE),\n    `Invalid price:${price.toString()} Max: ${MAX_PRICE.toString()},  too large`\n  );\n  invariant(\n    price.greaterThan(MIN_PRICE),\n    `Invalid price:${price.toString()} Min: ${MIN_PRICE.toString()}, too small`\n  );\n  const t = price2Tick(price);\n  const m = (t - MIN_TICK) % tickSpace;\n  if (m > tickSpace / 2) {\n    return t - m + tickSpace;\n  }\n  return t - m;\n}\n\n/**\n *\n * @param ticks The tick array of token swap\n * @param currentSqrtPrice The current sqrt price of token swap\n * @param fee The fee rate of token swap\n * @param currentLiquity The current liquity of token swap\n * @param amountIn The amount in of token A\n * @returns amountOut:The amount out of token B, amountUsed:The used of amountIn, afterPrice:The price after calculate, afterLiquity: The liquity after calculate\n */\nexport function calculateSwapA2B(\n  ticks: Tick[],\n  currentSqrtPrice: Decimal,\n  fee: Decimal,\n  currentLiquity: Decimal,\n  amountIn: Decimal\n): {\n  amountOut: Decimal;\n  amountUsed: Decimal;\n  feeUsed: Decimal;\n  afterPrice: Decimal;\n  afterLiquity: Decimal;\n} {\n  invariant(amountIn.greaterThan(new Decimal(0)), \"invalid amount in\");\n  invariant(\n    currentLiquity.greaterThanOrEqualTo(new Decimal(0)),\n    \"invalid liquity\"\n  );\n  invariant(ticks.length > 0, \"the ticks is empty\");\n  //let currentTick = sqrtPrice2Tick(currentSqrtPrice);\n  invariant(ticks[0] !== undefined);\n  invariant(currentSqrtPrice > ticks[0].tickPrice, \"out of ticks\");\n  let liquity = currentLiquity;\n  let out = new Decimal(0);\n  let remind = amountIn;\n  let remindWithFee = new Decimal(0);\n  let feeUsed = new Decimal(0);\n  let amountUsed = new Decimal(0);\n  for (let i = ticks.length - 1; i >= 0; i--) {\n    const ticksI = ticks[i];\n    invariant(ticksI !== undefined);\n    if (liquity.equals(new Decimal(0))) {\n      currentSqrtPrice = ticksI.tickPrice.sub(PRICE_OFFSET);\n      liquity = liquity.sub(ticksI.liquityNet);\n      //upperSqrtPrice = ticks[i].tickPrice;\n      continue;\n    }\n    if (currentSqrtPrice < ticksI.tickPrice) {\n      continue;\n    }\n    const upperSqrtPrice = currentSqrtPrice;\n    const lowerSqrtPrice = ticksI.tickPrice;\n    const maxAmountIn = maxAmountA(lowerSqrtPrice, currentSqrtPrice, liquity);\n    const fullStepFee = maxAmountIn.mul(fee).toDP(0, Decimal.ROUND_DOWN);\n    if (remind.lessThan(fullStepFee)) {\n      remindWithFee = remind;\n    } else {\n      remindWithFee = remind.sub(fullStepFee);\n    }\n\n    if (maxAmountIn.greaterThanOrEqualTo(remindWithFee)) {\n      remindWithFee = remind\n        .mul(new Decimal(1).sub(fee))\n        .toDP(0, Decimal.ROUND_UP);\n      const { amountOut, afterSqrtPrice } = swapA2B(\n        upperSqrtPrice,\n        liquity,\n        remindWithFee\n      );\n      amountUsed = amountUsed.add(remind);\n      feeUsed = feeUsed.add(remind.sub(remindWithFee));\n      return {\n        amountOut: out.add(amountOut),\n        amountUsed,\n        feeUsed,\n        afterPrice: afterSqrtPrice,\n        afterLiquity: liquity,\n      };\n    } else {\n      remind = remindWithFee.sub(maxAmountIn);\n      amountUsed = amountUsed.add(maxAmountIn).add(fullStepFee);\n      feeUsed = feeUsed.add(fullStepFee);\n      out = out.add(maxAmountB(lowerSqrtPrice, upperSqrtPrice, liquity));\n      liquity = liquity.sub(ticksI.liquityNet);\n      currentSqrtPrice = ticksI.tickPrice.sub(PRICE_OFFSET);\n      //upperSqrtPrice = ticks[i].tickPrice;\n    }\n  }\n  return {\n    amountOut: out,\n    amountUsed,\n    feeUsed,\n    afterPrice: currentSqrtPrice,\n    afterLiquity: liquity,\n  };\n}\n\n/**\n *\n * @param ticks The tick array of token swap\n * @param currentSqrtPrice The current sqrt price of token swap\n * @param fee The fee rate of token swap\n * @param currentLiquity The current liquity of token swap\n * @param amountIn The amount in of token B\n * @returns amountOut:The amount out of token B, amountUsed:The used of amountIn, afterPrice:The price after calculate, afterLiquity: The liquity after calculate\n */\nexport function calculateSwapB2A(\n  ticks: Tick[],\n  currentSqrtPrice: Decimal,\n  fee: Decimal,\n  currentLiquity: Decimal,\n  amountIn: Decimal\n): {\n  amountOut: Decimal;\n  amountUsed: Decimal;\n  feeUsed: Decimal;\n  afterPrice: Decimal;\n  afterLiquity: Decimal;\n} {\n  invariant(amountIn.greaterThan(new Decimal(0)), \"invalid amount in\");\n  invariant(\n    currentLiquity.greaterThanOrEqualTo(new Decimal(0)),\n    \"invalid liquity\"\n  );\n  invariant(ticks.length > 0, \"the ticks is empty\");\n  //let currentTick = sqrtPrice2Tick(currentSqrtPrice);\n  const lastTick = ticks[ticks.length - 1];\n  invariant(\n    lastTick !== undefined && currentSqrtPrice.lessThan(lastTick.tickPrice),\n    \"out of ticks\"\n  );\n  let liquity = currentLiquity;\n  let out = new Decimal(0);\n  let remind = amountIn;\n  let remindWithFee = new Decimal(0);\n  let amountUsed = new Decimal(0);\n  let feeUsed = new Decimal(0);\n  for (let i = 0; i < ticks.length; i++) {\n    const ticksI = ticks[i];\n    invariant(ticksI !== undefined);\n    if (liquity.equals(new Decimal(0))) {\n      currentSqrtPrice = ticksI.tickPrice.add(PRICE_OFFSET);\n      liquity = liquity.add(ticksI.liquityNet);\n      continue;\n    }\n    if (currentSqrtPrice > ticksI.tickPrice) {\n      continue;\n    }\n    const upperSqrtPrice = ticksI.tickPrice;\n    const maxAmountIn = maxAmountB(currentSqrtPrice, upperSqrtPrice, liquity);\n    const fullStepFee = maxAmountIn.mul(fee).toDP(0, Decimal.ROUND_DOWN);\n    if (remind.lessThan(fullStepFee)) {\n      remindWithFee = remind;\n    } else {\n      remindWithFee = remind.sub(fullStepFee);\n    }\n    if (maxAmountIn.greaterThanOrEqualTo(remindWithFee)) {\n      remindWithFee = remind\n        .mul(new Decimal(1).sub(fee))\n        .toDP(0, Decimal.ROUND_UP);\n      const { amountOut, afterSqrtPrice } = swapB2A(\n        currentSqrtPrice,\n        liquity,\n        remindWithFee\n      );\n      amountUsed = amountUsed.add(remind);\n      feeUsed = feeUsed.add(remind.sub(remindWithFee));\n      return {\n        amountOut: out.add(amountOut),\n        feeUsed,\n        amountUsed,\n        afterPrice: afterSqrtPrice.pow(2),\n        afterLiquity: liquity,\n      };\n    } else {\n      remind = remindWithFee.sub(maxAmountIn);\n      amountUsed = amountUsed.add(maxAmountIn).add(fullStepFee);\n      feeUsed = feeUsed.add(fullStepFee);\n      out = out.add(maxAmountA(currentSqrtPrice, upperSqrtPrice, liquity));\n      liquity = liquity.add(ticksI.liquityNet);\n      currentSqrtPrice = ticksI.tickPrice.add(PRICE_OFFSET);\n    }\n  }\n  return {\n    amountOut: out,\n    amountUsed,\n    feeUsed,\n    afterPrice: currentSqrtPrice,\n    afterLiquity: liquity,\n  };\n}\n\n/** @internal */\nexport function maxAmountA(\n  lowerSqrtPrice: Decimal,\n  upperSqrtPrice: Decimal,\n  liquity: Decimal\n): Decimal {\n  return liquity\n    .div(lowerSqrtPrice)\n    .toDP(0, Decimal.ROUND_DOWN)\n    .sub(liquity.div(upperSqrtPrice).toDP(0, Decimal.ROUND_DOWN));\n}\n\n/** @internal */\nexport function maxAmountB(\n  lowerSqrtPrice: Decimal,\n  upperSqrtPrice: Decimal,\n  liquity: Decimal\n): Decimal {\n  return liquity\n    .mul(upperSqrtPrice.sub(lowerSqrtPrice))\n    .toDP(0, Decimal.ROUND_DOWN);\n}\n\n/** @internal */\nexport function swapA2B(\n  upperSqrtPrice: Decimal,\n  liquity: Decimal,\n  amountIn: Decimal\n): { amountOut: Decimal; afterSqrtPrice: Decimal } {\n  const afterSqrtPrice = liquity.div(amountIn.add(liquity.div(upperSqrtPrice)));\n  const delta_increase = amountIn.add(\n    liquity.div(upperSqrtPrice).toDP(0, Decimal.ROUND_DOWN)\n  );\n  const out = liquity\n    .mul(upperSqrtPrice)\n    .toDP(0, Decimal.ROUND_DOWN)\n    .sub(liquity.mul(liquity).div(delta_increase).toDP(0, Decimal.ROUND_DOWN));\n  return { amountOut: out, afterSqrtPrice };\n}\n\n/** @internal */\nexport function swapB2A(\n  lowerSqrtPrice: Decimal,\n  liquity: Decimal,\n  amountIn: Decimal\n): { amountOut: Decimal; afterSqrtPrice: Decimal } {\n  const afterSqrtPrice = amountIn.div(liquity).add(lowerSqrtPrice);\n  const delta_increase = amountIn.add(\n    liquity.mul(lowerSqrtPrice).toDP(0, Decimal.ROUND_DOWN)\n  );\n  const out = liquity\n    .div(lowerSqrtPrice)\n    .toDP(0, Decimal.ROUND_DOWN)\n    .sub(liquity.mul(liquity).div(delta_increase).toDP(0, Decimal.ROUND_DOWN));\n  return { amountOut: out, afterSqrtPrice };\n}\n\n/*\n * Convert the tick to ui price.\n * @param tick the tick.\n * @param baseDecimals the base token decimals.\n * @param quoteDecimals the quote token decimals\n * @return The ui price\n */\nexport function tick2UiPrice(\n  tick: number,\n  baseDecimals: number,\n  quoteDecimals: number\n): Decimal {\n  return lamportPrice2uiPrice(tick2Price(tick), baseDecimals, quoteDecimals);\n}\n\n/*\n * Convert the ui price to tick.\n * @param price the ui price.\n * @param baseDecimals the base token decimals.\n * @param quoteDecimals the quote token decimals\n * @return The tick\n */\nexport function uiPrice2Tick(\n  price: Decimal,\n  baseDecimals: number,\n  quoteDecimals: number\n): number {\n  return price2Tick(uiPrice2LamportPrice(price, baseDecimals, quoteDecimals));\n}\n\n/*\n * Convert the lamport price(with decimals) to ui price\n * @param price the lamport price\n * @param baseDecimals the base token decimals.\n * @param quoteDecimals the quote token decimals\n * @return The ui price\n */\nexport function lamportPrice2uiPrice(\n  price: Decimal,\n  baseDecimals: number,\n  quoteDecimals: number\n): Decimal {\n  const multiple = new Decimal(10).pow(baseDecimals - quoteDecimals);\n  return price.mul(multiple);\n}\n\n/*\n * Convert the ui price to lamport price\n * @param price the lamport price\n * @param baseDecimals the base token decimals.\n * @param quoteDecimals the quote token decimals\n * @return The lamport price\n */\nexport function uiPrice2LamportPrice(\n  price: Decimal,\n  baseDecimals: number,\n  quoteDecimals: number\n): Decimal {\n  const multiple = new Decimal(10).pow(quoteDecimals - baseDecimals);\n  return price.mul(multiple);\n}\n"]}