{"version":3,"file":"positions.js","sourceRoot":"","sources":["../../../src/state/positions.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,MAAM,EAAE,EAAE,EAAE,MAAM,uBAAuB,CAAC;AAKnE,OAAO,EAAE,WAAW,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAExD,MAAM,CAAC,MAAM,sBAAsB,GAAG,MAAM,CAAC;AAC7C,MAAM,CAAC,MAAM,sBAAsB,GAAG,CAAC,CAAC;AA8BxC,MAAM,CAAC,MAAM,cAAc,GAAG,MAAM,CAClC;IACE,SAAS,CAAC,YAAY,CAAC;IACvB,GAAG,CAAC,WAAW,CAAC;IAChB,GAAG,CAAC,WAAW,CAAC;IAChB,WAAW,CAAC,SAAS,CAAC;IACtB,WAAW,CAAC,sBAAsB,EAAE,EAAE,CAAC;IACvC,WAAW,CAAC,sBAAsB,EAAE,EAAE,CAAC;IACvC,WAAW,CAAC,WAAW,EAAE,EAAE,CAAC;IAC5B,WAAW,CAAC,WAAW,EAAE,EAAE,CAAC;CAC7B,EACD,UAAU,CACX,CAAC;AAEF,MAAM,CAAC,MAAM,sBAAsB,GAAG,MAAM,CAC1C;IACE,EAAE,CAAC,aAAa,CAAC;IACjB,SAAS,CAAC,cAAc,CAAC;IACzB,EAAE,CAAC,aAAa,CAAC;IACjB,GAAG,CAAC,KAAK,CAAC;IACV,IAAI,CAAC,sBAAsB,GAAG,EAAE,EAAE,UAAU,CAAC;CAC9C,EACD,kBAAkB,CACnB,CAAC;AAEF,MAAM,CAAC,MAAM,2BAA2B,GAAG,IAAI,CAAC,KAAK,CACnD,CAAC,sBAAsB,GAAG,EAAE,CAAC,GAAG,cAAc,CAAC,IAAI,CACpD,CAAC;AAEF,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,IAAyB,EAAW,EAAE;IACvE,OAAO,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,KAAK,sBAAsB,CAAC;AAC5D,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,qBAAqB,GAA6B,CAC7D,MAAiB,EACjB,IAAyB,EACzB,EAAE;IACF,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC;QAAE,OAAO;IAEtC,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACtC,MAAM,EAAE,WAAW,EAAE,YAAY,EAAE,WAAW,EAAE,GAAG,EAAE,QAAQ,EAAE,GAC7D,sBAAsB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IAExC,MAAM,YAAY,GAAG,GAAG,GAAG,cAAc,CAAC,IAAI,CAAC;IAC/C,MAAM,eAAe,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC;IACxD,MAAM,SAAS,GAAG,GAAG,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;IAEnE,MAAM,gBAAgB,GAAqB;QACzC,WAAW;QACX,YAAY;QACZ,WAAW;QACX,GAAG;QACH,SAAS;KACV,CAAC;IAEF,OAAO;QACL,MAAM;QACN,IAAI;QACJ,IAAI,EAAE,gBAAgB;KACvB,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { blob, s32, seq, struct, u8 } from \"@solana/buffer-layout\";\nimport type { AccountInfo, PublicKey } from \"@solana/web3.js\";\nimport type Decimal from \"decimal.js\";\n\nimport type { Parser } from \"../util/layout\";\nimport { decimalU128, publicKey } from \"../util/layout\";\n\nexport const POSITIONS_ACCOUNT_SIZE = 360000;\nexport const POSITIONS_ACCOUNT_TYPE = 2;\n\nexport interface Position {\n  nftTokenId: PublicKey;\n  lowerTick: number;\n  upperTick: number;\n  liquity: Decimal;\n  feeGrowthInsideALast: Decimal;\n  feeGrowthInsideBLast: Decimal;\n  tokenAFee: Decimal;\n  tokenBFee: Decimal;\n}\n\nexport interface PositionsAccount {\n  swapVersion: number;\n  tokenSwapKey: PublicKey;\n  accountType: number;\n  len: number;\n  positions: Position[];\n}\n\n/* @internal */\nexport interface PositionsAccountDataFlat {\n  swapVersion: number;\n  tokenSwapKey: PublicKey;\n  accountType: number;\n  len: number;\n  dataFlat: Uint8Array;\n}\n\nexport const PositionLayout = struct<Position>(\n  [\n    publicKey(\"nftTokenId\"),\n    s32(\"lowerTick\"),\n    s32(\"upperTick\"),\n    decimalU128(\"liquity\"),\n    decimalU128(\"feeGrowthInsideALast\", 16),\n    decimalU128(\"feeGrowthInsideBLast\", 16),\n    decimalU128(\"tokenAFee\", 16),\n    decimalU128(\"tokenBFee\", 16),\n  ],\n  \"position\"\n);\n\nexport const PositionsAccountLayout = struct<PositionsAccountDataFlat>(\n  [\n    u8(\"swapVersion\"),\n    publicKey(\"tokenSwapKey\"),\n    u8(\"accountType\"),\n    s32(\"len\"),\n    blob(POSITIONS_ACCOUNT_SIZE - 38, \"dataFlat\"),\n  ],\n  \"positionsAccount\"\n);\n\nexport const MAX_ACCOUNT_POSITION_LENGTH = Math.floor(\n  (POSITIONS_ACCOUNT_SIZE - 38) / PositionLayout.span\n);\n\nexport const isPositionsAccount = (info: AccountInfo<Buffer>): boolean => {\n  return info.data.readUInt8(33) === POSITIONS_ACCOUNT_TYPE;\n};\n\nexport const parsePositionsAccount: Parser<PositionsAccount> = (\n  pubkey: PublicKey,\n  info: AccountInfo<Buffer>\n) => {\n  if (!isPositionsAccount(info)) return;\n\n  const buffer = Buffer.from(info.data);\n  const { swapVersion, tokenSwapKey, accountType, len, dataFlat } =\n    PositionsAccountLayout.decode(buffer);\n\n  const positionSpan = len * PositionLayout.span;\n  const positionsBuffer = dataFlat.slice(0, positionSpan);\n  const positions = seq(PositionLayout, len).decode(positionsBuffer);\n\n  const positionsAccount: PositionsAccount = {\n    swapVersion,\n    tokenSwapKey,\n    accountType,\n    len,\n    positions,\n  };\n\n  return {\n    pubkey,\n    info,\n    data: positionsAccount,\n  };\n};\n"]}