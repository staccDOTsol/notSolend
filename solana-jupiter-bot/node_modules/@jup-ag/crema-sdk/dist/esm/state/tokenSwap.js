import { struct, u8, u32 } from "@solana/buffer-layout";
import { decimalU64, decimalU128, publicKey } from "../util/layout";
export const TOKEN_SWAP_ACCOUNT_TYPE = 0;
export const TokenSwapAccountLayout = struct([
    u8("version"),
    publicKey("tokenSwapKey"),
    u8("accountType"),
    u8("isInitialized"),
    u8("nonce"),
    publicKey("tokenProgramId"),
    publicKey("manager"),
    publicKey("managerTokenA"),
    publicKey("managerTokenB"),
    publicKey("swapTokenA"),
    publicKey("swapTokenB"),
    publicKey("tokenAMint"),
    publicKey("tokenBMint"),
    publicKey("ticksKey"),
    publicKey("positionsKey"),
    u8("curveType"),
    decimalU64("fee", 12),
    decimalU64("managerFee", 12),
    u32("tickSpace"),
    decimalU128("currentSqrtPrice", 12),
    decimalU128("currentLiquity"),
    decimalU128("feeGrowthGlobal0", 16),
    decimalU128("feeGrowthGlobal1", 16),
    decimalU128("managerFeeA"),
    decimalU128("managerFeeB"),
], "tokenSwapAccount");
export const TOKEN_SWAP_ACCOUNT_SIZE = TokenSwapAccountLayout.span;
export const isTokenSwapAccount = (info) => {
    return info.data.readUInt8(33) === TOKEN_SWAP_ACCOUNT_TYPE;
};
export const parseTokenSwapAccount = (pubkey, info) => {
    if (!isTokenSwapAccount(info)) {
        return;
    }
    const buffer = Buffer.from(info.data);
    const tokenSwapAccount = TokenSwapAccountLayout.decode(buffer);
    return {
        pubkey,
        info,
        data: tokenSwapAccount,
    };
};
//# sourceMappingURL=tokenSwap.js.map