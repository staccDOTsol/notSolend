import { struct, u8 } from "@solana/buffer-layout";
import { TOKEN_PROGRAM_ID } from "@solana/spl-token";
import { TransactionInstruction } from "@solana/web3.js";
import { decimalU64 } from "../util/layout";
import { TokenSwapInstruction } from "./instruction";
const DataLayout = struct([
    u8("instruction"),
    decimalU64("positionIndex"),
]);
export const claimInstruction = (programId, tokenSwapKey, authority, userTransferAuthority, swapTokenA, swapTokenB, userTokenA, userTokenB, nftMint, nftUser, ticksKey, positionsKey, positionIndex) => {
    const data = Buffer.alloc(DataLayout.span);
    DataLayout.encode({
        instruction: TokenSwapInstruction.Claim,
        positionIndex,
    }, data);
    const keys = [
        { pubkey: tokenSwapKey, isSigner: false, isWritable: false },
        { pubkey: authority, isSigner: false, isWritable: false },
        { pubkey: userTransferAuthority, isSigner: true, isWritable: false },
        { pubkey: nftMint, isSigner: false, isWritable: false },
        { pubkey: nftUser, isSigner: false, isWritable: false },
        { pubkey: swapTokenA, isSigner: false, isWritable: true },
        { pubkey: swapTokenB, isSigner: false, isWritable: true },
        { pubkey: userTokenA, isSigner: false, isWritable: true },
        { pubkey: userTokenB, isSigner: false, isWritable: true },
        { pubkey: ticksKey, isSigner: false, isWritable: false },
        { pubkey: positionsKey, isSigner: false, isWritable: true },
        { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },
    ];
    return new TransactionInstruction({
        keys,
        programId,
        data,
    });
};
//# sourceMappingURL=claim.js.map