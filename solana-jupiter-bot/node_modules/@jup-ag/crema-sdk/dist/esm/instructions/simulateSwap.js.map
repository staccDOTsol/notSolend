{"version":3,"file":"simulateSwap.js","sourceRoot":"","sources":["../../../src/instructions/simulateSwap.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,EAAE,EAAE,MAAM,uBAAuB,CAAC;AAEnD,OAAO,EAAE,sBAAsB,EAAE,MAAM,iBAAiB,CAAC;AAGzD,OAAO,EAAE,UAAU,EAAE,MAAM,gBAAgB,CAAC;AAC5C,OAAO,EAAE,oBAAoB,EAAE,MAAM,eAAe,CAAC;AASrD,MAAM,UAAU,GAAG,MAAM,CAAO;IAC9B,EAAE,CAAC,aAAa,CAAC;IACjB,UAAU,CAAC,UAAU,CAAC;IACtB,kCAAkC;IAClC,EAAE,CAAC,WAAW,CAAC;CAChB,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,uBAAuB,GAAG,CACrC,SAAoB,EACpB,YAAuB,EACvB,QAAmB,EACnB,QAAiB;AACjB,6BAA6B;AAC7B,SAAiB,EACO,EAAE;IAC1B,MAAM,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;IAC3C,UAAU,CAAC,MAAM,CACf;QACE,WAAW,EAAE,oBAAoB,CAAC,YAAY;QAC9C,QAAQ;QACR,oBAAoB;QACpB,SAAS;KACV,EACD,IAAI,CACL,CAAC;IACF,MAAM,IAAI,GAAG;QACX,EAAE,MAAM,EAAE,YAAY,EAAE,QAAQ,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE;QAC3D,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE;KACxD,CAAC;IACF,OAAO,IAAI,sBAAsB,CAAC;QAChC,IAAI;QACJ,SAAS;QACT,IAAI;KACL,CAAC,CAAC;AACL,CAAC,CAAC","sourcesContent":["import { struct, u8 } from \"@solana/buffer-layout\";\nimport type { PublicKey } from \"@solana/web3.js\";\nimport { TransactionInstruction } from \"@solana/web3.js\";\nimport type Decimal from \"decimal.js\";\n\nimport { decimalU64 } from \"../util/layout\";\nimport { TokenSwapInstruction } from \"./instruction\";\n\ninterface Data {\n  instruction: number;\n  amountIn: Decimal;\n  // minimumAmountOut: Decimal,\n  direction: number;\n}\n\nconst DataLayout = struct<Data>([\n  u8(\"instruction\"),\n  decimalU64(\"amountIn\"),\n  // decimalU64(\"minimumAmountOut\"),\n  u8(\"direction\"),\n]);\n\nexport const simulateSwapInstruction = (\n  programId: PublicKey,\n  tokenSwapKey: PublicKey,\n  ticksKey: PublicKey,\n  amountIn: Decimal,\n  // minimumAmountOut: Decimal,\n  direction: number\n): TransactionInstruction => {\n  const data = Buffer.alloc(DataLayout.span);\n  DataLayout.encode(\n    {\n      instruction: TokenSwapInstruction.SimulateSwap,\n      amountIn,\n      // minimumAmountOut,\n      direction,\n    },\n    data\n  );\n  const keys = [\n    { pubkey: tokenSwapKey, isSigner: false, isWritable: true },\n    { pubkey: ticksKey, isSigner: false, isWritable: true },\n  ];\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data,\n  });\n};\n"]}