{"version":3,"file":"core.cjs.development.js","sources":["../src/lib/idl/jupiter.ts","../src/constants.ts","../src/utils/layout.ts","../src/lib/cropper/swapLayout.ts","../src/lib/jupiterInstruction.ts","../src/lib/saber/saberAddDecimalsAmm.ts","../src/utils/getTwoPermutations.ts","../src/utils/chunks.ts","../src/utils/chunkedGetMultipleAccountInfos.ts","../src/lib/amm.ts","../src/lib/raydium/pools.ts","../src/lib/raydium/raydiumAmm.ts","../src/lib/serum/market.ts","../src/lib/serum/serumAmm.ts","../src/lib/split-trade/splitTradeAmm.ts","../src/lib/market.ts","../src/lib/saber/saberAmm.ts","../src/lib/aldrin/percentage.ts","../src/lib/aldrin/poolState.ts","../src/lib/aldrin/aldrinAmm.ts","../src/lib/spl-token-swap/splTokenSwapPools.ts","../src/lib/spl-token-swap/tokenSwapLayout.ts","../src/lib/spl-token-swap/splTokenSwapAmm.ts","../src/lib/mercurial/swapLayout.ts","../src/lib/mercurial/mercurialAmm.ts","../src/lib/cropper/cropperAmm.ts","../src/lib/crema/swapLayout.ts","../src/lib/crema/cremaAmm.ts","../src/lib/sencha/swapLayout.ts","../src/lib/sencha/senchaAmm.ts","../src/lib/lifinity/swapLayout.ts","../src/lib/lifinity/lifinityAmm.ts","../src/lib/whirlpool/whirlpoolAmm.ts","../src/lib/cykura/solanaTickDataProvider.ts","../src/lib/cykura/cykuraAmm.ts","../src/lib/ammFactory.ts","../src/lib/routes.ts","../src/utils/instruction.ts","../src/utils/token.ts","../src/lib/routeToInstructions.ts","../src/lib/serum/openOrders.ts","../src/lib/fee.ts","../src/utils/TransactionBuilder.ts","../src/utils/Owner.ts","../src/utils/wait.ts","../src/utils/transactionHelpers.ts","../src/utils/cartesian.ts","../src/lib/computeRouteInfos.ts","../src/utils/tx/errors.ts","../src/lib/getTopTokens.ts","../src/lib/jupiter.ts"],"sourcesContent":["export type Jupiter = {\n  version: '0.1.0';\n  name: 'jupiter';\n  instructions: [\n    {\n      name: 'mercurialExchange';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swapState';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'poolAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userTransferAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'sourceTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'destinationTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'saberExchange';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swap';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swapAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'clock';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'inputUserAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'inputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputUserAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'feesTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'saberSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swap';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swapAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'inputUserAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'inputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputUserAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'feesTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'saberAddDecimalsDeposit';\n      accounts: [\n        {\n          name: 'addDecimalsProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'wrapper';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'wrapperMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'wrapperUnderlyingTokens';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'owner';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'userUnderlyingTokens';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userWrappedTokens';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'saberAddDecimalsWithdraw';\n      accounts: [\n        {\n          name: 'addDecimalsProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'wrapper';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'wrapperMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'wrapperUnderlyingTokens';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'owner';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'userUnderlyingTokens';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userWrappedTokens';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'senchaExchange';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swap';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'inputUserAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'inputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'inputFeesAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputUserAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputFeesAccount';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'serumSwap';\n      accounts: [\n        {\n          name: 'market';\n          accounts: [\n            {\n              name: 'market';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'openOrders';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'requestQueue';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'eventQueue';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'bids';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'asks';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'coinVault';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'pcVault';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'vaultSigner';\n              isMut: false;\n              isSigner: false;\n            },\n          ];\n        },\n        {\n          name: 'authority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'orderPayerTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'coinWallet';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'pcWallet';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'dexProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'rent';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'side';\n          type: {\n            defined: 'Side';\n          };\n        },\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'tokenSwap';\n      accounts: [\n        {\n          name: 'tokenSwapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swap';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'authority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userTransferAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'source';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapSource';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapDestination';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'destination';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolFee';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'stepTokenSwap';\n      accounts: [\n        {\n          name: 'tokenSwapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swap';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'authority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userTransferAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'source';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapSource';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapDestination';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'destination';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolFee';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'cropperTokenSwap';\n      accounts: [\n        {\n          name: 'tokenSwapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swap';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swapState';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'authority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userTransferAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'source';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapSource';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapDestination';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'destination';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolFee';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'raydiumSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'ammId';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'ammAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'ammOpenOrders';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'ammTargetOrders';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolCoinTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolPcTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumProgramId';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'serumMarket';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumBids';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumAsks';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumEventQueue';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumCoinVaultAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumPcVaultAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumVaultSigner';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userSourceTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userDestinationTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userSourceOwner';\n          isMut: false;\n          isSigner: true;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'raydiumSwapV2';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'ammId';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'ammAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'ammOpenOrders';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolCoinTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolPcTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumProgramId';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'serumMarket';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumBids';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumAsks';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumEventQueue';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumCoinVaultAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumPcVaultAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumVaultSigner';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userSourceTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userDestinationTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userSourceOwner';\n          isMut: false;\n          isSigner: true;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'aldrinSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'pool';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'poolSigner';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'poolMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'baseTokenVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'quoteTokenVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'feePoolTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'walletAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'userBaseTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userQuoteTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'side';\n          type: {\n            defined: 'Side';\n          };\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'aldrinV2Swap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'pool';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'poolSigner';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'poolMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'baseTokenVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'quoteTokenVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'feePoolTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'walletAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'userBaseTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userQuoteTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'curve';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'side';\n          type: {\n            defined: 'Side';\n          };\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'cremaTokenSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'pool';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolSigner';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userSourceTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userDestinationTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolSourceTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolDestinationTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolTicksAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'walletAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'lifinityTokenSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'authority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'amm';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userTransferAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'sourceInfo';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'destinationInfo';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapSource';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapDestination';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'feeAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'pythAccount';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'pythPcAccount';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'configAccount';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'cykuraSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'signer';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'factoryState';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'poolState';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'inputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'inputVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'lastObservationState';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'coreProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'whirlpoolSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'whirlpool';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenOwnerAccountA';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenVaultA';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenOwnerAccountB';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenVaultB';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tickArray0';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tickArray1';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tickArray2';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'oracle';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'aToB';\n          type: 'bool';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'riskCheckAndFee';\n      accounts: [\n        {\n          name: 'tokenLedger';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userDestinationTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userTransferAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'initializeTokenLedger';\n      accounts: [\n        {\n          name: 'tokenLedger';\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: 'payer';\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: 'systemProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'setTokenLedger';\n      accounts: [\n        {\n          name: 'tokenLedger';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenAccount';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'createOpenOrders';\n      accounts: [\n        {\n          name: 'openOrders';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'payer';\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: 'dexProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'systemProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'rent';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'market';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n  ];\n  accounts: [\n    {\n      name: 'tokenLedger';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'tokenAccount';\n            type: 'publicKey';\n          },\n          {\n            name: 'amount';\n            type: 'u64';\n          },\n        ];\n      };\n    },\n  ];\n  types: [\n    {\n      name: 'Swap';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'tokens';\n            type: 'u64';\n          },\n          {\n            name: 'minTokens';\n            type: 'u64';\n          },\n          {\n            name: 'side';\n            type: {\n              defined: 'Side';\n            };\n          },\n        ];\n      };\n    },\n    {\n      name: 'Swap';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'tokens';\n            type: 'u64';\n          },\n          {\n            name: 'minTokens';\n            type: 'u64';\n          },\n          {\n            name: 'side';\n            type: {\n              defined: 'Side';\n            };\n          },\n        ];\n      };\n    },\n    {\n      name: 'Swap';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'amountIn';\n            type: 'u64';\n          },\n          {\n            name: 'minimumAmountOut';\n            type: 'u64';\n          },\n        ];\n      };\n    },\n    {\n      name: 'Swap';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'amount';\n            type: 'u64';\n          },\n          {\n            name: 'otherAmountThreshold';\n            type: 'u64';\n          },\n          {\n            name: 'sqrtPriceLimit';\n            type: 'u128';\n          },\n          {\n            name: 'amountSpecifiedIsInput';\n            type: 'bool';\n          },\n          {\n            name: 'aToB';\n            type: 'bool';\n          },\n        ];\n      };\n    },\n    {\n      name: 'SwapInstrution';\n      type: {\n        kind: 'enum';\n        variants: [\n          {\n            name: 'Swap';\n            fields: [\n              {\n                defined: 'Swap';\n              },\n            ];\n          },\n        ];\n      };\n    },\n    {\n      name: 'Side';\n      type: {\n        kind: 'enum';\n        variants: [\n          {\n            name: 'Bid';\n          },\n          {\n            name: 'Ask';\n          },\n        ];\n      };\n    },\n    {\n      name: 'Direction';\n      type: {\n        kind: 'enum';\n        variants: [\n          {\n            name: 'LeftToRight';\n          },\n          {\n            name: 'RightToLeft';\n          },\n        ];\n      };\n    },\n  ];\n  errors: [\n    {\n      code: 6000;\n      name: 'SlippageToleranceExceeded';\n      msg: 'Slippage tolerance exceeded';\n    },\n    {\n      code: 6001;\n      name: 'InvalidTokenLedger';\n      msg: 'Invalid token ledger';\n    },\n    {\n      code: 6002;\n      name: 'MissingTokenLedger';\n      msg: 'Missing token ledger';\n    },\n    {\n      code: 6003;\n      name: 'MissingMercurialExchangeTokenAccount';\n      msg: 'Missing mercurial exchange token account';\n    },\n    {\n      code: 6004;\n      name: 'LedgerTokenAccountDoesNotMatch';\n      msg: 'Ledger token account does not match';\n    },\n    {\n      code: 6005;\n      name: 'MissingPlatformFeeAccount';\n      msg: 'Missing platform fee account';\n    },\n    {\n      code: 6006;\n      name: 'InvalidCalculation';\n      msg: 'Invalid calculation';\n    },\n  ];\n};\n\nexport const IDL: Jupiter = {\n  version: '0.1.0',\n  name: 'jupiter',\n  instructions: [\n    {\n      name: 'mercurialExchange',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swapState',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userTransferAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'sourceTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'destinationTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'saberExchange',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swap',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swapAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'clock',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'inputUserAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'inputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputUserAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'feesTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'saberSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swap',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swapAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'inputUserAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'inputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputUserAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'feesTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'saberAddDecimalsDeposit',\n      accounts: [\n        {\n          name: 'addDecimalsProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'wrapper',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'wrapperMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'wrapperUnderlyingTokens',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'owner',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'userUnderlyingTokens',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userWrappedTokens',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'saberAddDecimalsWithdraw',\n      accounts: [\n        {\n          name: 'addDecimalsProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'wrapper',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'wrapperMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'wrapperUnderlyingTokens',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'owner',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'userUnderlyingTokens',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userWrappedTokens',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'senchaExchange',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swap',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'inputUserAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'inputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'inputFeesAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputUserAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputFeesAccount',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'serumSwap',\n      accounts: [\n        {\n          name: 'market',\n          accounts: [\n            {\n              name: 'market',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'openOrders',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'requestQueue',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'eventQueue',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'bids',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'asks',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'coinVault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'pcVault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultSigner',\n              isMut: false,\n              isSigner: false,\n            },\n          ],\n        },\n        {\n          name: 'authority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'orderPayerTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'coinWallet',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'pcWallet',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'dexProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'side',\n          type: {\n            defined: 'Side',\n          },\n        },\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'tokenSwap',\n      accounts: [\n        {\n          name: 'tokenSwapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swap',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'authority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userTransferAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'source',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapSource',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapDestination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'destination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolFee',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'stepTokenSwap',\n      accounts: [\n        {\n          name: 'tokenSwapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swap',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'authority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userTransferAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'source',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapSource',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapDestination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'destination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolFee',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'cropperTokenSwap',\n      accounts: [\n        {\n          name: 'tokenSwapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swap',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swapState',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'authority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userTransferAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'source',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapSource',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapDestination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'destination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolFee',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'raydiumSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'ammId',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'ammAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'ammOpenOrders',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'ammTargetOrders',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolCoinTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolPcTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumProgramId',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'serumMarket',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumBids',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumAsks',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumEventQueue',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumCoinVaultAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumPcVaultAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumVaultSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userSourceTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userDestinationTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userSourceOwner',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'raydiumSwapV2',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'ammId',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'ammAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'ammOpenOrders',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolCoinTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolPcTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumProgramId',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'serumMarket',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumBids',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumAsks',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumEventQueue',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumCoinVaultAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumPcVaultAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumVaultSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userSourceTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userDestinationTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userSourceOwner',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'aldrinSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'pool',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'baseTokenVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'quoteTokenVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'feePoolTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'walletAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'userBaseTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userQuoteTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'side',\n          type: {\n            defined: 'Side',\n          },\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'aldrinV2Swap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'pool',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'baseTokenVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'quoteTokenVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'feePoolTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'walletAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'userBaseTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userQuoteTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'curve',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'side',\n          type: {\n            defined: 'Side',\n          },\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'cremaTokenSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'pool',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userSourceTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userDestinationTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolSourceTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolDestinationTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolTicksAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'walletAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'lifinityTokenSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'authority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'amm',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userTransferAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'sourceInfo',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'destinationInfo',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapSource',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapDestination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'feeAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'pythAccount',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'pythPcAccount',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'configAccount',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'cykuraSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'signer',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'factoryState',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolState',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'inputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'inputVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'lastObservationState',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'coreProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'whirlpoolSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'whirlpool',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenOwnerAccountA',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenVaultA',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenOwnerAccountB',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenVaultB',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tickArray0',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tickArray1',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tickArray2',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'oracle',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'aToB',\n          type: 'bool',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'riskCheckAndFee',\n      accounts: [\n        {\n          name: 'tokenLedger',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userDestinationTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userTransferAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'initializeTokenLedger',\n      accounts: [\n        {\n          name: 'tokenLedger',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'payer',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'setTokenLedger',\n      accounts: [\n        {\n          name: 'tokenLedger',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenAccount',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'createOpenOrders',\n      accounts: [\n        {\n          name: 'openOrders',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'payer',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'dexProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'market',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n  ],\n  accounts: [\n    {\n      name: 'tokenLedger',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'tokenAccount',\n            type: 'publicKey',\n          },\n          {\n            name: 'amount',\n            type: 'u64',\n          },\n        ],\n      },\n    },\n  ],\n  types: [\n    {\n      name: 'Swap',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'tokens',\n            type: 'u64',\n          },\n          {\n            name: 'minTokens',\n            type: 'u64',\n          },\n          {\n            name: 'side',\n            type: {\n              defined: 'Side',\n            },\n          },\n        ],\n      },\n    },\n    {\n      name: 'Swap',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'tokens',\n            type: 'u64',\n          },\n          {\n            name: 'minTokens',\n            type: 'u64',\n          },\n          {\n            name: 'side',\n            type: {\n              defined: 'Side',\n            },\n          },\n        ],\n      },\n    },\n    {\n      name: 'Swap',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'amountIn',\n            type: 'u64',\n          },\n          {\n            name: 'minimumAmountOut',\n            type: 'u64',\n          },\n        ],\n      },\n    },\n    {\n      name: 'Swap',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'amount',\n            type: 'u64',\n          },\n          {\n            name: 'otherAmountThreshold',\n            type: 'u64',\n          },\n          {\n            name: 'sqrtPriceLimit',\n            type: 'u128',\n          },\n          {\n            name: 'amountSpecifiedIsInput',\n            type: 'bool',\n          },\n          {\n            name: 'aToB',\n            type: 'bool',\n          },\n        ],\n      },\n    },\n    {\n      name: 'SwapInstrution',\n      type: {\n        kind: 'enum',\n        variants: [\n          {\n            name: 'Swap',\n            fields: [\n              {\n                defined: 'Swap',\n              },\n            ],\n          },\n        ],\n      },\n    },\n    {\n      name: 'Side',\n      type: {\n        kind: 'enum',\n        variants: [\n          {\n            name: 'Bid',\n          },\n          {\n            name: 'Ask',\n          },\n        ],\n      },\n    },\n    {\n      name: 'Direction',\n      type: {\n        kind: 'enum',\n        variants: [\n          {\n            name: 'LeftToRight',\n          },\n          {\n            name: 'RightToLeft',\n          },\n        ],\n      },\n    },\n  ],\n  errors: [\n    {\n      code: 6000,\n      name: 'SlippageToleranceExceeded',\n      msg: 'Slippage tolerance exceeded',\n    },\n    {\n      code: 6001,\n      name: 'InvalidTokenLedger',\n      msg: 'Invalid token ledger',\n    },\n    {\n      code: 6002,\n      name: 'MissingTokenLedger',\n      msg: 'Missing token ledger',\n    },\n    {\n      code: 6003,\n      name: 'MissingMercurialExchangeTokenAccount',\n      msg: 'Missing mercurial exchange token account',\n    },\n    {\n      code: 6004,\n      name: 'LedgerTokenAccountDoesNotMatch',\n      msg: 'Ledger token account does not match',\n    },\n    {\n      code: 6005,\n      name: 'MissingPlatformFeeAccount',\n      msg: 'Missing platform fee account',\n    },\n    {\n      code: 6006,\n      name: 'InvalidCalculation',\n      msg: 'Invalid calculation',\n    },\n  ],\n};\n","import { Cluster, PublicKey } from '@solana/web3.js';\nimport { IDL } from './lib/idl/jupiter';\n\nexport const WRAPPED_SOL_MINT = new PublicKey('So11111111111111111111111111111111111111112');\n\nexport const MAINNET_SERUM_DEX_PROGRAM = new PublicKey('9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin');\n\nexport const DEVNET_SERUM_DEX_PROGRAM = new PublicKey('DESVgJVGajEgKGXhb6XmqDHGz3VjdgP7rEVESBgxmroY');\n\nexport const MARKETS_URL: Record<Cluster, string> = {\n  devnet: 'https://api.jup.ag/api/markets/cache/devnet',\n  'mainnet-beta': 'https://cache.jup.ag/markets?v=3',\n  testnet: 'https://api.jup.ag/api/markets/cache/devnet',\n};\n\nexport const TOKEN_LIST_URL: Record<Cluster, string> = {\n  devnet: 'https://api.jup.ag/api/tokens/devnet',\n  testnet: 'https://api.jup.ag/api/markets/devnet',\n  'mainnet-beta': 'https://cache.jup.ag/tokens',\n};\n\nexport const LAMPORTS_PER_SIGNATURE = 5000;\n\nexport const RAYDIUM_AMM_V4_PROGRAM_ID = new PublicKey('675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8');\n\nexport const ALDRIN_SWAP_PROGRAM_ID = new PublicKey('AMM55ShdkoGRB5jVYPjWziwk8m5MpwyDgsMWHaMSQWH6');\n\n// https://github.com/aldrin-exchange/aldrin-sdk/blob/f93fe3f2d847d79d8ddff507d8d4f62fd803421b/src/v2.json\nexport const ALDRIN_SWAP_V2_PROGRAM_ID = new PublicKey('CURVGoZn8zycx6FXwwevgBTB2gVvdbGTEpvMJDbgs2t4');\n\nexport const SABER_ADD_DECIMALS_PROGRAM_ID = new PublicKey('DecZY86MU5Gj7kppfUCEmd4LbXXuyZH1yHaP2NTqdiZB');\n\nexport const CROPPER_PROGRAM_ID = new PublicKey('CTMAxxk34HjKWxQ3QLZK1HpaLXmBveao3ESePXbiyfzh');\n\nexport const SENCHA_PROGRAM_ID = new PublicKey('SCHAtsf8mbjyjiv4LkhLKutTf6JnZAbdJKFkXQNMFHZ');\n\nexport const LIFINITY_PROGRAM_ID = new PublicKey('EewxydAPCCVuNEyrVN68PuSYdQ7wKn27V9Gjeoi8dy3S');\n\nexport const CREMA_PROGRAM_ID = new PublicKey('6MLxLqiXaaSUpkgMnWDTuejNZEz3kE7k2woyHGVFw319');\n\nexport const JUPITER_WALLET = new PublicKey('BUX7s2ef2htTGb2KKoPHWkmzxPj4nTWMWRgs5CSbQxf9');\n\nexport const MERCURIAL_SWAP_PROGRAM_ID = new PublicKey('MERLuDFBMmsHnsBPZw2sDQZHvXFMwp8EdjudcU2HKky');\n\nexport const WHIRLPOOL_PROGRAM_ID = new PublicKey('whirLbMiicVdio4qvUfM5KAg6Ct8VwpYzGff3uctyCc');\n\nexport const CYKURA_PROGRAM_ID = new PublicKey('cysPXAjehMpVKUapzbMCCnpFxUFFryEWEaLgnb9NrR8');\n\nexport const CYKURA_FACTORY_STATE_ADDRESS = new PublicKey('DBsMwKfeoUHhxMi9x6wd2AsT12UwUCssjNbUzu1aKgqj');\n\n/** Tokens which are fundamental pivot in certain protocols */\nexport const SWAP_PROTOCOL_TOKENS = [\n  'StepAscQoEioFxxWGnh2sLBDFp9d8rvKz2Yp39iDpyT', // STEP\n  'DubwWZNWiNGMMeeQHPnMATNj77YZPZSAz2WVR5WjLJqz', // CRP\n];\n\ninterface ErrorDetails {\n  code: number;\n  name: string;\n  msg: string;\n}\n\ntype JUPITER_ERROR_TYPES =\n  | 'TransactionNotConfirmed'\n  | 'BalancesNotExtractedProperly'\n  | typeof IDL.errors[number]['name'];\n\nexport const JUPITER_ERRORS: Record<JUPITER_ERROR_TYPES, ErrorDetails> = Object.freeze({\n  TransactionNotConfirmed: {\n    code: 7000, // a code that is not in the list of errors\n    name: 'TransactionNotConfirmed',\n    msg: 'Transaction was not confirmed',\n  },\n  BalancesNotExtractedProperly: {\n    code: 7001, // a code that is not in the list of errors\n    name: 'BalancesNotExtractedProperly',\n    msg: 'Balances cannot be extracted properly',\n  },\n  ...IDL.errors.reduce((accErrors, error) => {\n    return { ...accErrors, [error.name]: error };\n  }, {} as Record<typeof IDL.errors[number]['name'], ErrorDetails>),\n});\n\nexport const IS_DEV = process.env.NODE_ENV === 'development';\n","import { blob, Layout, Structure, u8, union } from '@solana/buffer-layout';\nimport { u64 } from '@solana/spl-token';\nimport { PublicKey } from '@solana/web3.js';\n\nclass PublicKeyLayout extends Layout<PublicKey> {\n  private layout: Layout<any>;\n\n  constructor(property?: string) {\n    const layout = blob(32);\n    super(layout.span, property);\n    this.layout = layout;\n  }\n\n  getSpan(b: Uint8Array, offset?: number) {\n    return this.layout.getSpan(b, offset);\n  }\n\n  decode(b: Uint8Array, offset?: number): PublicKey {\n    return new PublicKey(this.layout.decode(b, offset));\n  }\n\n  encode(src: PublicKey, b: Uint8Array, offset: number): number {\n    return this.layout.encode(src.toBuffer(), b, offset);\n  }\n}\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string) => new PublicKeyLayout(property);\n\nclass U64Layout extends Layout<u64> {\n  private layout: Layout<any>;\n\n  constructor(span = 8, property: string) {\n    const layout = blob(span);\n    super(layout.span, property);\n    this.layout = layout;\n  }\n\n  getSpan(b: Uint8Array, offset?: number) {\n    return this.layout.getSpan(b, offset);\n  }\n\n  decode(b: Uint8Array, offset?: number): u64 {\n    const bn = new u64(this.layout.decode(b, offset), 10, 'le');\n\n    return bn;\n  }\n\n  encode(src: u64, b: Uint8Array, offset: number): number {\n    return this.layout.encode(src.toArrayLike(Buffer, 'le', this.layout.span), b, offset);\n  }\n}\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string) => new U64Layout(8, property);\n\nexport const uint128 = (property: string) => new U64Layout(16, property);\n\nexport const rustEnum = (variants: Structure<any>[], property: string) => {\n  // @ts-expect-error TODO: fix this\n  const unionLayout = union(u8(), u8(), property);\n  variants.forEach((variant, index) => unionLayout.addVariant(index, variant, variant.property || ''));\n  return unionLayout;\n};\n","import { findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { blob, struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/spl-token';\nimport { AccountInfo, PublicKey } from '@solana/web3.js';\nimport { publicKey, uint64 } from '../../utils/layout';\n\ninterface CropperTokenSwapLayout {\n  version: number;\n  isInitialized: number;\n  nonce: number;\n  ammId: PublicKey;\n  serumProgramId: PublicKey;\n  serumMarket: PublicKey;\n  tokenProgramId: PublicKey;\n  tokenAAccount: PublicKey;\n  tokenBAccount: PublicKey;\n  poolMint: PublicKey;\n  mintA: PublicKey;\n  mintB: PublicKey;\n}\n\nexport const CropperTokenSwapLayout = struct<CropperTokenSwapLayout>([\n  u8('version'),\n  u8('isInitialized'),\n  u8('nonce'),\n  publicKey('ammId'),\n  publicKey('serumProgramId'),\n  publicKey('serumMarket'),\n  publicKey('tokenProgramId'),\n  publicKey('tokenAAccount'),\n  publicKey('tokenBAccount'),\n  publicKey('poolMint'),\n  publicKey('mintA'),\n  publicKey('mintB'),\n]);\n\ninterface CropperStateLayout {\n  isInitialized: number;\n  stateOwner: PublicKey;\n  feeOwner: PublicKey;\n  initialSupply: u64;\n  returnFeeNumerator: u64;\n  fixedFeeNumerator: u64;\n  feeDenominator: u64;\n  curveType: number;\n  curveParameters: Uint8Array;\n}\n\nconst CropperStateLayout = struct<CropperStateLayout>([\n  u8('isInitialized'),\n  publicKey('stateOwner'),\n  publicKey('feeOwner'),\n  uint64('initialSupply'),\n  uint64('returnFeeNumerator'),\n  uint64('fixedFeeNumerator'),\n  uint64('feeDenominator'),\n  u8('curveType'),\n  blob(32, 'curveParameters'),\n]);\n\nexport interface CropperState {\n  isInitialized: boolean;\n  stateOwner: PublicKey;\n  feeOwner: PublicKey;\n  initialSupply: u64;\n  returnFeeNumerator: number;\n  fixedFeeNumerator: number;\n  feeDenominator: number;\n  curveType: number;\n  curveParameters: Uint8Array;\n}\n\nexport interface CropperPoolState {\n  programId: PublicKey;\n  authority: PublicKey;\n  version: number;\n  isInitialized: boolean;\n  nonce: number;\n  ammId: PublicKey;\n  serumProgramId: PublicKey;\n  serumMarket: PublicKey;\n  tokenProgramId: PublicKey;\n  tokenAAccount: PublicKey;\n  tokenBAccount: PublicKey;\n  poolMint: PublicKey;\n  mintA: PublicKey;\n  mintB: PublicKey;\n}\n\n// This seems to be hardcoded.\nexport const CROPPER_STATE_ADDRESS = new PublicKey('3hsU1VgsBgBgz5jWiqdw9RfGU6TpWdCmdah1oi4kF3Tq');\n\nexport const accountInfoToCropperPoolState = (\n  address: PublicKey,\n  accountInfo: AccountInfo<Buffer>,\n): CropperPoolState => {\n  const programId = accountInfo.owner;\n\n  const decoded = CropperTokenSwapLayout.decode(accountInfo.data);\n  const [authority] = findProgramAddressSync([address.toBuffer()], programId);\n\n  return {\n    programId,\n    authority,\n    version: decoded.version,\n    isInitialized: Boolean(decoded.isInitialized),\n    nonce: decoded.nonce,\n    ammId: decoded.ammId,\n    serumProgramId: decoded.serumProgramId,\n    tokenProgramId: decoded.tokenProgramId,\n    tokenAAccount: decoded.tokenAAccount,\n    tokenBAccount: decoded.tokenBAccount,\n    serumMarket: decoded.serumMarket,\n    poolMint: decoded.poolMint,\n    mintA: decoded.mintA,\n    mintB: decoded.mintB,\n  };\n};\n\nexport const stateAccountInfoToCropperState = (accountInfo: AccountInfo<Buffer>): CropperState => {\n  const decoded = CropperStateLayout.decode(accountInfo.data);\n\n  return {\n    isInitialized: Boolean(decoded.isInitialized),\n    stateOwner: decoded.stateOwner,\n    feeOwner: decoded.feeOwner,\n    initialSupply: decoded.initialSupply,\n    returnFeeNumerator: decoded.returnFeeNumerator.toNumber(),\n    fixedFeeNumerator: decoded.fixedFeeNumerator.toNumber(),\n    feeDenominator: decoded.feeDenominator.toNumber(),\n    curveType: decoded.curveType,\n    curveParameters: decoded.curveParameters,\n  };\n};\n","import type { Provider } from '@project-serum/anchor';\nimport { Program } from '@project-serum/anchor';\nimport { createProgramAddressSync, findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { Market } from '@project-serum/serum';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { AccountMeta, PublicKey, SystemProgram, SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport { BN } from 'bn.js';\nimport { Jupiter as JupiterIDL, IDL } from './idl/jupiter';\nimport type { RaydiumAmm } from './raydium/raydiumAmm';\nimport { StableSwap } from '@saberhq/stableswap-sdk';\nimport {\n  ALDRIN_SWAP_PROGRAM_ID,\n  ALDRIN_SWAP_V2_PROGRAM_ID,\n  RAYDIUM_AMM_V4_PROGRAM_ID,\n  SABER_ADD_DECIMALS_PROGRAM_ID,\n  MERCURIAL_SWAP_PROGRAM_ID,\n  CYKURA_PROGRAM_ID,\n  CYKURA_FACTORY_STATE_ADDRESS,\n  WHIRLPOOL_PROGRAM_ID,\n} from '../constants';\nimport { AldrinPoolState } from './aldrin/poolState';\nimport type { TokenSwapState } from './spl-token-swap/tokenSwapLayout';\nimport { PlatformFee } from './types';\nimport type { AddDecimals } from './saber/saberAddDecimalsAmm';\nimport { CropperPoolState, CROPPER_STATE_ADDRESS } from './cropper/swapLayout';\nimport { SenchaPoolState } from './sencha/swapLayout';\nimport { CremaPoolState } from './crema/swapLayout';\nimport { MercurialSwapLayoutState } from './mercurial/swapLayout';\nimport { LifinitySwapLayoutState } from './lifinity/swapLayout';\n\n// Side rust enum used for the program's RPC API.\nconst Side = {\n  Bid: { bid: {} },\n  Ask: { ask: {} },\n};\n\nexport const JUPITER_PROGRAM_ID_STAGING = new PublicKey('BUG9oTodrkqFqxLhvvaUtwsPLtk1wkcTC544fQn9fWPm');\nexport const JUPITER_PROGRAM_ID_PRODUCTION = new PublicKey('JUP2jxvXaqu7NQY1GmNF4m1vodw12LVXYxbFL2uJvfo');\n\nconst JUPITER_PROGRAM_ID = JUPITER_PROGRAM_ID_PRODUCTION; // JUPITER_PROGRAM_ID_PRODUCTION;\n\nconst JUPITER_PROGRAM = new Program<JupiterIDL>(IDL, JUPITER_PROGRAM_ID, {} as Provider);\n\nexport const STAGING_TOKEN_LEDGER = new PublicKey('FartgFP53i6ejPsr1owuc4ya2vxJGdcy5uEzMLJRcuzn');\nexport const PRODUCTION_TOKEN_LEDGER = new PublicKey('7h51TX1pNvSaNyjg4koKroJqoe7atKB7xWUfir7ZqX81');\n\nexport const PRODUCTION_TOKEN_LEDGERS = [\n  new PublicKey('7h51TX1pNvSaNyjg4koKroJqoe7atKB7xWUfir7ZqX81'),\n  new PublicKey('HgeLVK1nJ1kNdWSUNCKj6DfGqfhwgx67dfGPRcBSdE2d'),\n  new PublicKey('8ME9HwwchNknEVrcCSKYAQCa1YAYi3LZrEXJrY4ZNkkg'),\n  new PublicKey('Edg9J3CMky9AVJq2WrSar2JR38jFkg4S7vAW7Xsix8oV'),\n  new PublicKey('B5mW68TkDewnKvWNc2trkmmdSRxcCjZz3Yd9BWxQTSRU'),\n  new PublicKey('7E3TDrnS2zEp8uVri8EtPU8MyQ3qjLTc6cCGJAnAM48p'),\n];\n\nexport const TOKEN_LEDGER: PublicKey =\n  PRODUCTION_TOKEN_LEDGERS[Math.floor(Math.random() * PRODUCTION_TOKEN_LEDGERS.length)];\n\ntype CreateSwapInstructionParams = {\n  sourceMint: PublicKey;\n  userSourceTokenAccount: PublicKey;\n  userDestinationTokenAccount: PublicKey;\n  userTransferAuthority: PublicKey;\n  inAmount: number | null;\n  minimumOutAmount: number;\n  tokenLedger: PublicKey;\n  platformFee?: PlatformFee;\n};\n\nfunction stableSwapNPoolIntoMercurialExchange(\n  swayLayout: MercurialSwapLayoutState,\n  sourceTokenAccount: PublicKey,\n  destinationTokenAccount: PublicKey,\n  userTransferAuthority: PublicKey,\n) {\n  return {\n    swapProgram: MERCURIAL_SWAP_PROGRAM_ID,\n    swapState: swayLayout.ammId,\n    tokenProgram: TOKEN_PROGRAM_ID,\n    poolAuthority: swayLayout.authority,\n    userTransferAuthority: userTransferAuthority,\n\n    sourceTokenAccount,\n    destinationTokenAccount,\n  };\n}\n\nfunction raydiumAmmToRaydiumSwap(\n  raydiumAmm: RaydiumAmm,\n  userSourceTokenAccount: PublicKey,\n  userDestinationTokenAccount: PublicKey,\n  userTransferAuthority: PublicKey,\n) {\n  const [ammAuthority] = findProgramAddressSync(\n    [new Uint8Array(Buffer.from('amm authority'.replace('\\u00A0', ' '), 'utf-8'))],\n    RAYDIUM_AMM_V4_PROGRAM_ID,\n  );\n\n  if (!raydiumAmm.serumMarketKeys) {\n    throw new Error('RaydiumAmm is missing serumMarketKeys');\n  }\n\n  return {\n    swapProgram: RAYDIUM_AMM_V4_PROGRAM_ID,\n    tokenProgram: TOKEN_PROGRAM_ID,\n    ammId: raydiumAmm.ammId,\n    ammAuthority,\n    ammOpenOrders: raydiumAmm.ammOpenOrders,\n    poolCoinTokenAccount: raydiumAmm.poolCoinTokenAccount,\n    poolPcTokenAccount: raydiumAmm.poolPcTokenAccount,\n    serumProgramId: raydiumAmm.serumProgramId,\n    serumMarket: raydiumAmm.serumMarket,\n    serumBids: raydiumAmm.serumMarketKeys.serumBids,\n    serumAsks: raydiumAmm.serumMarketKeys.serumAsks,\n    serumEventQueue: raydiumAmm.serumMarketKeys.serumEventQueue,\n    serumCoinVaultAccount: raydiumAmm.serumMarketKeys.serumCoinVaultAccount,\n    serumPcVaultAccount: raydiumAmm.serumMarketKeys.serumPcVaultAccount,\n    serumVaultSigner: raydiumAmm.serumMarketKeys.serumVaultSigner,\n    userSourceTokenAccount: userSourceTokenAccount,\n    userDestinationTokenAccount: userDestinationTokenAccount,\n    userSourceOwner: userTransferAuthority,\n  };\n}\n\nfunction marketIntoSerumSwap(\n  market: Market,\n  openOrdersAddress: PublicKey,\n  orderPayerTokenAccountAddress: PublicKey,\n  coinWallet: PublicKey,\n  pcWallet: PublicKey,\n  userTransferAuthority: PublicKey,\n) {\n  const vaultSigner = createProgramAddressSync(\n    [market.address.toBuffer(), market.decoded.vaultSignerNonce.toArrayLike(Buffer, 'le', 8)],\n    market.programId,\n  );\n\n  return {\n    market: {\n      market: market.address,\n      openOrders: openOrdersAddress,\n      requestQueue: market.decoded.requestQueue,\n      eventQueue: market.decoded.eventQueue,\n      bids: market.bidsAddress,\n      asks: market.asksAddress,\n      coinVault: market.decoded.baseVault,\n      pcVault: market.decoded.quoteVault,\n      vaultSigner,\n    },\n    authority: userTransferAuthority,\n    orderPayerTokenAccount: orderPayerTokenAccountAddress,\n    coinWallet,\n    pcWallet,\n    // Programs.\n    dexProgram: market.programId,\n    tokenProgram: TOKEN_PROGRAM_ID,\n    // Sysvars.\n    rent: SYSVAR_RENT_PUBKEY,\n  };\n}\n\nexport function createMercurialExchangeInstruction({\n  swapLayout,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { swapLayout: MercurialSwapLayoutState } & CreateSwapInstructionParams): TransactionInstruction {\n  const remainingAccounts: AccountMeta[] = [];\n\n  for (const swapTokenAccount of swapLayout.tokenAccounts) {\n    remainingAccounts.push({\n      pubkey: swapTokenAccount,\n      isSigner: false,\n      isWritable: true,\n    });\n  }\n  remainingAccounts.push(...prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount));\n\n  return JUPITER_PROGRAM.instruction.mercurialExchange(\n    inAmount ? new BN(inAmount) : inAmount,\n    new BN(minimumOutAmount),\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: stableSwapNPoolIntoMercurialExchange(\n        swapLayout,\n        userSourceTokenAccount,\n        userDestinationTokenAccount,\n        userTransferAuthority,\n      ),\n      remainingAccounts,\n    },\n  );\n}\n\nexport function createSerumSwapInstruction({\n  market,\n  sourceMint,\n  openOrdersAddress,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n  referrer,\n}: {\n  market: Market;\n  openOrdersAddress: PublicKey;\n  referrer: PublicKey | undefined;\n} & CreateSwapInstructionParams): TransactionInstruction {\n  const { side, coinWallet, pcWallet } = sourceMint.equals(market.baseMintAddress)\n    ? {\n        side: Side.Ask,\n        coinWallet: userSourceTokenAccount,\n        pcWallet: userDestinationTokenAccount,\n      }\n    : {\n        side: Side.Bid,\n        coinWallet: userDestinationTokenAccount,\n        pcWallet: userSourceTokenAccount,\n      };\n\n  let remainingAccounts = prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount);\n\n  if (referrer) {\n    remainingAccounts.push({\n      pubkey: referrer,\n      isSigner: false,\n      isWritable: true,\n    });\n  }\n\n  return JUPITER_PROGRAM.instruction.serumSwap(\n    side,\n    inAmount ? new BN(inAmount) : inAmount,\n    new BN(minimumOutAmount),\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: marketIntoSerumSwap(\n        market,\n        openOrdersAddress,\n        userSourceTokenAccount,\n        coinWallet,\n        pcWallet,\n        userTransferAuthority,\n      ),\n      remainingAccounts,\n    },\n  );\n}\n\nexport function createTokenSwapInstruction({\n  tokenSwapState,\n  sourceMint,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n  isStep,\n}: { tokenSwapState: TokenSwapState; isStep: boolean } & CreateSwapInstructionParams): TransactionInstruction {\n  const [swapSource, swapDestination] = sourceMint.equals(tokenSwapState.mintA)\n    ? [tokenSwapState.tokenAccountA, tokenSwapState.tokenAccountB]\n    : [tokenSwapState.tokenAccountB, tokenSwapState.tokenAccountA];\n\n  return (isStep ? JUPITER_PROGRAM.instruction.stepTokenSwap : JUPITER_PROGRAM.instruction.tokenSwap)(\n    inAmount ? new BN(inAmount) : inAmount,\n    new BN(minimumOutAmount),\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: {\n        tokenSwapProgram: tokenSwapState.programId,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        swap: tokenSwapState.address,\n        authority: tokenSwapState.authority,\n        userTransferAuthority: userTransferAuthority,\n        source: userSourceTokenAccount,\n        swapSource,\n        swapDestination,\n        destination: userDestinationTokenAccount,\n        poolMint: tokenSwapState.poolToken,\n        poolFee: tokenSwapState.feeAccount,\n      },\n      remainingAccounts: prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount),\n    },\n  );\n}\n\nexport function createSenchaSwapInstruction({\n  poolState,\n  sourceMint,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { poolState: SenchaPoolState } & CreateSwapInstructionParams): TransactionInstruction {\n  const [swapSource, swapDestination] = sourceMint.equals(poolState.token0Mint)\n    ? [poolState.token0Reserves, poolState.token1Reserves]\n    : [poolState.token1Reserves, poolState.token0Reserves];\n\n  const [feesSource, feesDestination] = sourceMint.equals(poolState.token0Mint)\n    ? [poolState.token0Fees, poolState.token1Fees]\n    : [poolState.token1Fees, poolState.token0Fees];\n\n  return JUPITER_PROGRAM.instruction.senchaExchange(\n    inAmount ? new BN(inAmount) : inAmount,\n    new BN(minimumOutAmount),\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: {\n        swapProgram: poolState.programId,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        swap: poolState.ammId,\n        userAuthority: userTransferAuthority,\n        inputUserAccount: userSourceTokenAccount,\n        inputTokenAccount: swapSource,\n        inputFeesAccount: feesSource,\n        outputUserAccount: userDestinationTokenAccount,\n        outputTokenAccount: swapDestination,\n        outputFeesAccount: feesDestination,\n      },\n      remainingAccounts: prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount),\n    },\n  );\n}\n\nexport function createCropperSwapInstruction({\n  poolState,\n  feeAccount,\n  sourceMint,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { poolState: CropperPoolState; feeAccount: PublicKey } & CreateSwapInstructionParams): TransactionInstruction {\n  const [swapSource, swapDestination] = sourceMint.equals(poolState.mintA)\n    ? [poolState.tokenAAccount, poolState.tokenBAccount]\n    : [poolState.tokenBAccount, poolState.tokenAAccount];\n\n  return JUPITER_PROGRAM.instruction.cropperTokenSwap(\n    inAmount ? new BN(inAmount) : inAmount,\n    new BN(minimumOutAmount),\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: {\n        tokenSwapProgram: poolState.programId,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        swap: poolState.ammId,\n        swapState: CROPPER_STATE_ADDRESS,\n        authority: poolState.authority,\n        userTransferAuthority: userTransferAuthority,\n        source: userSourceTokenAccount,\n        swapSource,\n        swapDestination,\n        destination: userDestinationTokenAccount,\n        poolMint: poolState.poolMint,\n        poolFee: feeAccount,\n      },\n      remainingAccounts: prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount),\n    },\n  );\n}\n\nexport function createRaydiumSwapInstruction({\n  raydiumAmm,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { raydiumAmm: RaydiumAmm } & CreateSwapInstructionParams): TransactionInstruction {\n  return JUPITER_PROGRAM.instruction.raydiumSwapV2(\n    inAmount ? new BN(inAmount) : inAmount,\n    new BN(minimumOutAmount),\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: raydiumAmmToRaydiumSwap(\n        raydiumAmm,\n        userSourceTokenAccount,\n        userDestinationTokenAccount,\n        userTransferAuthority,\n      ),\n      remainingAccounts: prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount),\n    },\n  );\n}\n\nexport function createAldrinSwapInstruction({\n  poolState,\n  sourceMint,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: {\n  poolState: AldrinPoolState;\n} & CreateSwapInstructionParams): TransactionInstruction {\n  const [side, userBaseTokenAccount, userQuoteTokenAccount] = sourceMint.equals(poolState.baseTokenMint)\n    ? [Side.Ask, userSourceTokenAccount, userDestinationTokenAccount]\n    : [Side.Bid, userDestinationTokenAccount, userSourceTokenAccount];\n\n  return JUPITER_PROGRAM.instruction.aldrinSwap(\n    inAmount ? new BN(inAmount) : inAmount,\n    new BN(minimumOutAmount),\n    side,\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: {\n        swapProgram: ALDRIN_SWAP_PROGRAM_ID,\n        pool: poolState.address,\n        poolSigner: poolState.poolSigner,\n        poolMint: poolState.poolMint,\n        baseTokenVault: poolState.baseTokenVault,\n        quoteTokenVault: poolState.quoteTokenVault,\n        feePoolTokenAccount: poolState.feePoolTokenAccount,\n        walletAuthority: userTransferAuthority,\n        userBaseTokenAccount,\n        userQuoteTokenAccount,\n        tokenProgram: TOKEN_PROGRAM_ID,\n      },\n      remainingAccounts: prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount),\n    },\n  );\n}\n\nexport function createAldrinV2SwapInstruction({\n  poolState,\n  sourceMint,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  curve,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { poolState: AldrinPoolState; curve: PublicKey } & CreateSwapInstructionParams): TransactionInstruction {\n  const [side, userBaseTokenAccount, userQuoteTokenAccount] = sourceMint.equals(poolState.baseTokenMint)\n    ? [Side.Ask, userSourceTokenAccount, userDestinationTokenAccount]\n    : [Side.Bid, userDestinationTokenAccount, userSourceTokenAccount];\n\n  return JUPITER_PROGRAM.instruction.aldrinV2Swap(\n    inAmount ? new BN(inAmount) : inAmount,\n    new BN(minimumOutAmount),\n    side,\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: {\n        swapProgram: ALDRIN_SWAP_V2_PROGRAM_ID,\n        pool: poolState.address,\n        poolSigner: poolState.poolSigner,\n        poolMint: poolState.poolMint,\n        baseTokenVault: poolState.baseTokenVault,\n        quoteTokenVault: poolState.quoteTokenVault,\n        feePoolTokenAccount: poolState.feePoolTokenAccount,\n        walletAuthority: userTransferAuthority,\n        userBaseTokenAccount,\n        userQuoteTokenAccount,\n        curve,\n        tokenProgram: TOKEN_PROGRAM_ID,\n      },\n      remainingAccounts: prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount),\n    },\n  );\n}\n\nexport function createCremaSwapInstruction({\n  poolState,\n  sourceMint,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { poolState: CremaPoolState } & CreateSwapInstructionParams): TransactionInstruction {\n  const [swapSource, swapDestination] = sourceMint.equals(poolState.mintA)\n    ? [poolState.tokenAAccount, poolState.tokenBAccount]\n    : [poolState.tokenBAccount, poolState.tokenAAccount];\n\n  return JUPITER_PROGRAM.instruction.cremaTokenSwap(\n    inAmount ? new BN(inAmount) : inAmount,\n    new BN(minimumOutAmount),\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: {\n        swapProgram: poolState.programId,\n        pool: poolState.ammId,\n        poolSigner: poolState.authority,\n        userSourceTokenAccount: userSourceTokenAccount,\n        userDestinationTokenAccount: userDestinationTokenAccount,\n        poolSourceTokenAccount: swapSource,\n        poolDestinationTokenAccount: swapDestination,\n        poolTicksAccount: poolState.ticksKey,\n        walletAuthority: userTransferAuthority,\n        tokenProgram: TOKEN_PROGRAM_ID,\n      },\n      remainingAccounts: prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount),\n    },\n  );\n}\n\nexport function createRiskCheckAndFeeInstruction(\n  userDestinationTokenAccount: PublicKey,\n  userTransferAuthority: PublicKey,\n  minimumOutAmount: number,\n  tokenLedger: PublicKey,\n  platformFee: PlatformFee | undefined,\n): TransactionInstruction {\n  const remainingAccounts: AccountMeta[] = [];\n\n  if (platformFee?.feeAccount) {\n    remainingAccounts.push({\n      pubkey: platformFee.feeAccount,\n      isSigner: false,\n      isWritable: true,\n    });\n  }\n\n  return JUPITER_PROGRAM.instruction.riskCheckAndFee(new BN(minimumOutAmount), platformFee?.feeBps ?? 0, {\n    accounts: {\n      tokenLedger,\n      userDestinationTokenAccount,\n      userTransferAuthority,\n      tokenProgram: TOKEN_PROGRAM_ID,\n    },\n    remainingAccounts,\n  });\n}\n\nexport function createSetTokenLedgerInstruction(\n  tokenLedger: PublicKey,\n  tokenAccountAddress: PublicKey,\n): TransactionInstruction {\n  return JUPITER_PROGRAM.instruction.setTokenLedger({\n    accounts: {\n      tokenLedger,\n      tokenAccount: tokenAccountAddress,\n    },\n  });\n}\n\nexport function createInitializeTokenLedgerInstruction(\n  tokenLedger: PublicKey,\n  payer: PublicKey,\n): TransactionInstruction {\n  return JUPITER_PROGRAM.instruction.initializeTokenLedger({\n    accounts: {\n      tokenLedger,\n      payer,\n      systemProgram: SystemProgram.programId,\n    },\n  });\n}\n\nexport function createOpenOrdersInstruction(\n  market: Market,\n  userTransferAuthority: PublicKey,\n): [PublicKey, TransactionInstruction] {\n  const [openOrders] = findProgramAddressSync(\n    [Buffer.from('open_orders'), market.publicKey.toBuffer(), userTransferAuthority.toBuffer()],\n    JUPITER_PROGRAM_ID,\n  );\n\n  const ix = JUPITER_PROGRAM.instruction.createOpenOrders({\n    accounts: {\n      openOrders,\n      payer: userTransferAuthority,\n      dexProgram: market.programId,\n      systemProgram: SystemProgram.programId,\n      rent: SYSVAR_RENT_PUBKEY,\n      market: market.publicKey,\n    },\n  });\n  return [openOrders, ix];\n}\n\nfunction saberPoolIntoSaberSwap(\n  saberPool: StableSwap,\n  sourceMintAddress: PublicKey,\n  userSourceTokenAccount: PublicKey,\n  userDestinationTokenAccount: PublicKey,\n  userTransferAuthority: PublicKey,\n) {\n  const feesTokenAccount = sourceMintAddress.equals(saberPool.state.tokenA.mint)\n    ? saberPool.state.tokenB.adminFeeAccount\n    : saberPool.state.tokenA.adminFeeAccount;\n  const [inputTokenAccount, outputTokenAccount] = sourceMintAddress.equals(saberPool.state.tokenA.mint)\n    ? [saberPool.state.tokenA.reserve, saberPool.state.tokenB.reserve]\n    : [saberPool.state.tokenB.reserve, saberPool.state.tokenA.reserve];\n\n  return {\n    swapProgram: saberPool.config.swapProgramID,\n    tokenProgram: TOKEN_PROGRAM_ID,\n    swap: saberPool.config.swapAccount,\n    swapAuthority: saberPool.config.authority,\n    userAuthority: userTransferAuthority,\n    inputUserAccount: userSourceTokenAccount,\n    inputTokenAccount,\n    outputUserAccount: userDestinationTokenAccount,\n    outputTokenAccount,\n    feesTokenAccount,\n  };\n}\n\nexport function createSaberSwapInstruction({\n  stableSwap,\n  sourceMint,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { stableSwap: StableSwap } & CreateSwapInstructionParams): TransactionInstruction {\n  const remainingAccounts = prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount);\n  return JUPITER_PROGRAM.instruction.saberSwap(\n    inAmount ? new BN(inAmount) : inAmount,\n    new BN(minimumOutAmount),\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: saberPoolIntoSaberSwap(\n        stableSwap,\n        sourceMint,\n        userSourceTokenAccount,\n        userDestinationTokenAccount,\n        userTransferAuthority,\n      ),\n      remainingAccounts,\n    },\n  );\n}\n\nexport function createSaberAddDecimalsDepositInstruction({\n  addDecimals,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { addDecimals: AddDecimals } & CreateSwapInstructionParams) {\n  const remainingAccounts = prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount);\n  return JUPITER_PROGRAM.instruction.saberAddDecimalsDeposit(\n    inAmount ? new BN(inAmount) : inAmount,\n    new BN(minimumOutAmount),\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: {\n        addDecimalsProgram: SABER_ADD_DECIMALS_PROGRAM_ID,\n        wrapper: addDecimals.wrapper,\n        wrapperMint: addDecimals.mint,\n        wrapperUnderlyingTokens: addDecimals.wrapperUnderlyingTokens,\n        owner: userTransferAuthority,\n        userUnderlyingTokens: userSourceTokenAccount,\n        userWrappedTokens: userDestinationTokenAccount,\n        tokenProgram: TOKEN_PROGRAM_ID,\n      },\n      remainingAccounts,\n    },\n  );\n}\n\nexport function createSaberAddDecimalsWithdrawInstruction({\n  addDecimals,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { addDecimals: AddDecimals } & CreateSwapInstructionParams) {\n  const remainingAccounts = prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount);\n  return JUPITER_PROGRAM.instruction.saberAddDecimalsWithdraw(\n    inAmount ? new BN(inAmount) : inAmount,\n    new BN(minimumOutAmount),\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: {\n        addDecimalsProgram: SABER_ADD_DECIMALS_PROGRAM_ID,\n        wrapper: addDecimals.wrapper,\n        wrapperMint: addDecimals.mint,\n        wrapperUnderlyingTokens: addDecimals.wrapperUnderlyingTokens,\n        owner: userTransferAuthority,\n        userUnderlyingTokens: userDestinationTokenAccount,\n        userWrappedTokens: userSourceTokenAccount,\n        tokenProgram: TOKEN_PROGRAM_ID,\n      },\n      remainingAccounts,\n    },\n  );\n}\n\nexport function createLifinitySwapInstruction({\n  swapState,\n  sourceMint,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { swapState: LifinitySwapLayoutState } & CreateSwapInstructionParams): TransactionInstruction {\n  const [swapSource, swapDestination] = sourceMint.equals(swapState.tokenAMint)\n    ? [swapState.poolCoinTokenAccount, swapState.poolPcTokenAccount]\n    : [swapState.poolPcTokenAccount, swapState.poolCoinTokenAccount];\n\n  return JUPITER_PROGRAM.instruction.lifinityTokenSwap(\n    inAmount ? new BN(inAmount) : inAmount,\n    new BN(minimumOutAmount),\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: {\n        swapProgram: swapState.programId,\n        authority: swapState.authority,\n        amm: swapState.amm,\n        userTransferAuthority: userTransferAuthority,\n        sourceInfo: userSourceTokenAccount,\n        destinationInfo: userDestinationTokenAccount,\n        swapSource,\n        swapDestination,\n        poolMint: swapState.poolMint,\n        feeAccount: swapState.feeAccount,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        pythAccount: swapState.pythAccount,\n        pythPcAccount: swapState.pythPcAccount,\n        configAccount: swapState.configAccount,\n      },\n      remainingAccounts: prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount),\n    },\n  );\n}\n\ntype CykuraSwapInstructionArgs = {\n  poolAddress: PublicKey;\n  inputVault: PublicKey;\n  outputVault: PublicKey;\n  nextObservationState: PublicKey;\n  lastObservationState: PublicKey;\n  swapAccountMetas: AccountMeta[];\n};\n\nexport function createCykuraSwapInstruction({\n  additionalArgs,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { additionalArgs: CykuraSwapInstructionArgs } & CreateSwapInstructionParams): TransactionInstruction {\n  const remainingAccounts = prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount);\n\n  return JUPITER_PROGRAM.instruction.cykuraSwap(\n    inAmount ? new BN(inAmount) : inAmount,\n    new BN(minimumOutAmount),\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: {\n        swapProgram: CYKURA_PROGRAM_ID,\n        signer: userTransferAuthority,\n        factoryState: CYKURA_FACTORY_STATE_ADDRESS,\n        poolState: additionalArgs.poolAddress,\n        inputTokenAccount: userSourceTokenAccount,\n        outputTokenAccount: userDestinationTokenAccount,\n        inputVault: additionalArgs.inputVault,\n        outputVault: additionalArgs.outputVault,\n        lastObservationState: additionalArgs.lastObservationState,\n        coreProgram: CYKURA_PROGRAM_ID, // Duplicated as in Cykura accounts\n        tokenProgram: TOKEN_PROGRAM_ID,\n      },\n      remainingAccounts: remainingAccounts.concat([\n        ...additionalArgs.swapAccountMetas,\n        { pubkey: additionalArgs.nextObservationState, isSigner: false, isWritable: true },\n      ]),\n    },\n  );\n}\n\ntype WhirlpoolSwapInstructionArgs = {\n  aToB: boolean;\n  whirlpool: PublicKey;\n  tokenVaultA: PublicKey;\n  tokenVaultB: PublicKey;\n  tickArray0: PublicKey;\n  tickArray1: PublicKey;\n  tickArray2: PublicKey;\n  oracle: PublicKey;\n};\n\nexport function createWhirlpoolSwapInstruction({\n  additionalArgs,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { additionalArgs: WhirlpoolSwapInstructionArgs } & CreateSwapInstructionParams): TransactionInstruction {\n  const [tokenOwnerAccountA, tokenOwnerAccountB] = additionalArgs.aToB\n    ? [userSourceTokenAccount, userDestinationTokenAccount]\n    : [userDestinationTokenAccount, userSourceTokenAccount];\n\n  return JUPITER_PROGRAM.instruction.whirlpoolSwap(\n    inAmount ? new BN(inAmount) : inAmount,\n    new BN(minimumOutAmount),\n    additionalArgs.aToB,\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: {\n        swapProgram: WHIRLPOOL_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        tokenAuthority: userTransferAuthority,\n        whirlpool: additionalArgs.whirlpool,\n        tokenOwnerAccountA,\n        tokenVaultA: additionalArgs.tokenVaultA,\n        tokenOwnerAccountB,\n        tokenVaultB: additionalArgs.tokenVaultB,\n        tickArray0: additionalArgs.tickArray0,\n        tickArray1: additionalArgs.tickArray1,\n        tickArray2: additionalArgs.tickArray2,\n        oracle: additionalArgs.oracle,\n      },\n      remainingAccounts: prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount),\n    },\n  );\n}\n\nfunction prepareRemainingAccounts(\n  inAmount: number | null,\n  tokenLedger: PublicKey,\n  feeAccount: PublicKey | undefined,\n): AccountMeta[] {\n  const remainingAccounts = [];\n\n  if (inAmount === null) {\n    remainingAccounts.push({\n      pubkey: tokenLedger,\n      isSigner: false,\n      isWritable: true,\n    });\n  }\n  if (feeAccount) {\n    remainingAccounts.push({\n      pubkey: feeAccount,\n      isSigner: false,\n      isWritable: true,\n    });\n  }\n\n  return remainingAccounts;\n}\n","import { PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport JSBI from 'jsbi';\nimport { AccountInfoMap, Amm, QuoteParams, SwapParams } from '../amm';\n// Modified from saber's registry to contain the underlying mint decimal to avoid pointless queries\nimport addDecimalsJson from './add-decimals-complete-state.mainnet-beta.json';\nimport {\n  createSaberAddDecimalsDepositInstruction,\n  createSaberAddDecimalsWithdrawInstruction,\n} from '../jupiterInstruction';\n\nexport interface AddDecimals {\n  wrapper: PublicKey;\n  underlying: PublicKey;\n  underlyingDecimals: number;\n  wrapperUnderlyingTokens: PublicKey;\n  mint: PublicKey;\n  decimals: number;\n}\n\nexport function getSaberWrappedDecimalsAmms() {\n  return addDecimalsJson.map((addDecimalJson) => {\n    const addDecimals = {\n      wrapper: new PublicKey(addDecimalJson.wrapper),\n      underlying: new PublicKey(addDecimalJson.underlying),\n      underlyingDecimals: addDecimalJson.underlyingDecimals,\n      wrapperUnderlyingTokens: new PublicKey(addDecimalJson.wrapperUnderlyingTokens),\n      mint: new PublicKey(addDecimalJson.mint),\n      decimals: addDecimalJson.decimals,\n    };\n\n    return new SaberAddDecimalsAmm(new WrappedToken(addDecimals));\n  });\n}\n\nexport class WrappedToken {\n  constructor(public addDecimals: AddDecimals) {}\n\n  private get multiplier() {\n    return 10 ** (this.addDecimals.decimals - this.addDecimals.underlyingDecimals);\n  }\n\n  getOutputAmount(inputAmount: number, inputMint: PublicKey): JSBI {\n    if (this.addDecimals.mint.equals(inputMint)) {\n      // withdraw, so divide\n      return this.calculateWithdrawOutputAmount(inputAmount);\n    } else if (this.addDecimals.underlying.equals(inputMint)) {\n      // deposit, so multiply\n      return this.calculateDepositOutputAmount(inputAmount);\n    }\n    throw new Error(`unknown input token: ${inputMint.toString()}`);\n  }\n\n  private calculateDepositOutputAmount(inputAmount: number) {\n    return JSBI.multiply(JSBI.BigInt(inputAmount), JSBI.BigInt(this.multiplier));\n  }\n\n  private calculateWithdrawOutputAmount(inputAmount: number) {\n    return JSBI.divide(JSBI.BigInt(inputAmount), JSBI.BigInt(this.multiplier));\n  }\n}\n\n// This isn't technically an Amm but this the smoothest solution to allow its usage without a major refactor of the abstractions for now\nexport class SaberAddDecimalsAmm implements Amm {\n  id: string;\n  label = 'Saber (Decimals)' as const;\n  shouldPrefetch = false;\n\n  constructor(public wrappedToken: WrappedToken) {\n    this.id = this.wrappedToken.addDecimals.wrapper.toBase58();\n  }\n\n  getAccountsForUpdate() {\n    return new Array<PublicKey>();\n  }\n\n  update(_accountInfoMap: AccountInfoMap) {}\n\n  getQuote({ sourceMint, amount }: QuoteParams) {\n    const outAmount = JSBI.toNumber(this.wrappedToken.getOutputAmount(amount, sourceMint));\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount,\n      feeAmount: 0,\n      feeMint: sourceMint.toBase58(),\n      feePct: 0,\n      priceImpactPct: 0,\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams) {\n    if (this.wrappedToken.addDecimals.underlying.equals(swapParams.sourceMint)) {\n      return [\n        createSaberAddDecimalsDepositInstruction({\n          addDecimals: this.wrappedToken.addDecimals,\n          ...swapParams,\n        }),\n      ];\n    } else {\n      return [\n        createSaberAddDecimalsWithdrawInstruction({\n          addDecimals: this.wrappedToken.addDecimals,\n          ...swapParams,\n        }),\n      ];\n    }\n  }\n\n  get reserveTokenMints() {\n    return [this.wrappedToken.addDecimals.underlying, this.wrappedToken.addDecimals.mint];\n  }\n}\n","export function getTwoPermutations<T>(array: T[]) {\n  return array.reduce((acc, item) => {\n    array.forEach((otherItem) => {\n      if (item !== otherItem) {\n        acc.push([item, otherItem]);\n      }\n    });\n    return acc;\n  }, new Array<T[]>());\n}\n","export function chunks<T>(array: T[], size: number): T[][] {\n  return Array.apply<number, T[], T[][]>(0, new Array(Math.ceil(array.length / size))).map((_, index) =>\n    array.slice(index * size, (index + 1) * size),\n  );\n}\n","import { AccountInfo, Connection, PublicKey } from '@solana/web3.js';\nimport { chunks } from './chunks';\n\ninterface Result {\n  jsonrpc: string;\n  result: {\n    context: { slot: number };\n    value: Array<AccountInfo<string[]> | null>;\n  };\n}\n\nexport async function chunkedGetMultipleAccountInfos(\n  connection: Connection,\n  pks: string[],\n  batchChunkSize: number = 1000,\n  maxAccountsChunkSize: number = 100,\n): Promise<Array<AccountInfo<Buffer> | null>> {\n  return (\n    await Promise.all(\n      chunks(pks, batchChunkSize).map(async (batchPubkeys) => {\n        const batch = chunks(batchPubkeys, maxAccountsChunkSize).map((pubkeys) => ({\n          methodName: 'getMultipleAccounts',\n          args: connection._buildArgs([pubkeys], connection.commitment, 'base64'),\n        }));\n\n        return (\n          // getMultipleAccounts is quite slow, so we use fetch directly\n          connection\n            // @ts-ignore\n            ._rpcBatchRequest(batch)\n            .then((batchResults: Result[]) => {\n              const accounts = batchResults.reduce((acc, res) => {\n                acc.push(...res.result.value);\n                return acc;\n              }, [] as Result['result']['value']);\n\n              accounts.forEach((item) => {\n                if (item) {\n                  const value = item as unknown as AccountInfo<Buffer>;\n                  value.data = Buffer.from(item.data[0], item.data[1] as 'base64');\n                  value.owner = new PublicKey(value.owner);\n                }\n              });\n\n              return accounts;\n            })\n            .catch((e: any) => {\n              console.error('Failed to fetch account infos', e);\n              return batchPubkeys.map(() => null);\n            })\n        );\n      }),\n    )\n  ).flat();\n}\n","import { AccountInfo, Connection, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { PlatformFee, QuoteMintToReferrer, TokenMintAddress } from '..';\nimport { AccountInfo as TokenAccountInfo } from '@solana/spl-token';\nimport JSBI from 'jsbi';\nimport { chunkedGetMultipleAccountInfos } from '../utils/chunkedGetMultipleAccountInfos';\n\nexport interface QuoteParams {\n  sourceMint: PublicKey;\n  destinationMint: PublicKey;\n  amount: number;\n}\n\nexport interface Quote {\n  notEnoughLiquidity: boolean;\n  minInAmount?: number;\n  minOutAmount?: number;\n  inAmount: number;\n  outAmount: number;\n  feeAmount: number;\n  feeMint: TokenMintAddress;\n  feePct: number;\n  priceImpactPct: number;\n}\n\nexport interface SwapParams {\n  sourceMint: PublicKey;\n  destinationMint: PublicKey;\n  userSourceTokenAccount: PublicKey;\n  userDestinationTokenAccount: PublicKey;\n  userTransferAuthority: PublicKey;\n  inAmount: number | null;\n  minimumOutAmount: number;\n  tokenLedger: PublicKey;\n  openOrdersAddress?: PublicKey;\n  platformFee?: PlatformFee;\n  quoteMintToReferrer?: QuoteMintToReferrer;\n}\n\nexport type AccountInfoMap = Map<string, AccountInfo<Buffer> | null>;\n\nexport interface Amm {\n  /* Label for UI usage */\n  label: string;\n  /* Unique id to recognize the AMM */\n  id: string;\n  /* Reserve token mints for the purpose of routing */\n  reserveTokenMints: PublicKey[];\n  /* State if we need to prefetch the accounts 1 time */\n  shouldPrefetch: Boolean;\n\n  getAccountsForUpdate(): PublicKey[];\n  update(accountInfoMap: AccountInfoMap): void;\n  getQuote(quoteParams: QuoteParams): Quote;\n  createSwapInstructions(swapParams: SwapParams): TransactionInstruction[];\n}\n\nexport const mapAddressToAccountInfos = (accountInfoMap: AccountInfoMap, addresses: PublicKey[]) => {\n  const accountInfos = addresses.map((address) => {\n    const accountInfo = accountInfoMap.get(address.toString());\n    if (!accountInfo) {\n      throw new Error(`Account info ${address.toBase58()} missing`);\n    }\n    return accountInfo;\n  });\n\n  return accountInfos;\n};\n\nexport const tokenAccountsToJSBIs = (tokenAccounts: TokenAccountInfo[]): JSBI[] => {\n  return tokenAccounts.map((tokenAccount) => {\n    return JSBI.BigInt(tokenAccount.amount);\n  });\n};\n\nexport const prefetchAmms = async (amms: Amm[], connection: Connection) => {\n  const accounts = amms.map((amm) => amm.getAccountsForUpdate().map((item) => item.toBase58())).flat();\n  const accountInfosMap = new Map<string, AccountInfo<Buffer>>();\n  const accountInfos = await chunkedGetMultipleAccountInfos(connection, accounts);\n\n  accountInfos.forEach((item, index) => {\n    const publicKey = accounts[index];\n    if (item) {\n      accountInfosMap.set(publicKey, item);\n    }\n  });\n\n  for (let amm of amms) {\n    amm.update(accountInfosMap);\n  }\n};\n","// Only a few hardcoded pools for now, until we query the whole lot through api\nimport { struct, nu64 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/spl-token';\nimport { PublicKey } from '@solana/web3.js';\nimport { publicKey, uint128, uint64 } from '../../utils/layout';\n\ninterface AmmInfoLayoutV4 {\n  status: number;\n  nonce: number;\n  orderNum: number;\n  depth: number;\n  coinDecimals: number;\n  pcDecimals: number;\n  state: number;\n  resetFlag: number;\n  minSize: number;\n  volMaxCutRatio: number;\n  amountWaveRatio: number;\n  coinLotSize: number;\n  pcLotSize: number;\n  minPriceMultiplier: number;\n  maxPriceMultiplier: number;\n  systemDecimalsValue: number;\n  minSeparateNumerator: number;\n  minSeparateDenominator: number;\n  tradeFeeNumerator: number;\n  tradeFeeDenominator: number;\n  pnlNumerator: number;\n  pnlDenominator: number;\n  swapFeeNumerator: u64;\n  swapFeeDenominator: u64;\n  needTakePnlCoin: number;\n  needTakePnlPc: number;\n  totalPnlPc: number;\n  totalPnlCoin: number;\n  poolTotalDepositPc: u64;\n  poolTotalDepositCoin: u64;\n  swapCoinInAmount: u64;\n  swapPcOutAmount: u64;\n  swapCoin2PcFee: number;\n  swapPcInAmount: u64;\n  swapCoinOutAmount: u64;\n  swapPc2CoinFee: number;\n  poolCoinTokenAccount: PublicKey;\n  poolPcTokenAccount: PublicKey;\n  coinMintAddress: PublicKey;\n  pcMintAddress: PublicKey;\n  lpMintAddress: PublicKey;\n  ammOpenOrders: PublicKey;\n  serumMarket: PublicKey;\n  serumProgramId: PublicKey;\n  ammTargetOrders: PublicKey;\n  poolWithdrawQueue: PublicKey;\n  poolTempLpTokenAccount: PublicKey;\n  ammOwner: PublicKey;\n  pnlOwner: PublicKey;\n}\n\nexport const AMM_INFO_LAYOUT_V4 = struct<AmmInfoLayoutV4>([\n  nu64('status'),\n  nu64('nonce'),\n  nu64('orderNum'),\n  nu64('depth'),\n  nu64('coinDecimals'),\n  nu64('pcDecimals'),\n  nu64('state'),\n  nu64('resetFlag'),\n  nu64('minSize'),\n  nu64('volMaxCutRatio'),\n  nu64('amountWaveRatio'),\n  nu64('coinLotSize'),\n  nu64('pcLotSize'),\n  nu64('minPriceMultiplier'),\n  nu64('maxPriceMultiplier'),\n  nu64('systemDecimalsValue'),\n  // Fees\n  nu64('minSeparateNumerator'),\n  nu64('minSeparateDenominator'),\n  nu64('tradeFeeNumerator'),\n  nu64('tradeFeeDenominator'),\n  nu64('pnlNumerator'),\n  nu64('pnlDenominator'),\n  nu64('swapFeeNumerator'),\n  nu64('swapFeeDenominator'),\n  // OutPutData\n  nu64('needTakePnlCoin'),\n  nu64('needTakePnlPc'),\n  nu64('totalPnlPc'),\n  nu64('totalPnlCoin'),\n  uint128('poolTotalDepositPc'),\n  uint128('poolTotalDepositCoin'),\n  uint128('swapCoinInAmount'),\n  uint128('swapPcOutAmount'),\n  nu64('swapCoin2PcFee'),\n  uint128('swapPcInAmount'),\n  uint128('swapCoinOutAmount'),\n  nu64('swapPc2CoinFee'),\n\n  publicKey('poolCoinTokenAccount'),\n  publicKey('poolPcTokenAccount'),\n  publicKey('coinMintAddress'),\n  publicKey('pcMintAddress'),\n  publicKey('lpMintAddress'),\n  publicKey('ammOpenOrders'),\n  publicKey('serumMarket'),\n  publicKey('serumProgramId'),\n  publicKey('ammTargetOrders'),\n  publicKey('poolWithdrawQueue'),\n  publicKey('poolTempLpTokenAccount'),\n  publicKey('ammOwner'),\n  publicKey('pnlOwner'),\n]);\n","// https://github.com/raydium-io/raydium-ui/blob/4048286f79fc4b71c3ffbfd9095470ab0c7d3862/src/utils/liquidity.ts#L30-L82\n\nimport { Fraction, TokenSwapConstantProduct, ZERO_FRACTION } from '@jup-ag/math';\nimport { createProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { Market, OpenOrders } from '@project-serum/serum';\nimport { u64 } from '@solana/spl-token';\nimport { AccountInfo, PublicKey } from '@solana/web3.js';\nimport Decimal from 'decimal.js';\nimport JSBI from 'jsbi';\nimport { AccountInfoMap, Amm, mapAddressToAccountInfos, Quote, QuoteParams, SwapParams } from '../amm';\nimport { createRaydiumSwapInstruction } from '../jupiterInstruction';\nimport { AMM_INFO_LAYOUT_V4 } from './pools';\n\n// Explained here\n// https://discordapp.com/channels/813741812598439958/813750197423308820/900288485028683776\n// total_pc = amminfo.pc_vault.balance + amminfo.openorder.total_quote - amminfo.need_taken_pnl_pc\n// total_coin = amminfo.coin_vault.balance + amminfo.openorder.total_base - amminfo.need_taken_pnl_coin\n\ntype SerumMarketKeys = {\n  serumBids: PublicKey;\n  serumAsks: PublicKey;\n  serumEventQueue: PublicKey;\n  serumCoinVaultAccount: PublicKey;\n  serumPcVaultAccount: PublicKey;\n  serumVaultSigner: PublicKey;\n};\n\ntype SerumMarketKeysString = Record<keyof SerumMarketKeys, string>;\nexport class RaydiumAmm implements Amm {\n  id: string;\n  label = 'Raydium' as const;\n  shouldPrefetch = false;\n\n  coinMint: PublicKey;\n  pcMint: PublicKey;\n\n  status: number;\n  serumProgramId: PublicKey;\n  serumMarket: PublicKey;\n  ammOpenOrders: PublicKey;\n  ammTargetOrders: PublicKey;\n  poolCoinTokenAccount: PublicKey;\n  poolPcTokenAccount: PublicKey;\n\n  serumMarketKeys: SerumMarketKeys;\n\n  coinReserve: u64 | undefined;\n  pcReserve: u64 | undefined;\n\n  private feePct: Decimal;\n  private calculator: TokenSwapConstantProduct;\n\n  constructor(public ammId: PublicKey, ammAccountInfo: AccountInfo<Buffer>, params: SerumMarketKeysString) {\n    this.id = ammId.toBase58();\n    const decoded = AMM_INFO_LAYOUT_V4.decode(ammAccountInfo.data);\n\n    this.status = decoded.status;\n    this.coinMint = new PublicKey(decoded.coinMintAddress);\n    this.pcMint = new PublicKey(decoded.pcMintAddress);\n\n    this.poolCoinTokenAccount = new PublicKey(decoded.poolCoinTokenAccount);\n    this.poolPcTokenAccount = new PublicKey(decoded.poolPcTokenAccount);\n\n    this.serumProgramId = new PublicKey(decoded.serumProgramId);\n    this.serumMarket = new PublicKey(decoded.serumMarket);\n    this.ammOpenOrders = new PublicKey(decoded.ammOpenOrders);\n    this.ammTargetOrders = new PublicKey(decoded.ammTargetOrders);\n\n    this.serumMarketKeys = (Object.keys(params) as Array<keyof SerumMarketKeysString>).reduce((acc, item) => {\n      const pk = params[item];\n      if (!pk) throw new Error(`Could not find ${item} in params`);\n      acc[item] = new PublicKey(params[item]);\n      return acc;\n    }, {} as SerumMarketKeys);\n\n    const swapFeeNumerator = decoded.swapFeeNumerator;\n    const swapFeeDenominator = decoded.swapFeeDenominator;\n\n    this.feePct = new Decimal(swapFeeNumerator.toString()).div(swapFeeDenominator.toString());\n\n    this.calculator = new TokenSwapConstantProduct(\n      new Fraction(JSBI.BigInt(swapFeeNumerator), JSBI.BigInt(swapFeeDenominator)),\n      ZERO_FRACTION,\n    );\n  }\n\n  static decodeSerumMarketKeysString(\n    serumProgramId: PublicKey,\n    serumMarket: PublicKey,\n    serumMarketInfo: AccountInfo<Buffer>,\n  ): SerumMarketKeysString {\n    const decodedMarket = Market.getLayout(serumProgramId).decode(serumMarketInfo.data);\n    const serumVaultSigner = createProgramAddressSync(\n      [serumMarket.toBuffer(), decodedMarket.vaultSignerNonce.toArrayLike(Buffer, 'le', 8)],\n      serumProgramId,\n    );\n\n    return {\n      serumBids: decodedMarket.bids.toBase58(),\n      serumAsks: decodedMarket.asks.toBase58(),\n      serumEventQueue: decodedMarket.eventQueue.toBase58(),\n      serumCoinVaultAccount: decodedMarket.baseVault.toBase58(),\n      serumPcVaultAccount: decodedMarket.quoteVault.toBase58(),\n      serumVaultSigner: serumVaultSigner.toBase58(),\n    };\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [this.ammId, this.poolCoinTokenAccount, this.poolPcTokenAccount, this.ammOpenOrders];\n  }\n\n  update(accountInfoMap: AccountInfoMap) {\n    const [ammAccountInfo, poolCoinTokenAccountInfo, poolPcTokenAccountInfo, ammOpenOrdersAccountInfo] =\n      mapAddressToAccountInfos(accountInfoMap, this.getAccountsForUpdate());\n\n    const [coinAmount, pcAmount] = [\n      RaydiumAmm.tokenAmountAccessor(poolCoinTokenAccountInfo),\n      RaydiumAmm.tokenAmountAccessor(poolPcTokenAccountInfo),\n    ];\n\n    const openOrders = OpenOrders.fromAccountInfo(\n      this.ammOpenOrders,\n      ammOpenOrdersAccountInfo,\n      ammOpenOrdersAccountInfo.owner,\n    );\n\n    const decoded = AMM_INFO_LAYOUT_V4.decode(ammAccountInfo.data);\n\n    this.coinReserve = coinAmount.add(openOrders.baseTokenTotal).sub(new u64(String(decoded.needTakePnlCoin)));\n\n    this.pcReserve = pcAmount.add(openOrders.quoteTokenTotal).sub(new u64(String(decoded.needTakePnlPc)));\n  }\n\n  private static tokenAmountAccessor(tokenAccountInfo: AccountInfo<Buffer>): u64 {\n    return u64.fromBuffer(tokenAccountInfo.data.slice(64, 64 + 8));\n  }\n\n  getQuote({ sourceMint, amount }: QuoteParams): Quote {\n    const { coinReserve, pcReserve } = this;\n    if (!coinReserve || !pcReserve) {\n      throw new Error('Pool token accounts balances not refreshed or empty');\n    }\n\n    const outputIndex = this.coinMint.equals(sourceMint) ? 1 : 0;\n    const result = this.calculator.exchange(\n      [JSBI.BigInt(coinReserve), JSBI.BigInt(pcReserve)],\n      JSBI.BigInt(amount),\n      outputIndex,\n    );\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: JSBI.toNumber(result.expectedOutputAmount),\n      feeAmount: JSBI.toNumber(result.fees),\n      feeMint: sourceMint.toBase58(),\n      feePct: this.feePct.toNumber(),\n      priceImpactPct: result.priceImpact.toNumber(),\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams) {\n    return [\n      createRaydiumSwapInstruction({\n        raydiumAmm: this,\n        ...swapParams,\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.coinMint, this.pcMint];\n  }\n}\n","import { ZERO } from '@jup-ag/math';\nimport { Market, Orderbook } from '@project-serum/serum';\nimport { PublicKey } from '@solana/web3.js';\nimport BN from 'bn.js';\nimport Decimal from 'decimal.js';\nimport JSBI from 'jsbi';\n\nconst TAKER_FEE_PCT = 0.0004;\nconst STABLE_TAKER_FEE_PCT = 0.0001;\n\n// Stable markets are hardcoded in the program\nconst STABLE_MARKET_ADDRESSES = [\n  '77quYg4MGneUdjgXCunt9GgM1usmrxKY31twEy3WHwcS', // USDT/USDC\n  '5cLrMai1DsLRYc1Nio9qMTicsWtvzjzZfJPXyAoF4t1Z', // mSOL/SOL\n  'EERNEEnBqdGzBS8dd46wwNY5F2kwnaCQ3vsq2fNKGogZ', // UST/USDC\n  '8sFf9TW3KzxLiBXcDcjAxqabEsRroo4EiRr3UG1xbJ9m', // UST/USDT\n  '2iDSTGhjJEiRxNaLF27CY6daMYPs5hgYrP2REHd5YD62', // stSOL/SOL\n];\n\ninterface IMarketMeta {\n  /** buy or sell side */\n  side: 'buy' | 'sell';\n  /** indicate that your order is too huge for the market */\n  notEnoughLiquidity: boolean;\n  /** minimum in amount and the corresponding out amount */\n  minimum: {\n    in: number;\n    out: number;\n  };\n  /** amount in taken for the trade */\n  inAmount: number;\n  /** the amount out for the trade */\n  outAmount: number;\n  /** the total fee amount */\n  feeAmount: number;\n  /** price impact percentage */\n  priceImpactPct: number;\n  /** fee percentage */\n  feePct: number;\n}\n\n// Provides swap like out amount, with slippage and corresponding minimum amount out\nexport function getOutAmountMeta({\n  market,\n  asks,\n  bids,\n  fromAmount,\n  fromMint,\n  toMint,\n}: {\n  market: Market;\n  asks: Orderbook;\n  bids: Orderbook;\n  fromMint: PublicKey;\n  toMint: PublicKey;\n  fromAmount: number;\n}) {\n  const takerFeePct = STABLE_MARKET_ADDRESSES.includes(market.address.toBase58())\n    ? STABLE_TAKER_FEE_PCT\n    : TAKER_FEE_PCT;\n\n  if (fromMint.equals(market.quoteMintAddress) && toMint.equals(market.baseMintAddress)) {\n    // buy\n    return forecastBuy(market, asks, fromAmount, takerFeePct);\n  } else {\n    return forecastSell(market, bids, fromAmount, takerFeePct);\n  }\n}\n\nexport function forecastBuy(market: Market, orderbook: Orderbook, pcIn: number, takerFeePct: number): IMarketMeta {\n  let coinOut = JSBI.BigInt(0);\n  let bestPrice: JSBI = JSBI.BigInt(0);\n  let worstPrice: JSBI = JSBI.BigInt(0);\n  // total base price\n  let totalCost = JSBI.BigInt(0);\n  let totalCoins = JSBI.BigInt(0);\n\n  // might be decimal, e.g: 0.001\n  const quoteSizeLots = market.quoteSizeLotsToNumber(new BN(1));\n\n  // Serum buy order take fee in quote tokens\n  let availablePc = quoteSizeLots ? JSBI.BigInt(Math.floor(pcIn / (1 + takerFeePct) / quoteSizeLots)) : ZERO;\n\n  const baseSizeLots = JSBI.BigInt(market.baseSizeLotsToNumber(new BN(1)).toString());\n\n  for (let [lotPrice, lotQuantity] of getL2(orderbook)) {\n    if (JSBI.equal(bestPrice, ZERO)) {\n      bestPrice = lotPrice;\n    }\n\n    worstPrice = lotPrice;\n\n    const orderCoinAmount = JSBI.multiply(lotQuantity, baseSizeLots);\n    const orderPcAmount = JSBI.multiply(lotQuantity, lotPrice);\n\n    totalCoins = JSBI.add(totalCoins, orderCoinAmount);\n\n    if (JSBI.greaterThanOrEqual(orderPcAmount, availablePc)) {\n      const numberLotsPurchasable = JSBI.divide(availablePc, lotPrice);\n\n      totalCost = JSBI.add(totalCost, JSBI.multiply(lotPrice, numberLotsPurchasable));\n      coinOut = JSBI.add(coinOut, JSBI.multiply(baseSizeLots, numberLotsPurchasable));\n      availablePc = ZERO;\n      break;\n    } else {\n      totalCost = JSBI.add(totalCost, JSBI.multiply(lotPrice, lotQuantity));\n      coinOut = JSBI.add(coinOut, orderCoinAmount);\n      availablePc = JSBI.subtract(availablePc, orderPcAmount);\n    }\n  }\n\n  const bestPriceDecimal = new Decimal(bestPrice.toString());\n  const worstPriceDecimal = new Decimal(worstPrice.toString());\n\n  const priceImpactPct = worstPriceDecimal.sub(bestPriceDecimal).div(bestPriceDecimal).toNumber();\n\n  const bestPriceSizeLots = priceLotsToDecimal(market, new BN(bestPrice.toString()));\n  const totalCostSizeLots = priceLotsToDecimal(market, new BN(totalCost.toString()));\n\n  return {\n    side: 'buy',\n    notEnoughLiquidity: JSBI.lessThanOrEqual(totalCoins, coinOut),\n    minimum: {\n      in: new Decimal(bestPriceSizeLots.toString())\n        .mul(baseSizeLots.toString())\n        .mul(1 + takerFeePct)\n        .ceil()\n        .toNumber(),\n      out: JSBI.toNumber(baseSizeLots),\n    },\n    inAmount: new Decimal(totalCostSizeLots.toString())\n      .mul(baseSizeLots.toString())\n      .mul(1 + takerFeePct)\n      .ceil()\n      .toNumber(),\n    outAmount: JSBI.toNumber(coinOut),\n    feeAmount: new Decimal(totalCost.toString()).mul(takerFeePct).toNumber(),\n    priceImpactPct,\n    feePct: takerFeePct,\n  };\n}\n\nexport function forecastSell(market: Market, orderbook: Orderbook, coinIn: number, takerFeePct: number): IMarketMeta {\n  let pcOut = JSBI.BigInt(0);\n  let bestPrice = JSBI.BigInt(0);\n  let worstPrice = JSBI.BigInt(0);\n  let totalCoin = JSBI.BigInt(0);\n  let availableCoin = JSBI.BigInt(coinIn);\n  let inAmount = JSBI.BigInt(0);\n\n  const baseSizeLots = JSBI.BigInt(market.baseSizeLotsToNumber(new BN(1)));\n  const quoteSizeLots = JSBI.BigInt(market.quoteSizeLotsToNumber(new BN(1)));\n\n  for (const [lotPrice, lotQuantity] of getL2(orderbook)) {\n    if (JSBI.equal(bestPrice, ZERO)) {\n      bestPrice = lotPrice;\n    }\n\n    worstPrice = lotPrice;\n\n    const orderCoinAmount = JSBI.multiply(baseSizeLots, lotQuantity);\n    const orderPcAmount = JSBI.multiply(lotQuantity, JSBI.multiply(lotPrice, quoteSizeLots));\n    totalCoin = JSBI.add(totalCoin, orderCoinAmount);\n\n    if (JSBI.greaterThanOrEqual(orderCoinAmount, availableCoin)) {\n      const numberLotsCanSell = JSBI.divide(availableCoin, baseSizeLots);\n      const totalCoinAmountToSell = JSBI.multiply(numberLotsCanSell, lotPrice);\n      pcOut = JSBI.add(pcOut, JSBI.multiply(totalCoinAmountToSell, quoteSizeLots));\n      availableCoin = JSBI.subtract(availableCoin, totalCoinAmountToSell);\n      inAmount = JSBI.add(inAmount, JSBI.multiply(numberLotsCanSell, baseSizeLots));\n      break;\n    } else {\n      pcOut = JSBI.add(pcOut, orderPcAmount);\n      availableCoin = JSBI.subtract(availableCoin, orderCoinAmount);\n      inAmount = JSBI.add(inAmount, orderCoinAmount);\n    }\n  }\n\n  let pcOutInteger = new Decimal(pcOut.toString())\n    .mul(1 - takerFeePct)\n    .floor()\n    .toNumber();\n\n  const bestPriceDecimal = priceLotsToDecimal(market, new BN(bestPrice.toString()));\n  const worstPriceDecimal = priceLotsToDecimal(market, new BN(worstPrice.toString()));\n\n  const priceImpactPct = bestPriceDecimal.minus(worstPriceDecimal).div(bestPriceDecimal).toNumber();\n\n  return {\n    side: 'sell',\n    notEnoughLiquidity: JSBI.greaterThan(JSBI.BigInt(coinIn), totalCoin),\n    minimum: {\n      in: JSBI.toNumber(baseSizeLots),\n      out: bestPriceDecimal\n        .mul(JSBI.toNumber(baseSizeLots))\n        .mul(1 - takerFeePct)\n        .floor()\n        .toNumber(),\n    },\n    inAmount: JSBI.toNumber(inAmount),\n    outAmount: pcOutInteger,\n    feeAmount: new Decimal(JSBI.toNumber(pcOut)).mul(takerFeePct).round().toNumber(),\n    priceImpactPct,\n    feePct: takerFeePct,\n  };\n}\n\nexport function* getL2(orderbook: Orderbook): Generator<[JSBI, JSBI]> {\n  const descending = orderbook.isBids;\n  for (const { key, quantity } of orderbook.slab.items(descending)) {\n    const price = JSBI.BigInt(key.ushrn(64).toString());\n    yield [price, JSBI.BigInt(quantity.toString())];\n  }\n}\n\nfunction divideBnToDecimal(numerator: BN, denominator: BN): Decimal {\n  const quotient = new Decimal(numerator.div(denominator).toString());\n  const rem = numerator.umod(denominator);\n  const gcd = rem.gcd(denominator);\n  return quotient.add(new Decimal(rem.div(gcd).toString()).div(new Decimal(denominator.div(gcd).toString())));\n}\n\nfunction priceLotsToDecimal(market: Market, price: BN) {\n  // @ts-expect-error _decoded\n  const baseLotSize = market._decoded.baseLotSize;\n  if (baseLotSize.isZero()) return new Decimal(0);\n\n  return divideBnToDecimal(\n    // @ts-expect-error _decoded _baseSplTokenMultiplier is private\n    price.mul(market._decoded.quoteLotSize).mul(market._baseSplTokenMultiplier),\n    // @ts-expect-error _quoteSplTokenMultiplier is private\n    baseLotSize.mul(market._quoteSplTokenMultiplier),\n  );\n}\n","import { Orderbook } from '@project-serum/serum';\nimport { PublicKey } from '@solana/web3.js';\nimport { AccountInfoMap, Amm, mapAddressToAccountInfos, Quote, QuoteParams, SwapParams } from '../amm';\nimport { createSerumSwapInstruction } from '../jupiterInstruction';\nimport { SerumMarket } from '../market';\nimport { getL2, getOutAmountMeta } from './market';\n\nexport class SerumAmm implements Amm {\n  id: string;\n  label = 'Serum' as const;\n  shouldPrefetch = false;\n\n  private _orderbooks: { asks: Orderbook; bids: Orderbook } | undefined;\n\n  constructor(public market: SerumMarket) {\n    this.id = market.address.toBase58();\n  }\n\n  get orderbooks() {\n    return this._orderbooks;\n  }\n\n  static getL2 = getL2;\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [this.market.asksAddress, this.market.bidsAddress];\n  }\n\n  update(accountInfoMap: AccountInfoMap): void {\n    const [asksAccountInfo, bidsAccountInfo] = mapAddressToAccountInfos(accountInfoMap, this.getAccountsForUpdate());\n\n    const asks = Orderbook.decode(this.market, asksAccountInfo.data);\n    const bids = Orderbook.decode(this.market, bidsAccountInfo.data);\n\n    this._orderbooks = {\n      asks,\n      bids,\n    };\n  }\n\n  getQuote({ sourceMint, destinationMint, amount }: QuoteParams): Quote {\n    if (!this.orderbooks) {\n      throw new Error('Failed to find orderbooks');\n    }\n\n    const outAmountMeta = getOutAmountMeta({\n      market: this.market,\n      asks: this.orderbooks.asks,\n      bids: this.orderbooks.bids,\n      fromMint: sourceMint,\n      toMint: destinationMint,\n      fromAmount: amount,\n    });\n\n    return {\n      notEnoughLiquidity: outAmountMeta.notEnoughLiquidity,\n      minInAmount: outAmountMeta.minimum.in,\n      minOutAmount: outAmountMeta.minimum.out,\n      inAmount: outAmountMeta.inAmount,\n      outAmount: outAmountMeta.outAmount,\n      feeAmount: outAmountMeta.feeAmount,\n      feeMint: this.market.quoteMintAddress.toBase58(),\n      feePct: outAmountMeta.feePct,\n      priceImpactPct: outAmountMeta.priceImpactPct,\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams) {\n    if (!swapParams.openOrdersAddress) {\n      throw new Error('Missing open orders');\n    }\n\n    return [\n      createSerumSwapInstruction({\n        market: this.market,\n        openOrdersAddress: swapParams.openOrdersAddress,\n        referrer: swapParams?.quoteMintToReferrer?.get(this.market.quoteMintAddress.toBase58()),\n        ...swapParams,\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.market.baseMintAddress, this.market.quoteMintAddress];\n  }\n}\n","import { PublicKey } from '@solana/web3.js';\nimport { getTwoPermutations } from '../../utils/getTwoPermutations';\nimport { AccountInfoMap, Amm, Quote, QuoteParams, SwapParams } from '../amm';\nimport { RaydiumAmm } from '../raydium/raydiumAmm';\nimport { createRiskCheckAndFeeInstruction } from '../jupiterInstruction';\nimport { SerumAmm } from '../serum/serumAmm';\nimport { SerumMarket } from '../market';\n\ninterface SplitSolution {\n  outAmount: number;\n  portion: number;\n  firstQuote: Quote | undefined;\n  secondQuote: Quote | undefined;\n}\n\nfunction isSplitSupported(firstAmm: Amm, secondAmm: Amm) {\n  if (\n    (firstAmm instanceof SerumAmm && secondAmm instanceof RaydiumAmm) ||\n    (firstAmm instanceof RaydiumAmm && secondAmm instanceof SerumAmm) ||\n    (firstAmm instanceof SerumAmm && secondAmm instanceof SerumAmm)\n  ) {\n    return false;\n  }\n  return true;\n}\n\n// Create an iteration to quote with a stepped split\nexport class SplitTradeAmm implements Amm {\n  market: SerumMarket | null;\n  shouldPrefetch = false;\n  private portion1: number = 0;\n  private portion2: number = 0;\n\n  constructor(public firstAmm: Amm, public secondAmm: Amm, public reserveTokenMints: PublicKey[]) {\n    this.market =\n      firstAmm instanceof SerumAmm ? firstAmm.market : secondAmm instanceof SerumAmm ? secondAmm.market : null;\n  }\n\n  static getAmmIdsFromSplitTradeAmmId(id: string): string[] {\n    const ammIds = id.split('-');\n\n    return ammIds.length > 1 ? ammIds : [];\n  }\n\n  static create(firstAmm: Amm, secondAmm: Amm) {\n    if (!isSplitSupported(firstAmm, secondAmm)) return;\n\n    const firstAmmTwoPermutations = getTwoPermutations(firstAmm.reserveTokenMints);\n    const secondAmmTwoPermutations = getTwoPermutations(secondAmm.reserveTokenMints);\n\n    for (const firstAmmTwoPermutation of firstAmmTwoPermutations) {\n      for (const secondAmmTwoPermutation of secondAmmTwoPermutations) {\n        if (firstAmmTwoPermutation.every((value, index) => value.equals(secondAmmTwoPermutation[index]))) {\n          return new SplitTradeAmm(firstAmm, secondAmm, firstAmmTwoPermutation);\n        }\n      }\n    }\n  }\n\n  setPortions(portion1: number, portion2: number) {\n    if (portion1 + portion2 !== 100) {\n      throw new Error('Split trade portions must sum to 100');\n    }\n\n    this.portion1 = portion1;\n    this.portion2 = portion2;\n  }\n\n  get id() {\n    return `${this.firstAmm.id}-${this.secondAmm.id}`;\n  }\n\n  get label() {\n    const labelWithPortions = [\n      { label: this.firstAmm.label, portion: this.portion1 },\n      { label: this.secondAmm.label, portion: this.portion2 },\n    ].sort((a, b) => b.portion - a.portion);\n\n    return labelWithPortions.map(({ label, portion }) => `${label} (${portion}%)`).join(' + ');\n  }\n\n  getAccountsForUpdate() {\n    return [];\n  }\n\n  update(_accountInfoMap: AccountInfoMap) {\n    // Underlying amms are updated\n  }\n\n  getQuote(quoteParams: QuoteParams): Quote {\n    const sourceMintString = quoteParams.sourceMint.toBase58();\n    const amount = quoteParams.amount;\n    // Portion in % directly to please the UI\n    let bestSolution: SplitSolution = {\n      outAmount: 0,\n      portion: 0,\n      firstQuote: undefined,\n      secondQuote: undefined,\n    };\n\n    // Increase portion until 100\n    for (let p = 100; (p -= 5); p > 0) {\n      const firstAmount = Math.floor((amount * p) / 100);\n      const secondAmount = amount - firstAmount;\n\n      const firstQuote = this.firstAmm.getQuote({\n        ...quoteParams,\n        amount: firstAmount,\n      });\n      const secondQuote = this.secondAmm.getQuote({\n        ...quoteParams,\n        amount: secondAmount,\n      });\n      const outAmount = firstQuote.outAmount + secondQuote.outAmount;\n\n      if (outAmount < bestSolution.outAmount) {\n        break;\n      }\n\n      bestSolution = {\n        outAmount,\n        portion: p,\n        firstQuote,\n        secondQuote,\n      };\n    }\n\n    if (!bestSolution.firstQuote || !bestSolution.secondQuote) {\n      throw new Error('Unreachable: There was no better solution than getting 0 outAmount');\n    }\n\n    const { outAmount, portion, firstQuote, secondQuote } = bestSolution;\n    const portion1 = portion;\n    const portion2 = 100 - portion1;\n\n    // For UI display\n    this.portion1 = portion1;\n    this.portion2 = portion2;\n\n    let firstAmmFee = {\n      amount: firstQuote.feeAmount,\n      mint: firstQuote.feeMint,\n    };\n    let secondAmmFee = {\n      amount: secondQuote.feeAmount,\n      mint: secondQuote.feeMint,\n    };\n\n    if (firstAmmFee.mint !== secondAmmFee.mint) {\n      // Then we convert destinationMint fee into a sourceMint, to please the current data structure\n      // This will lead to inexact fees but this doesn't affect the user minimum out amount\n      if (firstAmmFee.mint !== sourceMintString) {\n        firstAmmFee = {\n          amount: Math.floor((firstAmmFee.amount * amount * portion1) / 100 / bestSolution.outAmount),\n          mint: sourceMintString,\n        };\n      }\n      if (secondAmmFee.mint !== sourceMintString) {\n        secondAmmFee = {\n          amount: Math.floor((secondAmmFee.amount * amount * portion2) / 100 / bestSolution.outAmount),\n          mint: sourceMintString,\n        };\n      }\n    }\n\n    const feePct = (portion1 * firstQuote.feePct + portion2 * secondQuote.feePct) / 100;\n    const priceImpactPct = (portion1 * firstQuote.priceImpactPct + portion2 * secondQuote.priceImpactPct) / 100;\n\n    // Not sure about the relevance on minInAmount and minOutAmount in this case\n    const minInAmount =\n      firstQuote.minInAmount || secondQuote.minInAmount\n        ? (firstQuote.minInAmount ?? 0) + (secondQuote.minInAmount ?? 0)\n        : undefined;\n    const minOutAmount =\n      firstQuote.minOutAmount || secondQuote.minOutAmount\n        ? (firstQuote.minOutAmount ?? 0) + (secondQuote.minOutAmount ?? 0)\n        : undefined;\n    return {\n      notEnoughLiquidity: false,\n      inAmount: quoteParams.amount,\n      outAmount: outAmount,\n      minInAmount,\n      minOutAmount,\n      feeAmount: firstAmmFee.amount + secondAmmFee.amount,\n      feeMint: firstAmmFee.mint, // Guaranteed identical mint at this point\n      feePct,\n      priceImpactPct,\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams) {\n    const inAmount = swapParams.inAmount;\n    if (inAmount === null) {\n      throw new Error('Split trade cannot be used with a null inAmount');\n    }\n\n    // We rely on the fact that this.portion1 is set, what if it isn't?\n    const firstAmount = Math.floor((inAmount * this.portion1) / 100);\n    const secondAmount = inAmount - firstAmount;\n\n    return [\n      ...this.firstAmm.createSwapInstructions({\n        ...swapParams,\n        inAmount: firstAmount,\n        minimumOutAmount: 0,\n        platformFee: undefined,\n      }),\n      ...this.secondAmm.createSwapInstructions({\n        ...swapParams,\n        inAmount: secondAmount,\n        minimumOutAmount: 0,\n        platformFee: undefined,\n      }),\n      createRiskCheckAndFeeInstruction(\n        swapParams.userDestinationTokenAccount,\n        swapParams.userTransferAuthority,\n        swapParams.minimumOutAmount,\n        swapParams.tokenLedger,\n        swapParams.platformFee,\n      ),\n    ];\n  }\n}\n","import { Market as SerumMarket } from '@project-serum/serum';\nimport { PublicKey } from '@solana/web3.js';\nimport { StableSwap } from '@saberhq/stableswap-sdk';\nimport { SaberAddDecimalsAmm } from './saber/saberAddDecimalsAmm';\nimport { SplitTradeAmm } from './split-trade/splitTradeAmm';\nimport { RaydiumAmm } from './raydium/raydiumAmm';\nimport { SerumAmm } from './serum/serumAmm';\nimport { Amm } from './amm';\n\nexport interface Fee {\n  amount: number;\n  mint: string;\n  pct: number;\n}\n\nexport { SerumMarket, StableSwap };\n\nexport interface MarketInfo {\n  amm: Amm; //name: string, // pair for serum, pool name for mer pool\n  inputMint: PublicKey;\n  outputMint: PublicKey;\n  minInAmount?: number;\n  minOutAmount?: number;\n  inAmount: number;\n  outAmount: number;\n  notEnoughLiquidity: boolean;\n  priceImpactPct: number;\n  lpFee: Fee;\n  platformFee: Fee;\n}\n\n// This is to check if the two markets are supported by the aggregator\nexport const isValidRoute = (ammA: Amm, ammB: Amm) => {\n  // dont match the same amm together\n  if (ammA.id === ammB.id) {\n    return false;\n  }\n  // don't show decimal as input or output\n  else if (ammA instanceof SaberAddDecimalsAmm && ammB instanceof SaberAddDecimalsAmm) {\n    return false;\n  } else if (ammA instanceof SplitTradeAmm || ammB instanceof SplitTradeAmm) {\n    return false;\n  }\n\n  return true;\n};\n\nexport function isSerumAndRaydium(marketInfos: MarketInfo[]) {\n  if (marketInfos.length < 2) return false;\n\n  const [firstAmm, secondAmm] = marketInfos.map((mi) => mi.amm);\n\n  return (\n    (firstAmm instanceof RaydiumAmm && secondAmm instanceof SerumAmm) ||\n    (firstAmm instanceof SerumAmm && secondAmm instanceof RaydiumAmm)\n  );\n}\n","import { calculateAmpFactor, StableSwap } from '@saberhq/stableswap-sdk';\nimport { PublicKey } from '@solana/web3.js';\nimport { Fraction, ONE, Stable, TWO } from '@jup-ag/math';\nimport JSBI from 'jsbi';\nimport Decimal from 'decimal.js';\nimport {\n  AccountInfoMap,\n  Amm,\n  mapAddressToAccountInfos,\n  Quote,\n  QuoteParams,\n  tokenAccountsToJSBIs,\n  SwapParams,\n} from '../amm';\nimport { createSaberSwapInstruction } from '../jupiterInstruction';\nimport { deserializeAccount } from '@mercurial-finance/optimist';\nimport { AccountInfo } from '@solana/spl-token';\n\nexport class SaberAmm implements Amm {\n  id: string;\n  label = 'Saber' as const;\n  shouldPrefetch = false;\n  private tokenAccounts: AccountInfo[] = [];\n  private calculator: Stable;\n\n  constructor(private stableSwap: StableSwap) {\n    this.id = stableSwap.config.swapAccount.toBase58();\n\n    this.calculator = new Stable(\n      TWO,\n      calculateAmpFactor(this.stableSwap.state),\n      [ONE, ONE],\n      new Fraction(this.stableSwap.state.fees.trade.numerator, this.stableSwap.state.fees.trade.denominator),\n    );\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [this.stableSwap.state.tokenA.reserve, this.stableSwap.state.tokenB.reserve];\n  }\n\n  update(accountInfoMap: AccountInfoMap) {\n    let tokenAccountInfos = mapAddressToAccountInfos(accountInfoMap, this.getAccountsForUpdate());\n\n    this.tokenAccounts = tokenAccountInfos.map((info) => {\n      const tokenAccount = deserializeAccount(info.data);\n      if (!tokenAccount) {\n        throw new Error('Invalid token account data');\n      }\n      return tokenAccount;\n    });\n  }\n\n  getQuote({ sourceMint, destinationMint, amount }: QuoteParams): Quote {\n    if (this.tokenAccounts.length === 0) {\n      throw new Error('Unable to fetch accounts for specified tokens.');\n    }\n\n    const feePct = new Decimal(this.stableSwap.state.fees.trade.asFraction.toFixed(4));\n\n    const [inputIndex, outputIndex] = this.tokenAccounts[0].mint.equals(sourceMint) ? [0, 1] : [1, 0];\n\n    this.calculator.setAmp(calculateAmpFactor(this.stableSwap.state));\n    const result = this.calculator.exchange(\n      tokenAccountsToJSBIs(this.tokenAccounts),\n      JSBI.BigInt(amount),\n      inputIndex,\n      outputIndex,\n    );\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: JSBI.toNumber(result.expectedOutputAmount),\n      feeAmount: JSBI.toNumber(result.fees),\n      feeMint: destinationMint.toBase58(),\n      feePct: feePct.toNumber(),\n      priceImpactPct: result.priceImpact.toNumber(),\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams) {\n    return [\n      createSaberSwapInstruction({\n        stableSwap: this.stableSwap,\n        ...swapParams,\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.stableSwap.state.tokenA.mint, this.stableSwap.state.tokenB.mint];\n  }\n}\n","import { u64 } from '@solana/spl-token';\nimport Decimal from 'decimal.js';\n\nconst ZERO = new u64(0);\n\nexport class Percentage {\n  readonly numerator: u64;\n  readonly denominator: u64;\n\n  constructor(numerator: u64, denominator: u64) {\n    this.numerator = numerator;\n    this.denominator = denominator;\n  }\n\n  public static fromDecimal(number: Decimal): Percentage {\n    return Percentage.fromFraction(number.toDecimalPlaces(1).mul(10).toNumber(), 1000);\n  }\n\n  public static fromFraction(numerator: u64 | number, denominator: u64 | number): Percentage {\n    const num = typeof numerator === 'number' ? new u64(numerator.toString()) : numerator;\n    const denom = typeof denominator === 'number' ? new u64(denominator.toString()) : denominator;\n    return new Percentage(num, denom);\n  }\n\n  public toString = (): string => {\n    return `${this.numerator.toString()}/${this.denominator.toString()}`;\n  };\n\n  public toDecimal() {\n    if (this.denominator.eq(ZERO)) {\n      return new Decimal(0);\n    }\n    return new Decimal(this.numerator.toString()).div(new Decimal(this.denominator.toString()));\n  }\n\n  public add(p2: Percentage): Percentage {\n    const denomGcd = this.denominator.gcd(p2.denominator);\n    const denomLcm = this.denominator.div(denomGcd).mul(p2.denominator);\n\n    const p1DenomAdjustment = denomLcm.div(this.denominator);\n    const p2DenomAdjustment = denomLcm.div(p2.denominator);\n\n    const p1NumeratorAdjusted = this.numerator.mul(p1DenomAdjustment);\n    const p2NumeratorAdjusted = p2.numerator.mul(p2DenomAdjustment);\n\n    const newNumerator = p1NumeratorAdjusted.add(p2NumeratorAdjusted);\n\n    return new Percentage(new u64(newNumerator.toString()), new u64(denomLcm.toString()));\n  }\n}\n","import { struct, blob, u8, Structure } from '@solana/buffer-layout';\nimport { u64 } from '@solana/spl-token';\nimport { AccountInfo, PublicKey } from '@solana/web3.js';\nimport { ALDRIN_SWAP_V2_PROGRAM_ID } from '../../constants';\nimport { publicKey, rustEnum, uint64 } from '../../utils/layout';\nimport { Percentage } from './percentage';\n\ntype FeeStructure = {\n  traderFee: Percentage;\n  ownerFee: Percentage;\n};\n\ninterface FeeLayout {\n  tradeFeeNumerator: u64;\n  tradeFeeDenominator: u64;\n  ownerTradeFeeNumerator: u64;\n  ownerTradeFeeDenominator: u64;\n  ownerWithdrawFeeNumerator: u64;\n  ownerWithdrawFeeDenominator: u64;\n}\n\n// https://github.com/aldrin-exchange/aldrin-sdk/blob/78527e3adfc02e186956f420b5083fa0950e7263/src/pools/layout.ts\nconst FEES_LAYOUT = struct<FeeLayout>(\n  [\n    uint64('tradeFeeNumerator'),\n    uint64('tradeFeeDenominator'),\n    uint64('ownerTradeFeeNumerator'),\n    uint64('ownerTradeFeeDenominator'),\n    uint64('ownerWithdrawFeeNumerator'),\n    uint64('ownerWithdrawFeeDenominator'),\n  ],\n  'fees',\n);\n\nconst POOL_FIELDS_COMMON = [\n  blob(8, 'padding'),\n  publicKey('lpTokenFreezeVault'),\n  publicKey('poolMint'),\n  publicKey('baseTokenVault'),\n  publicKey('baseTokenMint'),\n  publicKey('quoteTokenVault'),\n  publicKey('quoteTokenMint'),\n  publicKey('poolSigner'),\n  u8('poolSignerNonce'),\n  publicKey('authority'),\n  publicKey('initializerAccount'),\n  publicKey('feeBaseAccount'),\n  publicKey('feeQuoteAccount'),\n  publicKey('feePoolTokenAccount'),\n  FEES_LAYOUT,\n];\n\ninterface PoolLayout {\n  padding: any;\n  lpTokenFreezeVault: PublicKey;\n  poolMint: PublicKey;\n  baseTokenVault: PublicKey;\n  baseTokenMint: PublicKey;\n  quoteTokenVault: PublicKey;\n  quoteTokenMint: PublicKey;\n  poolSigner: PublicKey;\n  poolSignerNonce: number;\n  authority: PublicKey;\n  initializerAccount: PublicKey;\n  feeBaseAccount: PublicKey;\n  feeQuoteAccount: PublicKey;\n  feePoolTokenAccount: PublicKey;\n  fees: FeeLayout;\n}\n\nexport const POOL_LAYOUT = struct<PoolLayout>(POOL_FIELDS_COMMON);\n\ninterface PoolV2Layout extends PoolLayout {\n  curveType: number;\n  curve: PublicKey;\n}\n\nexport const POOL_V2_LAYOUT = struct<PoolV2Layout>([...POOL_FIELDS_COMMON, u8('curveType'), publicKey('curve')]);\n\ninterface StableCurveLayout {\n  padding: any;\n  amp: u64;\n}\n\nexport const STABLE_CURVE_LAYOUT = struct<StableCurveLayout>([blob(8, 'padding'), uint64('amp')]);\n\ninterface SwapInstructionLayout {\n  instruction: any;\n  tokens: u64;\n  minTokens: u64;\n  side: 'bid' | 'ask';\n}\n\nexport const SWAP_INSTRUCTION_LAYOUT = struct<SwapInstructionLayout>([\n  blob(8, 'instruction'),\n  uint64('tokens'),\n  uint64('minTokens'),\n  rustEnum([new Structure([], 'bid'), new Structure([], 'ask')], 'side'),\n]);\n\nexport function accountInfoToAldrinPoolState(address: PublicKey, accountInfo: AccountInfo<Buffer>): AldrinPoolState {\n  const isV2 = accountInfo.owner.equals(ALDRIN_SWAP_V2_PROGRAM_ID) ? true : false;\n\n  const decoded: PoolV2Layout | PoolLayout = (isV2 ? POOL_V2_LAYOUT : POOL_LAYOUT).decode(accountInfo.data) as\n    | PoolV2Layout\n    | PoolLayout;\n\n  const curveObject = 'curveType' in decoded ? { curveType: decoded.curveType, curve: decoded.curve } : {};\n\n  return {\n    isV2,\n    address,\n    poolMint: decoded.poolMint,\n    baseTokenVault: decoded.baseTokenVault,\n    baseTokenMint: decoded.baseTokenMint,\n    quoteTokenVault: decoded.quoteTokenVault,\n    quoteTokenMint: decoded.quoteTokenMint,\n    poolSigner: decoded.poolSigner,\n    feeBaseAccount: decoded.feeBaseAccount,\n    feeQuoteAccount: decoded.feeQuoteAccount,\n    feePoolTokenAccount: decoded.feePoolTokenAccount,\n    fees: {\n      traderFee: Percentage.fromFraction(decoded.fees.tradeFeeNumerator, decoded.fees.tradeFeeDenominator),\n      ownerFee: Percentage.fromFraction(decoded.fees.ownerTradeFeeNumerator, decoded.fees.ownerTradeFeeDenominator),\n    },\n    ...curveObject,\n  };\n}\n\nexport interface AldrinPoolState {\n  isV2: Boolean;\n  address: PublicKey;\n  poolMint: PublicKey;\n  baseTokenVault: PublicKey;\n  baseTokenMint: PublicKey;\n  quoteTokenVault: PublicKey;\n  quoteTokenMint: PublicKey;\n  poolSigner: PublicKey;\n  feeBaseAccount: PublicKey;\n  feeQuoteAccount: PublicKey;\n  feePoolTokenAccount: PublicKey;\n  fees: FeeStructure;\n  curveType?: number;\n  curve?: PublicKey;\n}\n","import { Fraction, TokenSwapConstantProduct, TokenSwapStable } from '@jup-ag/math';\nimport { AccountInfo, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport JSBI from 'jsbi';\nimport { deserializeAccount } from '@mercurial-finance/optimist';\nimport {\n  AccountInfoMap,\n  Amm,\n  mapAddressToAccountInfos,\n  Quote,\n  QuoteParams,\n  tokenAccountsToJSBIs,\n  SwapParams,\n} from '../amm';\nimport { createAldrinSwapInstruction, createAldrinV2SwapInstruction } from '../jupiterInstruction';\nimport { accountInfoToAldrinPoolState, AldrinPoolState, STABLE_CURVE_LAYOUT } from './poolState';\nimport { AccountInfo as TokenAccountInfo } from '@solana/spl-token';\nimport Decimal from 'decimal.js';\n\ninterface AldrinParams {\n  amp?: number;\n}\n\nexport class AldrinAmm implements Amm {\n  id: string;\n  label = 'Aldrin' as const;\n  shouldPrefetch = false;\n  poolState: AldrinPoolState;\n  private tokenAccounts: TokenAccountInfo[] = [];\n  calculator: TokenSwapConstantProduct | TokenSwapStable;\n\n  constructor(address: PublicKey, accountInfo: AccountInfo<Buffer>, private params: AldrinParams) {\n    this.poolState = accountInfoToAldrinPoolState(address, accountInfo);\n    this.id = address.toBase58();\n\n    if (this.poolState.curveType === 1) {\n      const { amp } = this.params;\n      if (!amp) {\n        throw new Error('Amp is required for a stable curve');\n      }\n\n      this.calculator = new TokenSwapStable(\n        JSBI.BigInt(amp),\n        new Fraction(\n          JSBI.BigInt(this.poolState.fees.traderFee.numerator.toString()),\n          JSBI.BigInt(this.poolState.fees.traderFee.denominator.toString()),\n        ),\n        new Fraction(\n          JSBI.BigInt(this.poolState.fees.ownerFee.numerator.toString()),\n          JSBI.BigInt(this.poolState.fees.ownerFee.denominator.toString()),\n        ),\n      );\n    } else {\n      this.calculator = new TokenSwapConstantProduct(\n        new Fraction(\n          JSBI.BigInt(this.poolState.fees.traderFee.numerator.toString()),\n          JSBI.BigInt(this.poolState.fees.traderFee.denominator.toString()),\n        ),\n        new Fraction(\n          JSBI.BigInt(this.poolState.fees.ownerFee.numerator.toString()),\n          JSBI.BigInt(this.poolState.fees.ownerFee.denominator.toString()),\n        ),\n      );\n    }\n  }\n\n  static accountInfoToAldrinPoolState = accountInfoToAldrinPoolState;\n\n  static decodeStableCurveAmp(accountInfo: AccountInfo<Buffer>) {\n    const { amp } = STABLE_CURVE_LAYOUT.decode(accountInfo.data);\n\n    return amp.toNumber() * 2; // times two for their AMP, dont ask me why, it is what it is\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [this.poolState.quoteTokenVault, this.poolState.baseTokenVault];\n  }\n\n  update(accountInfoMap: AccountInfoMap): void {\n    const tokenAccountInfos = mapAddressToAccountInfos(accountInfoMap, this.getAccountsForUpdate());\n\n    this.tokenAccounts = tokenAccountInfos.map((info) => {\n      const tokenAccount = deserializeAccount(info.data);\n      if (!tokenAccount) throw new Error('Invalid token account');\n      return tokenAccount;\n    });\n  }\n\n  getQuote({ sourceMint, amount }: QuoteParams): Quote {\n    if (this.tokenAccounts.length === 0) {\n      throw new Error('Unable to fetch accounts for specified tokens.');\n    }\n\n    let feePct = new Decimal(this.poolState.fees.traderFee.numerator.toString())\n      .div(this.poolState.fees.traderFee.denominator.toString())\n      .add(\n        new Decimal(this.poolState.fees.ownerFee.numerator.toString()).div(\n          this.poolState.fees.ownerFee.denominator.toString(),\n        ),\n      );\n\n    const outputIndex = this.tokenAccounts[0].mint.equals(sourceMint) ? 1 : 0;\n    let result = this.calculator.exchange(tokenAccountsToJSBIs(this.tokenAccounts), JSBI.BigInt(amount), outputIndex);\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: JSBI.toNumber(result.expectedOutputAmount),\n      feeAmount: JSBI.toNumber(result.fees),\n      feeMint: sourceMint.toBase58(),\n      feePct: feePct.toNumber(),\n      priceImpactPct: result.priceImpact.toNumber(),\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams): TransactionInstruction[] {\n    if (this.poolState.isV2) {\n      if (!this.poolState.curve) {\n        throw new Error('Unable to fetch curve account.');\n      }\n\n      const curve = this.poolState.curve;\n      return [\n        createAldrinV2SwapInstruction({\n          poolState: this.poolState,\n          curve,\n          ...swapParams,\n        }),\n      ];\n    }\n\n    return [\n      createAldrinSwapInstruction({\n        poolState: this.poolState,\n        ...swapParams,\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.poolState.baseTokenMint, this.poolState.quoteTokenMint];\n  }\n}\n","import { PublicKey } from '@solana/web3.js';\n\nexport const STEP_TOKEN_SWAP_PROGRAM_ID = new PublicKey('SSwpMgqNDsyV7mAgN9ady4bDVu5ySjmmXejXvy2vLt1');\n\nexport const PROGRAM_ID_TO_LABEL = new Map<string, string>([\n  ['9W959DqEETiGZocYWCQPaJ6sBmUzgfxXfqGeTEdp3aQP', 'Orca'],\n  [STEP_TOKEN_SWAP_PROGRAM_ID.toBase58(), 'Step'],\n  ['PSwapMdSai8tjrEXcxFeQth87xC4rRsa4VA5mhGhXkP', 'Penguin'],\n  ['SSwapUtytfBdBn1b9NUGG6foMVPtcWgpRU32HToDUZr', 'Saros'],\n]);\n","import { findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { struct, u8, blob } from '@solana/buffer-layout';\nimport { u64 } from '@solana/spl-token';\nimport { AccountInfo, PublicKey } from '@solana/web3.js';\nimport { publicKey, uint64 } from '../../utils/layout';\nimport { STEP_TOKEN_SWAP_PROGRAM_ID } from './splTokenSwapPools';\n\ninterface TokenSwapLayout {\n  version: number;\n  isInitialized: number;\n  bumpSeed: number;\n  tokenProgramId: PublicKey;\n  tokenAccountA: PublicKey;\n  tokenAccountB: PublicKey;\n  tokenPool: PublicKey;\n  mintA: PublicKey;\n  mintB: PublicKey;\n  feeAccount: PublicKey;\n  tradeFeeNumerator: u64;\n  tradeFeeDenominator: u64;\n  ownerTradeFeeNumerator: u64;\n  ownerTradeFeeDenominator: u64;\n  ownerWithdrawFeeNumerator: u64;\n  ownerWithdrawFeeDenominator: u64;\n  hostFeeNumerator: u64;\n  hostFeeDenominator: u64;\n  curveType: number;\n  curveParameters: Uint8Array;\n}\n\nconst TokenSwapLayout = struct<TokenSwapLayout>([\n  u8('version'),\n  u8('isInitialized'),\n  u8('bumpSeed'),\n  publicKey('tokenProgramId'),\n  publicKey('tokenAccountA'),\n  publicKey('tokenAccountB'),\n  publicKey('tokenPool'),\n  publicKey('mintA'),\n  publicKey('mintB'),\n  publicKey('feeAccount'),\n  uint64('tradeFeeNumerator'),\n  uint64('tradeFeeDenominator'),\n  uint64('ownerTradeFeeNumerator'),\n  uint64('ownerTradeFeeDenominator'),\n  uint64('ownerWithdrawFeeNumerator'),\n  uint64('ownerWithdrawFeeDenominator'),\n  uint64('hostFeeNumerator'),\n  uint64('hostFeeDenominator'),\n  u8('curveType'),\n  blob(32, 'curveParameters'),\n]);\n\ninterface StepTokenSwapLayout extends TokenSwapLayout {\n  poolNonce: u64;\n}\n\nconst StepTokenSwapLayout = struct<StepTokenSwapLayout>([\n  u8('version'),\n  u8('isInitialized'),\n  u8('bumpSeed'),\n  publicKey('tokenProgramId'),\n  publicKey('tokenAccountA'),\n  publicKey('tokenAccountB'),\n  publicKey('tokenPool'),\n  publicKey('mintA'),\n  publicKey('mintB'),\n  publicKey('feeAccount'),\n  uint64('tradeFeeNumerator'),\n  uint64('tradeFeeDenominator'),\n  uint64('ownerTradeFeeNumerator'),\n  uint64('ownerTradeFeeDenominator'),\n  uint64('ownerWithdrawFeeNumerator'),\n  uint64('ownerWithdrawFeeDenominator'),\n  u8('curveType'),\n  blob(32, 'curveParameters'),\n  u8('poolNonce'),\n]);\n\nexport interface TokenSwapState {\n  address: PublicKey;\n  programId: PublicKey;\n  tokenProgramId: PublicKey;\n  poolToken: PublicKey;\n  feeAccount: PublicKey;\n  authority: PublicKey;\n  tokenAccountA: PublicKey;\n  tokenAccountB: PublicKey;\n  mintA: PublicKey;\n  mintB: PublicKey;\n  tradeFeeNumerator: u64;\n  tradeFeeDenominator: u64;\n  ownerTradeFeeNumerator: u64;\n  ownerTradeFeeDenominator: u64;\n  ownerWithdrawFeeNumerator: u64;\n  ownerWithdrawFeeDenominator: u64;\n  curveType: number;\n  curveParameters: Uint8Array;\n  poolNonce?: u64;\n}\n\nexport function accountInfoToTokenSwapState(\n  address: PublicKey,\n  tokenSwapAccountInfo: AccountInfo<Buffer>,\n): TokenSwapState {\n  const programId = tokenSwapAccountInfo.owner;\n\n  // The layout difference only affects fields we do not actively use\n  const tokenSwapData = (\n    programId.equals(STEP_TOKEN_SWAP_PROGRAM_ID)\n      ? StepTokenSwapLayout.decode(tokenSwapAccountInfo.data)\n      : TokenSwapLayout.decode(tokenSwapAccountInfo.data)\n  ) as TokenSwapLayout | StepTokenSwapLayout;\n\n  if (!tokenSwapData.isInitialized) {\n    throw new Error(`Invalid token swap state`);\n  }\n\n  const [authority] = findProgramAddressSync([address.toBuffer()], programId);\n\n  const poolToken = new PublicKey(tokenSwapData.tokenPool);\n  const feeAccount = new PublicKey(tokenSwapData.feeAccount);\n  const tokenAccountA = new PublicKey(tokenSwapData.tokenAccountA);\n  const tokenAccountB = new PublicKey(tokenSwapData.tokenAccountB);\n  const mintA = new PublicKey(tokenSwapData.mintA);\n  const mintB = new PublicKey(tokenSwapData.mintB);\n  const tokenProgramId = new PublicKey(tokenSwapData.tokenProgramId);\n\n  const tradeFeeNumerator = tokenSwapData.tradeFeeNumerator;\n  const tradeFeeDenominator = tokenSwapData.tradeFeeDenominator;\n  const ownerTradeFeeNumerator = tokenSwapData.ownerTradeFeeNumerator;\n  const ownerTradeFeeDenominator = tokenSwapData.ownerTradeFeeDenominator;\n  const ownerWithdrawFeeNumerator = tokenSwapData.ownerWithdrawFeeNumerator;\n  const ownerWithdrawFeeDenominator = tokenSwapData.ownerWithdrawFeeDenominator;\n\n  const curveType = tokenSwapData.curveType;\n  const curveParameters = tokenSwapData.curveParameters;\n\n  const poolNonce = 'poolNonce' in tokenSwapData ? tokenSwapData.poolNonce : undefined;\n\n  return {\n    address,\n    programId,\n    tokenProgramId,\n    poolToken,\n    feeAccount,\n    authority,\n    tokenAccountA,\n    tokenAccountB,\n    mintA,\n    mintB,\n    tradeFeeNumerator,\n    tradeFeeDenominator,\n    ownerTradeFeeNumerator,\n    ownerTradeFeeDenominator,\n    ownerWithdrawFeeNumerator,\n    ownerWithdrawFeeDenominator,\n    curveType,\n    curveParameters,\n    poolNonce,\n  };\n}\n","import { AccountInfo, PublicKey } from '@solana/web3.js';\nimport Decimal from 'decimal.js';\nimport {\n  AccountInfoMap,\n  Amm,\n  mapAddressToAccountInfos,\n  Quote,\n  QuoteParams,\n  SwapParams,\n  tokenAccountsToJSBIs,\n} from '../amm';\nimport { createTokenSwapInstruction } from '../jupiterInstruction';\nimport { accountInfoToTokenSwapState, TokenSwapState } from './tokenSwapLayout';\nimport { deserializeAccount } from '@mercurial-finance/optimist';\nimport { Fraction, TokenSwapConstantProduct, TokenSwapStable } from '@jup-ag/math';\nimport JSBI from 'jsbi';\nimport { AccountInfo as TokenAccountInfo } from '@solana/spl-token';\nimport { STEP_TOKEN_SWAP_PROGRAM_ID } from './splTokenSwapPools';\n\nenum CurveType {\n  ConstantProduct = 0,\n  Stable = 2,\n}\n\n// Abstract any SPL token swap based AMM\nexport class SplTokenSwapAmm implements Amm {\n  id: string;\n  shouldPrefetch = false;\n  private tokenSwapState: TokenSwapState;\n  private curveType: CurveType;\n\n  private tokenAccounts: TokenAccountInfo[] = [];\n  calculator: TokenSwapConstantProduct | TokenSwapStable;\n\n  constructor(address: PublicKey, swapStateAccountInfo: AccountInfo<Buffer>, public label: string) {\n    this.id = address.toBase58();\n    this.tokenSwapState = accountInfoToTokenSwapState(address, swapStateAccountInfo);\n\n    this.curveType = this.tokenSwapState.curveType;\n\n    if (!(this.curveType in CurveType)) {\n      throw new Error(`curveType ${this.tokenSwapState.curveType} is not supported`);\n    }\n\n    if (this.tokenSwapState.curveType === CurveType.ConstantProduct) {\n      this.calculator = new TokenSwapConstantProduct(\n        new Fraction(\n          JSBI.BigInt(this.tokenSwapState.tradeFeeNumerator.toString()),\n          JSBI.BigInt(this.tokenSwapState.tradeFeeDenominator.toString()),\n        ),\n        new Fraction(\n          JSBI.BigInt(this.tokenSwapState.ownerTradeFeeNumerator.toString()),\n          JSBI.BigInt(this.tokenSwapState.ownerTradeFeeDenominator.toString()),\n        ),\n      );\n    } else {\n      this.calculator = new TokenSwapStable(\n        JSBI.BigInt(this.tokenSwapState.curveParameters[0]),\n        new Fraction(\n          JSBI.BigInt(this.tokenSwapState.tradeFeeNumerator.toString()),\n          JSBI.BigInt(this.tokenSwapState.tradeFeeDenominator.toString()),\n        ),\n        new Fraction(\n          JSBI.BigInt(this.tokenSwapState.ownerTradeFeeNumerator.toString()),\n          JSBI.BigInt(this.tokenSwapState.ownerTradeFeeDenominator.toString()),\n        ),\n      );\n    }\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [this.tokenSwapState.tokenAccountA, this.tokenSwapState.tokenAccountB];\n  }\n\n  update(accountInfoMap: AccountInfoMap): void {\n    const tokenAccountInfos = mapAddressToAccountInfos(accountInfoMap, this.getAccountsForUpdate());\n\n    this.tokenAccounts = tokenAccountInfos.map((info) => {\n      const tokenAccount = deserializeAccount(info.data);\n      if (!tokenAccount) {\n        throw new Error('Invalid token account');\n      }\n      return tokenAccount;\n    });\n  }\n\n  getQuote({ sourceMint, amount }: QuoteParams): Quote {\n    if (this.tokenAccounts.length === 0) {\n      throw new Error('Unable to fetch accounts for specified tokens.');\n    }\n\n    let feePct = new Decimal(this.tokenSwapState.tradeFeeNumerator.toString())\n      .div(this.tokenSwapState.tradeFeeDenominator.toString())\n      .add(\n        new Decimal(this.tokenSwapState.ownerTradeFeeNumerator.toString()).div(\n          this.tokenSwapState.ownerTradeFeeDenominator.toString(),\n        ),\n      );\n\n    const outputIndex = this.tokenAccounts[0].mint.equals(sourceMint) ? 1 : 0;\n    let result = this.calculator.exchange(\n      tokenAccountsToJSBIs(this.tokenAccounts),\n      JSBI.BigInt(Math.floor(amount)),\n      outputIndex,\n    );\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: JSBI.toNumber(result.expectedOutputAmount),\n      feeAmount: JSBI.toNumber(result.fees),\n      feeMint: sourceMint.toBase58(),\n      feePct: feePct.toNumber(),\n      priceImpactPct: result.priceImpact.toNumber(),\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams) {\n    return [\n      createTokenSwapInstruction({\n        tokenSwapState: this.tokenSwapState,\n        ...swapParams,\n        isStep: this.tokenSwapState.programId.equals(STEP_TOKEN_SWAP_PROGRAM_ID),\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.tokenSwapState.mintA, this.tokenSwapState.mintB];\n  }\n}\n","import { findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { struct, u8, u32 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/spl-token';\nimport { AccountInfo, PublicKey } from '@solana/web3.js';\nimport { uint64, publicKey } from '../../utils/layout';\n\nexport const FEE_DENOMINATOR = Math.pow(10, 10);\n\ninterface MercurialSwapLayout {\n  version: number;\n  isInitialized: number;\n  nonce: number;\n  amplificationCoefficient: u64;\n  feeNumerator: u64;\n  adminFeeNumerator: u64;\n  tokenAccountsLength: number;\n  precisionFactor: u64;\n  precisionMultiplierA: u64;\n  precisionMultiplierB: u64;\n  precisionMultiplierC: u64;\n  precisionMultiplierD: u64;\n  tokenAccountA: PublicKey;\n  tokenAccountB: PublicKey;\n  tokenAccountC: PublicKey;\n  tokenAccountD: PublicKey;\n}\n\nexport const MercurialSwapLayout = struct<MercurialSwapLayout>([\n  u8('version'),\n  u8('isInitialized'),\n  u8('nonce'),\n  uint64('amplificationCoefficient'),\n  uint64('feeNumerator'),\n  uint64('adminFeeNumerator'),\n  u32('tokenAccountsLength'),\n  uint64('precisionFactor'),\n  uint64('precisionMultiplierA'),\n  uint64('precisionMultiplierB'),\n  uint64('precisionMultiplierC'),\n  uint64('precisionMultiplierD'),\n  publicKey('tokenAccountA'),\n  publicKey('tokenAccountB'),\n  publicKey('tokenAccountC'),\n  publicKey('tokenAccountD'),\n]);\n\nexport interface MercurialSwapLayoutState {\n  programId: PublicKey;\n  authority: PublicKey;\n  isInitialized: boolean;\n  nonce: number;\n  ammId: PublicKey;\n  amplificationCoefficient: number;\n  feeNumerator: number;\n  tokenAccountsLength: number;\n  precisionFactor: number;\n  precisionMultipliers: number[];\n  tokenAccounts: PublicKey[];\n}\n\nexport const accountInfoToMercurialSwapLayout = (\n  address: PublicKey,\n  accountInfo: AccountInfo<Buffer>,\n): MercurialSwapLayoutState => {\n  const programId = accountInfo.owner;\n  const decoded = MercurialSwapLayout.decode(accountInfo.data);\n  const tokenAccountsLength = decoded.tokenAccountsLength;\n  const [authority] = findProgramAddressSync([address.toBuffer()], programId);\n\n  const precisionMultipliers = [\n    decoded.precisionMultiplierA.toNumber(),\n    decoded.precisionMultiplierB.toNumber(),\n    decoded.precisionMultiplierC.toNumber(),\n    decoded.precisionMultiplierD.toNumber(),\n  ].slice(0, tokenAccountsLength);\n\n  const tokenAccounts = [\n    decoded.tokenAccountA,\n    decoded.tokenAccountB,\n    decoded.tokenAccountC,\n    decoded.tokenAccountD,\n  ].slice(0, tokenAccountsLength);\n\n  return {\n    programId,\n    authority,\n    isInitialized: Boolean(decoded.isInitialized),\n    nonce: decoded.nonce,\n    ammId: address,\n    amplificationCoefficient: decoded.amplificationCoefficient.toNumber(),\n    feeNumerator: decoded.feeNumerator.toNumber(),\n    tokenAccountsLength,\n    precisionFactor: decoded.precisionFactor.toNumber(),\n    precisionMultipliers,\n    tokenAccounts,\n  };\n};\n","import { Fraction, Stable } from '@jup-ag/math';\nimport { AccountInfo, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport JSBI from 'jsbi';\nimport {\n  AccountInfoMap,\n  Amm,\n  mapAddressToAccountInfos,\n  Quote,\n  QuoteParams,\n  tokenAccountsToJSBIs,\n  SwapParams,\n} from '../amm';\nimport { createMercurialExchangeInstruction } from '../jupiterInstruction';\nimport { deserializeAccount } from '@mercurial-finance/optimist';\nimport { AccountInfo as TokenAccountInfo } from '@solana/spl-token';\nimport { accountInfoToMercurialSwapLayout, FEE_DENOMINATOR, MercurialSwapLayoutState } from './swapLayout';\n\ninterface MercurialParams {\n  tokenMints: string[];\n}\n\nexport class MercurialAmm implements Amm {\n  id: string;\n  label = 'Mercurial';\n  shouldPrefetch = false;\n  swapLayout: MercurialSwapLayoutState;\n  private tokenAccounts: TokenAccountInfo[] = [];\n  private calculator: Stable;\n\n  static decodeSwapLayout = accountInfoToMercurialSwapLayout;\n\n  constructor(address: PublicKey, accountInfo: AccountInfo<Buffer>, private params: MercurialParams) {\n    this.id = address.toBase58();\n    this.swapLayout = accountInfoToMercurialSwapLayout(address, accountInfo);\n    this.calculator = new Stable(\n      JSBI.BigInt(this.swapLayout.tokenAccountsLength),\n      JSBI.BigInt(this.swapLayout.amplificationCoefficient),\n      this.swapLayout.precisionMultipliers.map((precisionMultiplier) => JSBI.BigInt(precisionMultiplier)),\n      new Fraction(JSBI.BigInt(this.swapLayout.feeNumerator), JSBI.BigInt(FEE_DENOMINATOR)),\n    );\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return this.swapLayout.tokenAccounts;\n  }\n\n  update(accountInfoMap: AccountInfoMap) {\n    let tokenAccountInfos = mapAddressToAccountInfos(accountInfoMap, this.getAccountsForUpdate());\n\n    this.tokenAccounts = tokenAccountInfos\n      .map((info) => deserializeAccount(info.data))\n      .filter((x): x is TokenAccountInfo => x !== null);\n  }\n\n  getQuote({ sourceMint, destinationMint, amount }: QuoteParams): Quote {\n    if (this.tokenAccounts.length === 0) {\n      throw new Error('Unable to fetch accounts for specified tokens.');\n    }\n\n    const inputIndex = this.tokenAccounts.findIndex((tokenAccount) => tokenAccount.mint.equals(sourceMint));\n    const outputIndex = this.tokenAccounts.findIndex((tokenAccount) => tokenAccount.mint.equals(destinationMint));\n    const result = this.calculator.exchange(\n      tokenAccountsToJSBIs(this.tokenAccounts),\n      JSBI.BigInt(amount),\n      inputIndex,\n      outputIndex,\n    );\n\n    const feePct = this.swapLayout.feeNumerator / FEE_DENOMINATOR;\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: JSBI.toNumber(result.expectedOutputAmount),\n      feeAmount: JSBI.toNumber(result.fees),\n      feeMint: destinationMint.toBase58(),\n      feePct: feePct,\n      priceImpactPct: result.priceImpact.toNumber(),\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams): TransactionInstruction[] {\n    return [\n      createMercurialExchangeInstruction({\n        swapLayout: this.swapLayout,\n        ...swapParams,\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return this.params.tokenMints.map((tokenMint) => new PublicKey(tokenMint));\n  }\n}\n","import { Fraction, TokenSwapConstantProduct } from '@jup-ag/math';\nimport { AccountInfo, Connection, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport JSBI from 'jsbi';\nimport { deserializeAccount } from '@mercurial-finance/optimist';\nimport {\n  AccountInfoMap,\n  Amm,\n  mapAddressToAccountInfos,\n  Quote,\n  QuoteParams,\n  tokenAccountsToJSBIs,\n  SwapParams,\n} from '../amm';\nimport { createCropperSwapInstruction } from '../jupiterInstruction';\n\nimport { AccountInfo as TokenAccountInfo } from '@solana/spl-token';\nimport {\n  accountInfoToCropperPoolState,\n  CropperPoolState,\n  stateAccountInfoToCropperState,\n  CROPPER_STATE_ADDRESS,\n} from './swapLayout';\nimport Decimal from 'decimal.js';\n\ninterface CropperParams {\n  tokenAFeeAccount: PublicKey;\n  tokenBFeeAccount: PublicKey;\n  returnFeeNumerator: number;\n  fixedFeeNumerator: number;\n  feeDenominator: number;\n}\n\nexport class CropperAmm implements Amm {\n  id: string;\n  label = 'Cropper' as const;\n  shouldPrefetch = false;\n  poolState: CropperPoolState;\n  private tokenAccounts: TokenAccountInfo[] = [];\n  private calculator: TokenSwapConstantProduct;\n  private feePct: Decimal;\n\n  // Hardcoded because no where to query this\n  static async getStateFromStateAccount(connection: Connection) {\n    const accountInfo = await connection.getAccountInfo(CROPPER_STATE_ADDRESS);\n\n    if (!accountInfo) {\n      throw new Error('State account not found');\n    }\n\n    return stateAccountInfoToCropperState(accountInfo);\n  }\n\n  static decodePoolState = accountInfoToCropperPoolState;\n\n  constructor(address: PublicKey, accountInfo: AccountInfo<Buffer>, private params: CropperParams) {\n    this.id = address.toBase58();\n    this.poolState = accountInfoToCropperPoolState(address, accountInfo);\n\n    this.feePct = new Decimal(this.params.fixedFeeNumerator)\n      .div(this.params.feeDenominator)\n      .add(new Decimal(this.params.returnFeeNumerator).div(this.params.feeDenominator));\n\n    this.params.tokenAFeeAccount = new PublicKey(this.params.tokenAFeeAccount);\n    this.params.tokenBFeeAccount = new PublicKey(this.params.tokenBFeeAccount);\n\n    this.calculator = new TokenSwapConstantProduct(\n      new Fraction(JSBI.BigInt(this.params.fixedFeeNumerator), JSBI.BigInt(this.params.feeDenominator)),\n      new Fraction(JSBI.BigInt(this.params.returnFeeNumerator), JSBI.BigInt(this.params.feeDenominator)),\n    );\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [this.poolState.tokenAAccount, this.poolState.tokenBAccount];\n  }\n\n  update(accountInfoMap: AccountInfoMap): void {\n    const tokenAccountInfos = mapAddressToAccountInfos(accountInfoMap, this.getAccountsForUpdate());\n\n    this.tokenAccounts = tokenAccountInfos.map((info) => {\n      const tokenAccount = deserializeAccount(info.data);\n      if (!tokenAccount) {\n        throw new Error('Invalid token account');\n      }\n      return tokenAccount;\n    });\n  }\n\n  getQuote({ sourceMint, amount }: QuoteParams): Quote {\n    if (this.tokenAccounts.length === 0) {\n      throw new Error('Unable to fetch accounts for specified tokens.');\n    }\n\n    const outputIndex = this.tokenAccounts[0].mint.equals(sourceMint) ? 1 : 0;\n    const result = this.calculator.exchange(tokenAccountsToJSBIs(this.tokenAccounts), JSBI.BigInt(amount), outputIndex);\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: JSBI.toNumber(result.expectedOutputAmount),\n      feeAmount: JSBI.toNumber(result.fees),\n      feeMint: sourceMint.toBase58(),\n      feePct: this.feePct.toNumber(),\n      priceImpactPct: result.priceImpact.toNumber(),\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams): TransactionInstruction[] {\n    const feeAccount = swapParams.sourceMint.equals(this.poolState.mintA)\n      ? this.params.tokenAFeeAccount\n      : this.params.tokenBFeeAccount;\n\n    return [\n      createCropperSwapInstruction({\n        poolState: this.poolState,\n        feeAccount,\n        ...swapParams,\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.poolState.mintA, this.poolState.mintB];\n  }\n}\n","import { TokenSwapAccountLayout } from '@jup-ag/crema-sdk';\nimport { findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { AccountInfo, PublicKey } from '@solana/web3.js';\nimport Decimal from 'decimal.js';\n\nexport interface CremaPoolState {\n  programId: PublicKey;\n  authority: PublicKey;\n  version: number;\n  isInitialized: boolean;\n  nonce: number;\n  ammId: PublicKey;\n  tokenProgramId: PublicKey;\n  tokenAAccount: PublicKey;\n  tokenBAccount: PublicKey;\n  ticksKey: PublicKey;\n  mintA: PublicKey;\n  mintB: PublicKey;\n  fee: Decimal;\n  currentSqrtPrice: Decimal;\n  currentLiquity: Decimal;\n}\n\nexport const accountInfoToCremaPoolState = (address: PublicKey, accountInfo: AccountInfo<Buffer>): CremaPoolState => {\n  const programId = accountInfo.owner;\n\n  const decoded = TokenSwapAccountLayout.decode(accountInfo.data);\n  const [authority] = findProgramAddressSync([address.toBuffer()], programId);\n\n  return {\n    programId,\n    authority,\n    version: decoded.version,\n    isInitialized: Boolean(decoded.isInitialized),\n    nonce: decoded.nonce,\n    ammId: address,\n    tokenProgramId: decoded.tokenProgramId,\n    tokenAAccount: decoded.swapTokenA,\n    tokenBAccount: decoded.swapTokenB,\n    ticksKey: decoded.ticksKey,\n    mintA: decoded.tokenAMint,\n    mintB: decoded.tokenBMint,\n    fee: decoded.fee,\n    currentSqrtPrice: decoded.currentSqrtPrice,\n    currentLiquity: decoded.currentLiquity,\n  };\n};\n","import { AccountInfoMap, Amm, mapAddressToAccountInfos, Quote, QuoteParams, SwapParams } from '../amm';\nimport { AccountInfo, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { accountInfoToCremaPoolState, CremaPoolState } from './swapLayout';\nimport { createCremaSwapInstruction } from '../jupiterInstruction';\nimport { calculateSwapA2B, calculateSwapB2A, parseTicksAccount, Tick } from '@jup-ag/crema-sdk';\nimport Decimal from 'decimal.js';\n\nexport class CremaAmm implements Amm {\n  id: string;\n  label = 'Crema';\n  shouldPrefetch = false;\n  private ticks: Tick[] | undefined;\n  private poolState: CremaPoolState;\n\n  constructor(address: PublicKey, accountInfo: AccountInfo<Buffer>) {\n    this.poolState = accountInfoToCremaPoolState(address, accountInfo);\n    this.id = address.toBase58();\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [this.poolState.ammId, this.poolState.ticksKey];\n  }\n\n  update(accountInfoMap: AccountInfoMap): void {\n    const [tokenSwapAccountInfo, ticksAccountInfo] = mapAddressToAccountInfos(\n      accountInfoMap,\n      this.getAccountsForUpdate(),\n    );\n\n    this.poolState = accountInfoToCremaPoolState(this.poolState.ammId, tokenSwapAccountInfo);\n\n    const ticksInfo = parseTicksAccount(this.poolState.ticksKey, ticksAccountInfo);\n    if (!ticksInfo) throw new Error(`Ticks account invalid: ${this.poolState.ticksKey.toBase58()}`);\n    this.ticks = ticksInfo.data.ticks;\n  }\n\n  getQuote({ sourceMint, amount }: QuoteParams): Quote {\n    if (!this.ticks) {\n      throw new Error('Unable to fetch accounts for ticks.');\n    }\n\n    // Crema SDK doesn't support 0 amount input\n    if (amount === 0) {\n      return {\n        notEnoughLiquidity: false,\n        inAmount: amount,\n        outAmount: 0,\n        feeAmount: 0,\n        feeMint: sourceMint.toBase58(),\n        feePct: this.poolState.fee.toNumber(),\n        priceImpactPct: 0,\n      };\n    }\n\n    const result = this.poolState.mintA.equals(sourceMint)\n      ? this.preSwapA(new Decimal(amount))\n      : this.preSwapB(new Decimal(amount));\n\n    if (result.revert) {\n      throw new Error('Crema error: insufficient liquidity');\n    }\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: result.amountOut.toNumber(),\n      feeAmount: result.feeUsed.toNumber(),\n      feeMint: sourceMint.toBase58(),\n      feePct: this.poolState.fee.toNumber(),\n      priceImpactPct: result.impact.toNumber(),\n    };\n  }\n\n  preSwapA(amountIn: Decimal): {\n    amountOut: Decimal;\n    amountUsed: Decimal;\n    feeUsed: Decimal;\n    afterPrice: Decimal;\n    afterLiquity: Decimal;\n    impact: Decimal;\n    revert: boolean;\n  } {\n    if (!this.ticks) {\n      throw new Error('Unable to fetch accounts for ticks.');\n    }\n\n    const result = calculateSwapA2B(\n      this.ticks,\n      this.poolState.currentSqrtPrice,\n      this.poolState.fee,\n      this.poolState.currentLiquity,\n      amountIn,\n    );\n\n    const currentPriceA = this.poolState.currentSqrtPrice.pow(2);\n    const transactionPriceA = result.amountOut.div(result.amountUsed);\n    const impact = transactionPriceA.sub(currentPriceA).div(currentPriceA).abs();\n    const revert = result.amountUsed.lessThan(amountIn);\n\n    return {\n      ...result,\n      impact,\n      revert,\n    };\n  }\n\n  preSwapB(amountIn: Decimal): {\n    amountOut: Decimal;\n    amountUsed: Decimal;\n    feeUsed: Decimal;\n    afterPrice: Decimal;\n    afterLiquity: Decimal;\n    impact: Decimal;\n    revert: boolean;\n  } {\n    if (!this.ticks) {\n      throw new Error('Unable to fetch accounts for ticks.');\n    }\n\n    const result = calculateSwapB2A(\n      this.ticks,\n      this.poolState.currentSqrtPrice,\n      this.poolState.fee,\n      this.poolState.currentLiquity,\n      amountIn,\n    );\n\n    const currentPriceA = this.poolState.currentSqrtPrice.pow(2);\n    const currentPriceB = new Decimal(1).div(currentPriceA);\n    const transactionPriceB = result.amountOut.div(result.amountUsed);\n    const impact = transactionPriceB.sub(currentPriceB).div(currentPriceB).abs();\n    const revert = result.amountUsed.lessThan(amountIn);\n\n    return {\n      ...result,\n      impact,\n      revert,\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams): TransactionInstruction[] {\n    return [\n      createCremaSwapInstruction({\n        poolState: this.poolState,\n        ...swapParams,\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.poolState.mintA, this.poolState.mintB];\n  }\n}\n","import { struct, u8, Layout, blob } from '@solana/buffer-layout';\nimport { PublicKey, AccountInfo } from '@solana/web3.js';\nimport { u64 } from '@solana/spl-token';\nimport { publicKey, uint64 } from '../../utils/layout';\n\ninterface SenchaSwapLayout {\n  discriminator: any;\n  factory: PublicKey;\n  bump: number;\n  index: u64;\n  admin: PublicKey;\n  token0Reserves: PublicKey;\n  token0Mint: PublicKey;\n  token0Fees: PublicKey;\n  token1Reserves: PublicKey;\n  token1Mint: PublicKey;\n  token1Fees: PublicKey;\n  isPaused: number;\n  poolMint: PublicKey;\n  tradeFeeKbps: u64;\n  withdrawFeeKbps: u64;\n  adminTradeFeeKbps: u64;\n  adminWithdrawFeeKbps: u64;\n}\n\nexport const SenchaSwapLayout = struct<SenchaSwapLayout>([\n  blob(8, 'discriminator'),\n  publicKey('factory'),\n  u8('bump'),\n  uint64('index'),\n  publicKey('admin'),\n  publicKey('token0Reserves'),\n  publicKey('token0Mint'),\n  publicKey('token0Fees'),\n  publicKey('token1Reserves'),\n  publicKey('token1Mint'),\n  publicKey('token1Fees'),\n  u8('isPaused'),\n  publicKey('poolMint'),\n  uint64('tradeFeeKbps'),\n  uint64('withdrawFeeKbps'),\n  uint64('adminTradeFeeKbps'),\n  uint64('adminWithdrawFeeKbps'),\n]);\n\nexport interface SenchaPoolState {\n  programId: PublicKey;\n  isPaused: boolean;\n  bump: number;\n  ammId: PublicKey;\n  token0Reserves: PublicKey;\n  token1Reserves: PublicKey;\n  token0Mint: PublicKey;\n  token1Mint: PublicKey;\n  token0Fees: PublicKey;\n  token1Fees: PublicKey;\n  poolMint: PublicKey;\n  tradeFeeKbps: number;\n}\n\nexport const accountInfoToSenchaPoolState = (address: PublicKey, accountInfo: AccountInfo<Buffer>): SenchaPoolState => {\n  const programId = accountInfo.owner;\n  const decoded = SenchaSwapLayout.decode(accountInfo.data);\n\n  return {\n    programId,\n    isPaused: Boolean(decoded.isPaused),\n    bump: decoded.bump,\n    ammId: address,\n    token0Reserves: decoded.token0Reserves,\n    token1Reserves: decoded.token1Reserves,\n    token0Mint: decoded.token0Mint,\n    token1Mint: decoded.token1Mint,\n    token0Fees: decoded.token0Fees,\n    token1Fees: decoded.token1Fees,\n    poolMint: decoded.poolMint,\n    tradeFeeKbps: decoded.tradeFeeKbps.toNumber(),\n  };\n};\n","import { AccountInfo, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport {\n  AccountInfoMap,\n  Amm,\n  mapAddressToAccountInfos,\n  Quote,\n  QuoteParams,\n  tokenAccountsToJSBIs,\n  SwapParams,\n} from '../amm';\nimport { accountInfoToSenchaPoolState, SenchaPoolState } from './swapLayout';\nimport { AccountInfo as TokenAccountInfo } from '@solana/spl-token';\nimport { deserializeAccount } from '@mercurial-finance/optimist';\nimport { createSenchaSwapInstruction } from '../jupiterInstruction';\nimport { Fraction, TokenSwapConstantProduct, ZERO } from '@jup-ag/math';\nimport JSBI from 'jsbi';\n\nexport class SenchaAmm implements Amm {\n  id: string;\n  label = 'Sencha' as const;\n  shouldPrefetch = false;\n  poolState: SenchaPoolState;\n  private calculator: TokenSwapConstantProduct;\n  private tokenAccounts: TokenAccountInfo[] = [];\n\n  constructor(address: PublicKey, accountInfo: AccountInfo<Buffer>) {\n    this.id = address.toBase58();\n    this.poolState = accountInfoToSenchaPoolState(address, accountInfo);\n    this.calculator = new TokenSwapConstantProduct(\n      new Fraction(\n        JSBI.BigInt(this.poolState.tradeFeeKbps),\n        JSBI.BigInt(10000000), // 100% = 10000000kbps\n      ),\n      new Fraction(ZERO, ZERO),\n      false,\n    );\n  }\n\n  get isPaused() {\n    return this.poolState.isPaused;\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [this.poolState.token0Reserves, this.poolState.token1Reserves];\n  }\n\n  update(accountInfoMap: AccountInfoMap): void {\n    const tokenAccountInfos = mapAddressToAccountInfos(accountInfoMap, this.getAccountsForUpdate());\n\n    this.tokenAccounts = tokenAccountInfos.map((info) => {\n      const tokenAccount = deserializeAccount(info.data);\n      if (!tokenAccount) {\n        throw new Error('Invalid token account');\n      }\n      return tokenAccount;\n    });\n  }\n\n  getQuote({ sourceMint, amount }: QuoteParams): Quote {\n    if (this.tokenAccounts.length === 0) {\n      throw new Error('Unable to fetch accounts for specified tokens.');\n    }\n\n    const outputIndex = this.tokenAccounts[0].mint.equals(sourceMint) ? 1 : 0;\n    let result = this.calculator.exchange(tokenAccountsToJSBIs(this.tokenAccounts), JSBI.BigInt(amount), outputIndex);\n\n    let feePct = this.poolState.tradeFeeKbps / 10000000; // 100% kbps\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: JSBI.toNumber(result.expectedOutputAmount),\n      feeAmount: JSBI.toNumber(result.fees),\n      feeMint: sourceMint.toBase58(),\n      feePct,\n      priceImpactPct: result.priceImpact.toNumber(),\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams): TransactionInstruction[] {\n    return [\n      createSenchaSwapInstruction({\n        poolState: this.poolState,\n        ...swapParams,\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.poolState.token0Mint, this.poolState.token1Mint];\n  }\n}\n","import { AccountInfo, PublicKey } from '@solana/web3.js';\nimport { findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { LIFINITY_AMM_LAYOUT, IPoolInfo } from '@jup-ag/lifinity-sdk';\n\nexport interface LifinitySwapLayoutState {\n  programId: PublicKey;\n  authority: PublicKey;\n  amm: PublicKey;\n  tokenAMint: PublicKey;\n  tokenBMint: PublicKey;\n  poolMint: PublicKey;\n  feeAccount: PublicKey;\n  pythAccount: PublicKey;\n  pythPcAccount: PublicKey;\n  configAccount: PublicKey;\n  poolCoinTokenAccount: PublicKey;\n  poolCoinMint: PublicKey;\n  poolPcTokenAccount: PublicKey;\n  poolPcMint: PublicKey;\n}\n\nexport const swapStateToPoolInfo = (state: LifinitySwapLayoutState): IPoolInfo => {\n  return {\n    amm: state.amm.toBase58(),\n    configAccount: state.configAccount.toBase58(),\n    feeAccount: state.feeAccount.toBase58(),\n    pythAccount: state.pythAccount.toBase58(),\n    pythPcAccount: state.pythPcAccount.toBase58(),\n    poolCoinMint: state.poolCoinMint.toBase58(),\n    poolCoinTokenAccount: state.poolCoinTokenAccount.toBase58(),\n    poolMint: state.poolMint.toBase58(),\n    poolPcTokenAccount: state.poolPcTokenAccount.toBase58(),\n    poolPcMint: state.poolPcMint.toBase58(),\n    // We don't use decimals at the moment, so default to 0, if we need to use it later, we can add it from API\n    poolCoinDecimal: 0,\n    poolPcDecimal: 0,\n    poolMintDecimal: 0,\n    pythBaseDecimal: 0,\n  };\n};\n\nexport const accountInfoLifinitySwapLayout = (\n  address: PublicKey,\n  accountInfo: AccountInfo<Buffer>,\n): LifinitySwapLayoutState => {\n  const programId = accountInfo.owner;\n  const decoded = LIFINITY_AMM_LAYOUT.decode(accountInfo.data);\n  const [authority] = findProgramAddressSync([address.toBuffer()], programId);\n\n  return {\n    programId,\n    authority,\n    amm: address,\n    tokenAMint: decoded.tokenAMint,\n    tokenBMint: decoded.tokenBMint,\n    poolMint: decoded.poolMint,\n    feeAccount: decoded.poolFeeAccount,\n    pythAccount: decoded.pythAccount,\n    pythPcAccount: decoded.pythPcAccount,\n    configAccount: decoded.configAccount,\n    poolCoinTokenAccount: decoded.tokenAAccount,\n    poolCoinMint: decoded.tokenAMint,\n    poolPcTokenAccount: decoded.tokenBAccount,\n    poolPcMint: decoded.tokenBMint,\n  };\n};\n","import { getCurveAmount, getParsedData, IAmmData, ICurveAmount, IPoolInfo, TradeDirection } from '@jup-ag/lifinity-sdk';\nimport { AccountInfo, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { AccountInfoMap, Amm, Quote, QuoteParams, SwapParams } from '../amm';\nimport { accountInfoLifinitySwapLayout, LifinitySwapLayoutState, swapStateToPoolInfo } from './swapLayout';\nimport { createLifinitySwapInstruction } from '../jupiterInstruction';\nimport Decimal from 'decimal.js';\n\nexport class LifinityAmm implements Amm {\n  id: string;\n  label = 'Lifinity' as const;\n  shouldPrefetch = false;\n  private swapState: LifinitySwapLayoutState;\n  private poolInfo: IPoolInfo;\n  private accountInfos: Array<{ publicKey: PublicKey; account: AccountInfo<Buffer> }> = [];\n\n  constructor(address: PublicKey, private ammAccountInfo: AccountInfo<Buffer>) {\n    this.id = address.toBase58();\n    this.swapState = accountInfoLifinitySwapLayout(address, ammAccountInfo);\n    this.poolInfo = swapStateToPoolInfo(this.swapState);\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [\n      this.swapState.poolCoinTokenAccount,\n      this.swapState.poolPcTokenAccount,\n      this.swapState.configAccount,\n      this.swapState.pythAccount,\n      this.swapState.pythPcAccount,\n    ];\n  }\n\n  update(accountInfoMap: AccountInfoMap): void {\n    this.getAccountsForUpdate().forEach((publicKey, idx) => {\n      const account = accountInfoMap.get(publicKey.toBase58());\n      if (account) {\n        this.accountInfos[idx] = {\n          publicKey,\n          account,\n        };\n      }\n    });\n  }\n\n  getQuote({ sourceMint, amount }: QuoteParams): Quote {\n    if (this.accountInfos.length !== this.getAccountsForUpdate().length) {\n      throw new Error('Accounts not loaded');\n    }\n\n    const tradeDirection = this.swapState.poolCoinMint.equals(sourceMint) ? TradeDirection.AtoB : TradeDirection.BtoA;\n    const { amm, pyth, pythPc, fees, coinBalance, pcBalance, config }: IAmmData = getParsedData(\n      [{ publicKey: this.swapState.amm, account: this.ammAccountInfo }, ...this.accountInfos],\n      this.poolInfo,\n    );\n\n    if (\n      !pyth.status.equals(1) ||\n      // pythPc can be undefined from the lifinity SDK\n      (pythPc && !pythPc.status.equals(1))\n    ) {\n      throw new Error('Pyth accounts are outdated');\n    }\n\n    const amountIn = new Decimal(amount);\n    const result: ICurveAmount = getCurveAmount(\n      amountIn,\n      pyth.publishSlot.toNumber(), // Use pyth publish slot to not throw error\n      amm,\n      fees,\n      coinBalance,\n      pcBalance,\n      config,\n      pyth,\n      pythPc,\n      tradeDirection,\n    );\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: result.amountSwapped.toNumber(),\n      feeAmount: result.fee.toNumber(),\n      feeMint: sourceMint.toBase58(),\n      feePct: result.feePercent.toNumber(),\n      priceImpactPct: result.priceImpact.toNumber(),\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams): TransactionInstruction[] {\n    return [\n      createLifinitySwapInstruction({\n        swapState: this.swapState,\n        ...swapParams,\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.swapState.poolCoinMint, this.swapState.poolPcMint];\n  }\n}\n","import { AccountInfo, PublicKey } from '@solana/web3.js';\nimport Decimal from 'decimal.js';\nimport { AccountInfoMap, Amm, Quote, QuoteParams, SwapParams } from '../amm';\nimport { createWhirlpoolSwapInstruction } from '../jupiterInstruction';\nimport { findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { WHIRLPOOL_PROGRAM_ID } from '../../constants';\nimport {\n  parseWhirlpool,\n  parseTickArray,\n  WhirlpoolData,\n  getSwapQuote,\n  getTickArrayPks,\n  TickArrayData,\n  getTickArrayPublicKeysForSwap,\n} from '@jup-ag/whirlpool-sdk';\nimport BN from 'bn.js';\n\nconst FEE_RATE_MUL_VALUE = 1_000_000;\n\nfunction fromX64(num: BN): Decimal {\n  return new Decimal(num.toString()).mul(Decimal.pow(2, -64));\n}\n\nfunction parseWhirlpoolSafe(address: PublicKey, data: Buffer) {\n  const whirlpoolData = parseWhirlpool(data);\n  if (!whirlpoolData) throw new Error(`Failed to parse whilpool ${address.toBase58()}`);\n  return whirlpoolData;\n}\n\nexport class WhirlpoolAmm implements Amm {\n  id: string;\n  label = 'Orca (Whirlpools)';\n  shouldPrefetch = true;\n\n  private whirlpoolData: WhirlpoolData;\n  private tickArrays: Map<string, TickArrayData> = new Map();\n  private tickPks: PublicKey[];\n  private oracle: PublicKey;\n  private feePct: number;\n\n  constructor(private address: PublicKey, whirlpoolAccountInfo: AccountInfo<Buffer>) {\n    this.id = address.toBase58();\n    this.whirlpoolData = parseWhirlpoolSafe(address, whirlpoolAccountInfo.data);\n\n    this.oracle = findProgramAddressSync([Buffer.from('oracle'), address.toBuffer()], WHIRLPOOL_PROGRAM_ID)[0];\n    this.feePct = new Decimal(this.whirlpoolData.feeRate).div(FEE_RATE_MUL_VALUE).toNumber();\n    this.tickPks = getTickArrayPks(address, this.whirlpoolData);\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    // The tickCurrentIndex is technically behind here, belonging to the last refresh\n    return [this.address, ...this.tickPks];\n  }\n\n  update(accountInfoMap: AccountInfoMap): void {\n    const whirlpoolAccountInfo = accountInfoMap.get(this.address.toBase58());\n    if (!whirlpoolAccountInfo) throw new Error(`Missing ${this.address.toBase58()}`);\n    this.whirlpoolData = parseWhirlpoolSafe(this.address, whirlpoolAccountInfo.data);\n    this.tickPks = getTickArrayPks(this.address, this.whirlpoolData);\n\n    this.tickArrays.clear();\n    for (const tickArrayPk of this.tickPks) {\n      const tickArrayAddress = tickArrayPk.toBase58();\n      const tickArrayAccountInfo = accountInfoMap.get(tickArrayAddress);\n      if (!tickArrayAccountInfo) {\n        // This can happen if we reach an uninitialized tick, and it is likely to occur right now\n        continue;\n      }\n      const tickArray = parseTickArray(tickArrayAccountInfo.data);\n      if (!tickArray) throw new Error(`Could not parse tick array ${tickArrayAddress}`);\n      this.tickArrays.set(tickArrayAddress, tickArray);\n    }\n  }\n\n  getQuote({ sourceMint, amount }: QuoteParams): Quote {\n    const swapQuote = getSwapQuote({\n      poolAddress: this.address,\n      whirlpool: this.whirlpoolData,\n      tickArrays: this.tickArrays,\n      tokenMint: sourceMint,\n      tokenAmount: new BN(amount.toString()),\n      isInput: true,\n      // slippageTolerance,\n    });\n\n    const inAmount = Number(swapQuote.amountIn.toString());\n    const feeAmount = Math.floor(this.feePct * inAmount);\n\n    const quotePrice = swapQuote.aToB\n      ? new Decimal(swapQuote.amountOut.toString()).div(swapQuote.amountIn.toString())\n      : new Decimal(swapQuote.amountIn.toString()).div(swapQuote.amountOut.toString());\n\n    const currentPrice = fromX64(this.whirlpoolData.sqrtPrice).pow(2);\n    const priceImpactPct = currentPrice.minus(quotePrice).div(currentPrice).abs().toNumber();\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount,\n      outAmount: Number(swapQuote.amountOut.toString()),\n      feeAmount,\n      feeMint: sourceMint.toBase58(),\n      feePct: this.feePct,\n      priceImpactPct: Number(priceImpactPct),\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams) {\n    const aToB = swapParams.sourceMint.equals(this.whirlpoolData.tokenMintA);\n\n    const [tickArray0, tickArray1, tickArray2] = getTickArrayPublicKeysForSwap(\n      this.whirlpoolData.tickCurrentIndex,\n      this.whirlpoolData.sqrtPrice,\n      this.whirlpoolData.tickSpacing,\n      this.address,\n      this.tickArrays,\n      WHIRLPOOL_PROGRAM_ID,\n      aToB,\n    );\n\n    return [\n      createWhirlpoolSwapInstruction({\n        additionalArgs: {\n          aToB,\n          whirlpool: this.address,\n          tickArray0,\n          tickArray1,\n          tickArray2,\n          oracle: this.oracle,\n          ...this.whirlpoolData,\n        },\n        ...swapParams,\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.whirlpoolData.tokenMintA, this.whirlpoolData.tokenMintB];\n  }\n}\n","// TODO: Move this to SDK rather than being maintained by us\nimport {\n  CyclosCore,\n  buildTick,\n  generateBitmapWord,\n  nextInitializedBit,\n  tickPosition,\n  TickDataProvider,\n  PoolVars,\n  TICK_SEED,\n  u32ToSeed,\n  BITMAP_SEED,\n  TickMath,\n  u16ToSeed,\n} from '@jup-ag/cykura-sdk';\nimport * as anchor from '@project-serum/anchor';\nimport { BN, IdlAccounts } from '@project-serum/anchor';\nimport { findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { AccountInfo, PublicKey } from '@solana/web3.js';\nimport JSBI from 'jsbi';\n\nexport type TickBitmapState = IdlAccounts<CyclosCore>['tickBitmapState'];\nexport type TickState = IdlAccounts<CyclosCore>['tickState'];\n\nexport class SolanaTickDataProvider implements TickDataProvider {\n  program: anchor.Program<CyclosCore>;\n  pool: PoolVars;\n\n  bitmapCache: Map<\n    number,\n    {\n      address: PublicKey;\n      word: anchor.BN;\n    }\n  >;\n\n  tickCache: Map<\n    number,\n    {\n      address: PublicKey;\n      liquidityNet: JSBI;\n    }\n  >;\n\n  accountsToFetch: { bitmaps: PublicKey[]; ticks: PublicKey[] } = { bitmaps: [], ticks: [] };\n\n  constructor(program: anchor.Program<CyclosCore>, pool: PoolVars) {\n    this.program = program;\n    this.pool = pool;\n    this.bitmapCache = new Map();\n    this.tickCache = new Map();\n  }\n\n  /**\n   * Caches ticks and bitmap accounts near the current price\n   * @param tickCurrent The current pool tick\n   * @param tickSpacing The pool tick spacing\n   */\n  async eagerLoadCache(tickCurrent: number, tickSpacing: number) {\n    // fetch 10 bitmaps on each side in a single fetch. Find active ticks and read them together\n    const compressed = JSBI.toNumber(JSBI.divide(JSBI.BigInt(tickCurrent), JSBI.BigInt(tickSpacing)));\n    const { wordPos } = tickPosition(compressed);\n\n    try {\n      const bitmapsToFetch = [];\n      const { wordPos: WORD_POS_MIN } = tickPosition(Math.floor(TickMath.MIN_TICK / tickSpacing));\n      const { wordPos: WORD_POS_MAX } = tickPosition(Math.floor(TickMath.MAX_TICK / tickSpacing));\n      const minWord = Math.max(wordPos - 10, WORD_POS_MIN);\n      const maxWord = Math.min(wordPos + 10, WORD_POS_MAX);\n      for (let i = minWord; i < maxWord; i++) {\n        bitmapsToFetch.push(this.getBitmapAddressSync(i));\n      }\n\n      const fetchedBitmaps = (await this.program.account.tickBitmapState.fetchMultiple(\n        bitmapsToFetch,\n      )) as (TickBitmapState | null)[];\n\n      const tickAddresses = [];\n      for (let i = 0; i < maxWord - minWord; i++) {\n        const currentWordPos = i + minWord;\n        const wordArray = fetchedBitmaps[i]?.word;\n        const word = wordArray ? generateBitmapWord(wordArray) : new BN(0);\n        this.bitmapCache.set(currentWordPos, {\n          address: bitmapsToFetch[i],\n          word,\n        });\n        if (word && !word.eqn(0)) {\n          for (let j = 0; j < 256; j++) {\n            if (word.shrn(j).and(new BN(1)).eqn(1)) {\n              const tick = ((currentWordPos << 8) + j) * tickSpacing;\n              const tickAddress = this.getTickAddressSync(tick);\n              tickAddresses.push(tickAddress);\n            }\n          }\n        }\n      }\n\n      const fetchedTicks = (await this.program.account.tickState.fetchMultiple(tickAddresses)) as (TickState | null)[];\n      for (const i in tickAddresses) {\n        const fetchedTick = fetchedTicks[i];\n        if (!fetchedTick) continue;\n\n        const { tick, liquidityNet } = fetchedTick;\n        this.tickCache.set(tick, {\n          address: tickAddresses[i],\n          liquidityNet: JSBI.BigInt(liquidityNet),\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  /**\n   * Return accounts to cache and returns early if there is insufficient data\n   * @param tickCurrent The current pool tick\n   * @param tickSpacing The pool tick spacing\n   */\n  lazyLoadAccountsToCache(tickCurrent: number, tickSpacing: number): PublicKey[] {\n    // fetch 10 bitmaps on each side in a single fetch. Find active ticks and read them together\n    const compressed = JSBI.toNumber(JSBI.divide(JSBI.BigInt(tickCurrent), JSBI.BigInt(tickSpacing)));\n    const { wordPos } = tickPosition(compressed);\n\n    const bitmapsToFetch: PublicKey[] = [];\n    const bitmaps: ({ address: PublicKey; word: anchor.BN } | undefined)[] = [];\n    const { wordPos: WORD_POS_MIN } = tickPosition(Math.floor(TickMath.MIN_TICK / tickSpacing));\n    const { wordPos: WORD_POS_MAX } = tickPosition(Math.floor(TickMath.MAX_TICK / tickSpacing));\n    const minWord = Math.max(wordPos - 10, WORD_POS_MIN);\n    const maxWord = Math.min(wordPos + 10, WORD_POS_MAX);\n    for (let i = minWord; i < maxWord; i++) {\n      bitmapsToFetch.push(this.getBitmapAddressSync(i));\n      const bitmap = this.bitmapCache.get(i);\n      bitmaps.push(bitmap);\n    }\n\n    const tickAddressesToFetch = [];\n    for (let i = 0; i < maxWord - minWord; i++) {\n      const currentWordPos = i + minWord;\n      // We might not have the bitmap yet in the first iteration\n      const word = bitmaps[i]?.word ?? new BN(0);\n      this.bitmapCache.set(currentWordPos, {\n        address: bitmapsToFetch[i],\n        word,\n      });\n      if (word && !word.eqn(0)) {\n        for (let j = 0; j < 256; j++) {\n          if (word.shrn(j).and(new BN(1)).eqn(1)) {\n            const tick = ((currentWordPos << 8) + j) * tickSpacing;\n            const tickAddress = this.getTickAddressSync(tick);\n            tickAddressesToFetch.push(tickAddress);\n          }\n        }\n      }\n    }\n\n    this.accountsToFetch = { bitmaps: bitmapsToFetch, ticks: tickAddressesToFetch };\n    return [...bitmapsToFetch, ...tickAddressesToFetch];\n  }\n\n  getTick(tick: number): {\n    address: anchor.web3.PublicKey;\n    liquidityNet: JSBI;\n  } {\n    let savedTick = this.tickCache.get(tick);\n    if (!savedTick) {\n      throw new Error('Tick not cached');\n    }\n\n    return {\n      address: savedTick.address,\n      liquidityNet: savedTick.liquidityNet,\n    };\n  }\n\n  async getTickAddress(tick: number): Promise<anchor.web3.PublicKey> {\n    return this.getTickAddressSync(tick);\n  }\n\n  getTickAddressSync(tick: number): anchor.web3.PublicKey {\n    return findProgramAddressSync(\n      [TICK_SEED, this.pool.token0.toBuffer(), this.pool.token1.toBuffer(), u32ToSeed(this.pool.fee), u32ToSeed(tick)],\n      this.program.programId,\n    )[0];\n  }\n\n  async getBitmapAddress(wordPos: number): Promise<anchor.web3.PublicKey> {\n    return this.getBitmapAddressSync(wordPos);\n  }\n\n  getBitmapAddressSync(wordPos: number): anchor.web3.PublicKey {\n    return findProgramAddressSync(\n      [\n        BITMAP_SEED,\n        this.pool.token0.toBuffer(),\n        this.pool.token1.toBuffer(),\n        u32ToSeed(this.pool.fee),\n        u16ToSeed(wordPos),\n      ],\n      this.program.programId,\n    )[0];\n  }\n\n  /**\n   * Fetches the cached bitmap for the word\n   * @param wordPos\n   */\n  getBitmap(wordPos: number): {\n    address: anchor.web3.PublicKey;\n    word: anchor.BN;\n  } {\n    let savedBitmap = this.bitmapCache.get(wordPos);\n    if (!savedBitmap) {\n      throw new Error('Bitmap not cached');\n    }\n\n    return savedBitmap;\n  }\n\n  /**\n   * Finds the next initialized tick in the given word. Fetched bitmaps are saved in a\n   * cache for quicker lookups in future.\n   * @param tick The current tick\n   * @param lte Whether to look for a tick less than or equal to the current one, or a tick greater than or equal to\n   * @param tickSpacing The tick spacing for the pool\n   * @returns\n   */\n  nextInitializedTickWithinOneWord(\n    tick: number,\n    lte: boolean,\n    tickSpacing: number,\n  ): [number, boolean, number, number, PublicKey] {\n    let compressed = JSBI.toNumber(JSBI.divide(JSBI.BigInt(tick), JSBI.BigInt(tickSpacing)));\n    if (tick < 0 && tick % tickSpacing !== 0) {\n      compressed -= 1;\n    }\n    if (!lte) {\n      compressed += 1;\n    }\n\n    const { wordPos, bitPos } = tickPosition(compressed);\n    const cachedBitmap = this.getBitmap(wordPos);\n\n    const { next: nextBit, initialized } = nextInitializedBit(cachedBitmap.word, bitPos, lte);\n    const nextTick = buildTick(wordPos, nextBit, tickSpacing);\n    return [nextTick, initialized, wordPos, bitPos, cachedBitmap.address];\n  }\n\n  // Change this to be a blind decoder rather than decode what we know\n  updateCachedAccountInfos(accountInfoMap: Map<string, AccountInfo<Buffer> | null>) {\n    for (const bitmapAddress of this.accountsToFetch.bitmaps) {\n      const bitmapAccountInfo = accountInfoMap.get(bitmapAddress.toBase58());\n      if (bitmapAccountInfo) {\n        const tickBitmapState = this.program.coder.accounts.decode<TickBitmapState>(\n          'tickBitmapState',\n          bitmapAccountInfo.data,\n        );\n\n        this.bitmapCache.set(tickBitmapState.wordPos, {\n          address: bitmapAddress,\n          word: generateBitmapWord(tickBitmapState.word),\n        });\n      }\n    }\n\n    for (const tickAddress of this.accountsToFetch.ticks) {\n      const tickStateAccountInfo = accountInfoMap.get(tickAddress.toBase58());\n      if (tickStateAccountInfo) {\n        const tickState = this.program.coder.accounts.decode<TickState>('tickState', tickStateAccountInfo.data);\n        this.tickCache.set(tickState.tick, {\n          address: tickAddress,\n          liquidityNet: JSBI.BigInt(tickState.liquidityNet),\n        });\n      }\n    }\n  }\n}\n","import { AccountInfo, AccountMeta, Connection, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport JSBI from 'jsbi';\nimport * as anchor from '@project-serum/anchor';\nimport { AccountInfoMap, Amm, Quote, QuoteParams, SwapParams } from '../amm';\nimport { Pool as CykuraPool, CyclosCore, IDL, OBSERVATION_SEED, u32ToSeed, u16ToSeed } from '@jup-ag/cykura-sdk';\nimport { CurrencyAmount, Token } from '@jup-ag/cykura-sdk-core';\nimport { IdlAccounts, Wallet } from '@project-serum/anchor';\nimport { SolanaTickDataProvider } from './solanaTickDataProvider';\nimport { CYKURA_PROGRAM_ID } from '../../constants';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { createCykuraSwapInstruction } from '../jupiterInstruction';\nimport { toDecimal } from '@jup-ag/math';\n\nexport type PoolState = IdlAccounts<CyclosCore>['poolState'];\n\nconst FEE_DENOMINATOR = 1_000_000;\n\nconst provider = new anchor.Provider(null as unknown as Connection, null as unknown as Wallet, {\n  skipPreflight: false,\n});\nconst CYCLOS_CORE = new anchor.Program<CyclosCore>(IDL, CYKURA_PROGRAM_ID, provider);\n\nexport class CykuraAmm implements Amm {\n  label = 'Cykura' as const;\n  id: string;\n  shouldPrefetch = true;\n  private poolState: PoolState;\n  private pool: CykuraPool;\n  private tickDataProvider: SolanaTickDataProvider;\n  private tokens: { token0: Token; token1: Token };\n  public vaults: { vault0: PublicKey; vault1: PublicKey };\n  private swapAccountMetas: AccountMeta[] = [];\n  private feePct: number;\n\n  constructor(private address: PublicKey, accountInfoOrPoolState: AccountInfo<Buffer> | PoolState) {\n    this.id = address.toBase58();\n    let poolState: PoolState;\n    if ('data' in accountInfoOrPoolState) {\n      poolState = CYCLOS_CORE.coder.accounts.decode<PoolState>('poolState', accountInfoOrPoolState.data);\n    } else {\n      poolState = accountInfoOrPoolState;\n    }\n\n    this.poolState = poolState;\n\n    const { token0, token1, fee, sqrtPriceX32, liquidity, tick } = this.poolState;\n\n    this.tickDataProvider = new SolanaTickDataProvider(CYCLOS_CORE, {\n      token0,\n      token1,\n      fee,\n    });\n\n    this.tokens = {\n      token0: new Token(101, token0, 0, '', ''),\n      token1: new Token(101, token1, 0, '', ''),\n    };\n\n    this.pool = new CykuraPool(\n      this.tokens.token0,\n      this.tokens.token1,\n      fee,\n      JSBI.BigInt(sqrtPriceX32.toString()),\n      JSBI.BigInt(liquidity.toString()),\n      tick,\n      this.tickDataProvider,\n    );\n\n    this.vaults = {\n      vault0: findProgramAddressSync(\n        [this.address.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), token0.toBuffer()],\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n      )[0],\n      vault1: findProgramAddressSync(\n        [this.address.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), token1.toBuffer()],\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n      )[0],\n    };\n\n    this.feePct = this.poolState.fee / FEE_DENOMINATOR;\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [\n      this.address,\n      ...this.tickDataProvider.lazyLoadAccountsToCache(this.pool.tickCurrent, this.pool.tickSpacing),\n    ];\n  }\n\n  update(accountInfoMap: AccountInfoMap) {\n    const poolAccountInfo = accountInfoMap.get(this.address.toBase58());\n    if (!poolAccountInfo) {\n      throw new Error(`Could not find poolAccountInfo ${this.address.toBase58()}`);\n    }\n    this.poolState = CYCLOS_CORE.coder.accounts.decode<PoolState>('poolState', poolAccountInfo.data);\n    const { fee, sqrtPriceX32, liquidity, tick } = this.poolState;\n    this.pool = new CykuraPool(\n      this.tokens.token0,\n      this.tokens.token1,\n      fee,\n      JSBI.BigInt(sqrtPriceX32.toString()),\n      JSBI.BigInt(liquidity.toString()),\n      tick,\n      this.tickDataProvider,\n    );\n\n    this.tickDataProvider.updateCachedAccountInfos(accountInfoMap);\n  }\n\n  getQuote({ sourceMint, amount }: QuoteParams): Quote {\n    const inputToken = sourceMint.equals(this.poolState.token0) ? this.tokens.token0 : this.tokens.token1;\n    const [currentOutAmount, newPool, swapAccountMetas] = this.pool.getOutputAmount(\n      CurrencyAmount.fromRawAmount(inputToken, JSBI.BigInt(amount)),\n    );\n    this.swapAccountMetas = swapAccountMetas;\n\n    const priceImpactDecimal = toDecimal(JSBI.subtract(this.pool.sqrtRatioX32, newPool.sqrtRatioX32)).div(\n      this.pool.sqrtRatioX32.toString(),\n    );\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: JSBI.toNumber(currentOutAmount.quotient),\n      // Might not be spot on but avoids many conversions\n      feeAmount: Math.floor((amount * this.poolState.fee) / FEE_DENOMINATOR),\n      feeMint: sourceMint.toBase58(),\n      feePct: this.feePct,\n      priceImpactPct: priceImpactDecimal.toNumber(),\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams): TransactionInstruction[] {\n    const [inputVault, outputVault] = swapParams.sourceMint.equals(this.poolState.token0)\n      ? [this.vaults.vault0, this.vaults.vault1]\n      : [this.vaults.vault1, this.vaults.vault0];\n\n    const lastObservationState = findProgramAddressSync(\n      [\n        OBSERVATION_SEED,\n        this.poolState.token0.toBuffer(),\n        this.poolState.token1.toBuffer(),\n        u32ToSeed(this.poolState.fee),\n        u16ToSeed(this.poolState.observationIndex),\n      ],\n      CYKURA_PROGRAM_ID,\n    )[0];\n\n    const nextObservationState = findProgramAddressSync(\n      [\n        OBSERVATION_SEED,\n        this.poolState.token0.toBuffer(),\n        this.poolState.token1.toBuffer(),\n        u32ToSeed(this.poolState.fee),\n        u16ToSeed((this.poolState.observationIndex + 1) % this.poolState.observationCardinalityNext),\n      ],\n      CYKURA_PROGRAM_ID,\n    )[0];\n\n    const additionalArgs = {\n      poolAddress: this.address,\n      inputVault,\n      outputVault,\n      nextObservationState,\n      lastObservationState,\n      swapAccountMetas: this.swapAccountMetas,\n    };\n    return [createCykuraSwapInstruction({ ...swapParams, additionalArgs })];\n  }\n\n  get reserveTokenMints() {\n    return [this.poolState.token0, this.poolState.token1];\n  }\n}\n","import { AccountInfo, PublicKey } from '@solana/web3.js';\nimport {\n  ALDRIN_SWAP_V2_PROGRAM_ID,\n  ALDRIN_SWAP_PROGRAM_ID,\n  DEVNET_SERUM_DEX_PROGRAM,\n  MAINNET_SERUM_DEX_PROGRAM,\n  RAYDIUM_AMM_V4_PROGRAM_ID,\n  CROPPER_PROGRAM_ID,\n  CREMA_PROGRAM_ID,\n  SENCHA_PROGRAM_ID,\n  MERCURIAL_SWAP_PROGRAM_ID,\n  LIFINITY_PROGRAM_ID,\n  WHIRLPOOL_PROGRAM_ID,\n  CYKURA_PROGRAM_ID,\n} from '../constants';\nimport { Amm } from './amm';\nimport { SerumMarket, StableSwap } from './market';\nimport { SWAP_PROGRAM_ID as SABER_SWAP_PROGRAM_ID } from '@saberhq/stableswap-sdk';\nimport { SaberAmm } from './saber/saberAmm';\nimport { SerumAmm } from './serum/serumAmm';\nimport { findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { AldrinAmm } from './aldrin/aldrinAmm';\nimport { PROGRAM_ID_TO_LABEL } from './spl-token-swap/splTokenSwapPools';\nimport { SplTokenSwapAmm } from './spl-token-swap/splTokenSwapAmm';\nimport { MercurialAmm } from './mercurial/mercurialAmm';\nimport { RaydiumAmm } from './raydium/raydiumAmm';\nimport { CropperAmm } from './cropper/cropperAmm';\nimport { CremaAmm } from './crema/cremaAmm';\nimport { SenchaAmm } from './sencha/senchaAmm';\nimport { LifinityAmm } from './lifinity/lifinityAmm';\nimport { WhirlpoolAmm } from './whirlpool/whirlpoolAmm';\nimport { CykuraAmm } from './cykura/cykuraAmm';\n\nexport function ammFactory(address: PublicKey, accountInfo: AccountInfo<Buffer>, params?: any): Amm | undefined {\n  const programId = new PublicKey(accountInfo.owner);\n\n  if (programId.equals(MAINNET_SERUM_DEX_PROGRAM) || programId.equals(DEVNET_SERUM_DEX_PROGRAM)) {\n    const decoded = SerumMarket.getLayout(programId).decode(accountInfo.data);\n    if (!decoded.accountFlags.initialized || !decoded.accountFlags.market) {\n      throw new Error('Invalid market');\n    }\n    const serumMarket = new SerumMarket(decoded, 0, 0, {}, programId);\n    return new SerumAmm(serumMarket);\n  } else if (programId.equals(RAYDIUM_AMM_V4_PROGRAM_ID)) {\n    const raydiumAmm = new RaydiumAmm(address, accountInfo, params);\n    if (raydiumAmm.status === 1) {\n      return raydiumAmm;\n    }\n  } else if (programId.equals(MERCURIAL_SWAP_PROGRAM_ID)) {\n    return new MercurialAmm(address, accountInfo, params);\n  } else if (programId.equals(SABER_SWAP_PROGRAM_ID)) {\n    const stableSwap = StableSwap.loadWithData(\n      address,\n      accountInfo.data,\n      findProgramAddressSync([address.toBuffer()], SABER_SWAP_PROGRAM_ID)[0],\n    );\n\n    if (stableSwap.state.isPaused || !stableSwap.state.isInitialized) return;\n\n    return new SaberAmm(stableSwap);\n  } else if (programId.equals(CREMA_PROGRAM_ID)) {\n    return new CremaAmm(address, accountInfo);\n  } else if (programId.equals(ALDRIN_SWAP_PROGRAM_ID) || programId.equals(ALDRIN_SWAP_V2_PROGRAM_ID)) {\n    return new AldrinAmm(address, accountInfo, params);\n  } else if ([...PROGRAM_ID_TO_LABEL.keys()].includes(programId.toBase58())) {\n    const label = PROGRAM_ID_TO_LABEL.get(accountInfo.owner.toBase58()) ?? 'Unknown';\n    return new SplTokenSwapAmm(address, accountInfo, label);\n  } else if (programId.equals(CROPPER_PROGRAM_ID)) {\n    return new CropperAmm(address, accountInfo, params);\n  } else if (programId.equals(SENCHA_PROGRAM_ID)) {\n    const senchaAmm = new SenchaAmm(address, accountInfo);\n    if (senchaAmm.isPaused) return;\n    return senchaAmm;\n  } else if (programId.equals(LIFINITY_PROGRAM_ID)) {\n    return new LifinityAmm(address, accountInfo);\n  } else if (programId.equals(WHIRLPOOL_PROGRAM_ID)) {\n    return new WhirlpoolAmm(address, accountInfo);\n  } else if (programId.equals(CYKURA_PROGRAM_ID)) {\n    return new CykuraAmm(address, accountInfo);\n  }\n  // Not supported by frontend\n  return;\n}\n","import { AccountInfo, Connection, PublicKey } from '@solana/web3.js';\nimport { isValidRoute, MarketInfo } from './market';\nimport { WRAPPED_SOL_MINT } from '../constants';\nimport { RaydiumAmm } from './raydium/raydiumAmm';\nimport fetch from 'cross-fetch';\nimport { TokenRouteSegments } from './types';\nimport { Amm, prefetchAmms } from './amm';\nimport { SerumAmm } from './serum/serumAmm';\nimport { ammFactory } from './ammFactory';\nimport { getSaberWrappedDecimalsAmms, SaberAddDecimalsAmm } from './saber/saberAddDecimalsAmm';\nimport { SplitTradeAmm } from './split-trade/splitTradeAmm';\nimport { getTwoPermutations } from '../utils/getTwoPermutations';\nimport { chunkedGetMultipleAccountInfos } from '../utils/chunkedGetMultipleAccountInfos';\n\nexport interface TransactionFeeInfo {\n  signatureFee: number;\n  openOrdersDeposits: number[];\n  ataDeposits: number[];\n  /* Overall amount that will be deducted from user wallet after the swap */\n  totalFeeAndDeposits: number;\n  /* Amount for fee, deposits and temporary token accounts */\n  minimumSOLForTransaction: number;\n}\n\nexport interface RouteInfo {\n  marketInfos: MarketInfo[];\n  inAmount: number;\n  outAmount: number;\n  outAmountWithSlippage: number;\n  priceImpactPct: number;\n  getDepositAndFee: () => Promise<TransactionFeeInfo | undefined>;\n}\n\ntype MarketsCache = Array<\n  Omit<AccountInfo<Buffer>, 'data' | 'owner'> & {\n    data: [string, 'base64'];\n    owner: string;\n    pubkey: string;\n  }\n>;\n\ntype KeyedAccountInfo = AccountInfo<Buffer> & {\n  pubkey: PublicKey;\n  // api can pass some extra params\n  params?: any;\n};\n\nexport const fetchMarketCache = async (url: string) => {\n  const marketsCache = (await (await fetch(url)).json()) as MarketsCache;\n  return marketsCache;\n};\n\n/** For testing purposes when api does not have the new pools */\nexport async function fetchExtraKeyedAccountInfos(connection: Connection, pks: PublicKey[]) {\n  const extraKeyedAccountInfos = (\n    await chunkedGetMultipleAccountInfos(\n      connection,\n      pks.map((item) => item.toBase58()),\n    )\n  ).map((item, index) => {\n    const pubkey = pks[index];\n    if (!item) throw new Error(`Failed to fetch pool ${pubkey.toBase58()}`);\n    return { pubkey, ...item };\n  });\n  return extraKeyedAccountInfos;\n}\n\nexport async function getAllAmms(connection: Connection, marketsCache: MarketsCache): Promise<Amm[]> {\n  const marketCacheToAccountInfo = (marketsCache: MarketsCache): Array<KeyedAccountInfo> => {\n    return marketsCache.map((market) => {\n      const {\n        data: [accountInfo, format],\n        pubkey,\n        ...rest\n      } = market;\n      return {\n        ...rest,\n        pubkey: new PublicKey(pubkey),\n        data: Buffer.from(accountInfo, format),\n        owner: new PublicKey(rest.owner),\n      };\n    });\n  };\n\n  const marketKeyedAccountInfos = marketCacheToAccountInfo(marketsCache);\n\n  // this is used for development\n  const extraKeys: Array<PublicKey> = [];\n\n  if (extraKeys.length) {\n    const extraKeyedAccountInfos = await fetchExtraKeyedAccountInfos(connection, extraKeys);\n    marketKeyedAccountInfos.push(...extraKeyedAccountInfos);\n  }\n\n  const amms = marketKeyedAccountInfos.reduce((acc, keyedAccountInfo) => {\n    const amm = ammFactory(keyedAccountInfo.pubkey, keyedAccountInfo, keyedAccountInfo.params);\n    // Amm might not be recognized by the current version of the frontend\n    // or be in a state we don't want\n    if (amm) {\n      acc.push(amm);\n    }\n    return acc;\n  }, new Array<Amm>());\n\n  await prefetchAmms(\n    amms.filter((amm) => amm.shouldPrefetch),\n    connection,\n  );\n\n  amms.push(...getSaberWrappedDecimalsAmms());\n\n  return amms;\n}\n\nexport function ammCrossProtocolPairs(arr: Amm[], callback: (a: Amm, b: Amm) => void) {\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      // Don't pair amm with same label\n      if (arr[i].label !== arr[j].label) {\n        callback(arr[i], arr[j]);\n      }\n    }\n  }\n}\n\nexport function getTokenRouteSegments(amms: Amm[]): TokenRouteSegments {\n  const tokenRouteSegments = new Map<string, Map<string, Amm[]>>();\n\n  amms.forEach((amm) => {\n    const reserveTokenMintPermutations = getTwoPermutations(amm.reserveTokenMints);\n    reserveTokenMintPermutations.forEach(([firstReserveMint, secondReserveMint]) => {\n      addSegment(firstReserveMint.toBase58(), secondReserveMint.toBase58(), amm, tokenRouteSegments);\n    });\n  });\n\n  return tokenRouteSegments;\n}\n\nfunction addSegment(inMint: string, outMint: string, amm: Amm, tokenRouteSegments: TokenRouteSegments) {\n  let segments = tokenRouteSegments.get(inMint);\n\n  if (!segments) {\n    segments = new Map<string, Amm[]>([[outMint, []]]);\n    tokenRouteSegments.set(inMint, segments);\n  }\n\n  let amms = segments.get(outMint);\n  if (!amms) {\n    amms = [];\n    segments.set(outMint, amms);\n  }\n\n  amms.push(amm);\n}\n\nexport type Route = {\n  amms: Amm[];\n  mints: PublicKey[];\n};\n\n/*\n * Construct TokenRouteSegment that is only used for the selected inputMint and outputMint\n * Example:\n *   SOL => USDC, the map would consist of\n *     - SOL => USDC => Amm[]\n *     - SOL => USDT => Amm[]\n *     - USDT => SOL => Amm[]\n */\nexport function computeInputRouteSegments({\n  inputMint,\n  outputMint,\n  tokenRouteSegments,\n  intermediateTokens,\n}: {\n  inputMint: string;\n  outputMint: string;\n  tokenRouteSegments: TokenRouteSegments;\n  intermediateTokens?: string[];\n}): TokenRouteSegments {\n  const inputRouteSegments: TokenRouteSegments = new Map();\n\n  const inputSegment = tokenRouteSegments.get(inputMint);\n  const outputSegment = tokenRouteSegments.get(outputMint);\n\n  if (inputSegment && outputSegment) {\n    const inputInnerMap = new Map<string, Amm[]>();\n    const outputInnerMap = new Map<string, Amm[]>();\n\n    for (let [outMint, amms] of inputSegment.entries()) {\n      if (outMint === outputMint) {\n        inputInnerMap.set(outMint, amms);\n        outputInnerMap.set(inputMint, amms);\n        continue;\n      }\n\n      if (intermediateTokens && !intermediateTokens.includes(outMint)) {\n        continue;\n      }\n      const intersectionAmms = outputSegment.get(outMint);\n      if (intersectionAmms) {\n        inputRouteSegments.set(\n          outMint,\n          new Map([\n            [inputMint, amms],\n            [outputMint, intersectionAmms],\n          ]),\n        );\n        inputInnerMap.set(outMint, amms);\n        outputInnerMap.set(outMint, intersectionAmms);\n      }\n    }\n    inputRouteSegments.set(inputMint, inputInnerMap);\n    inputRouteSegments.set(outputMint, outputInnerMap);\n  }\n\n  return inputRouteSegments;\n}\n\nexport function computeRouteMap(\n  tokenRouteSegments: TokenRouteSegments,\n  intermediateTokens?: string[],\n  onlyDirectRoutes?: boolean,\n): Map<string, string[]> {\n  const routeMap = new Map<string, string[]>();\n\n  for (const [tokenMint, firstLevelOutputs] of tokenRouteSegments) {\n    const validOutputMints = new Set<string>();\n\n    for (const [firstLevelOutputMint, firstLevelAmms] of firstLevelOutputs) {\n      validOutputMints.add(firstLevelOutputMint);\n\n      if (onlyDirectRoutes) {\n        continue;\n      }\n      // add the single level output as possible valid mints as well\n      const secondLevelOutputs = tokenRouteSegments.get(firstLevelOutputMint) ?? [];\n      for (const [secondLevelOutputMint, secondLevelAmms] of secondLevelOutputs) {\n        // Prevent output mint == input mint when routing\n        if (secondLevelOutputMint === tokenMint) {\n          continue;\n        }\n\n        // if intermediateTokens is specified and it doesnt include in the intermediateTokens, skip it\n        if (intermediateTokens && !intermediateTokens.includes(firstLevelOutputMint)) {\n          continue;\n        }\n\n        for (const firstLevelAmm of firstLevelAmms) {\n          for (const secondLevelAmm of secondLevelAmms) {\n            if (isValidRoute(firstLevelAmm, secondLevelAmm)) {\n              validOutputMints.add(secondLevelOutputMint);\n              break;\n            }\n          }\n        }\n      }\n    }\n    routeMap.set(tokenMint, Array.from(validOutputMints));\n  }\n\n  return routeMap;\n}\n\ninterface SplitTradeRequiredParams {\n  hasSerumOpenOrderInstruction: boolean;\n}\n\nexport function isSplitSetupRequired(\n  marketInfos: MarketInfo[],\n  { hasSerumOpenOrderInstruction }: SplitTradeRequiredParams,\n): { needSetup: boolean; needCleanup: boolean } {\n  let firstAmm: Amm;\n  let secondAmm: Amm;\n\n  if (marketInfos.length === 1) {\n    const amm = marketInfos[0].amm;\n    if (amm instanceof SplitTradeAmm) {\n      firstAmm = amm.firstAmm;\n      secondAmm = amm.secondAmm;\n    } else {\n      return { needSetup: false, needCleanup: false };\n    }\n  } else {\n    [firstAmm, secondAmm] = marketInfos.map((marketInfo) => marketInfo.amm);\n  }\n\n  if (firstAmm instanceof RaydiumAmm || secondAmm instanceof RaydiumAmm) {\n    return { needSetup: true, needCleanup: true };\n  } else if (firstAmm instanceof SerumAmm && secondAmm instanceof SerumAmm) {\n    return { needSetup: true, needCleanup: true };\n  } else if (hasSerumOpenOrderInstruction) {\n    return { needSetup: true, needCleanup: false };\n  }\n\n  return { needSetup: false, needCleanup: false };\n}\n\n// We cannot add platform fee to all possible routing due to transaction size limit\nexport function isPlatformFeeSupported(amms: Amm[]): boolean {\n  if (amms.length > 1) {\n    const [firstMarket, secondMarket] = amms;\n\n    if (firstMarket instanceof RaydiumAmm && secondMarket instanceof RaydiumAmm) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function getRouteInfoUniqueId(routeInfo: RouteInfo) {\n  return routeInfo.marketInfos.map((marketInfo) => `${marketInfo.amm.id}-${marketInfo.inputMint}`).join('-');\n}\n","import { Signer, Transaction, TransactionInstruction, TransactionSignature } from '@solana/web3.js';\n\nexport const getEmptyInstruction: () => Instruction = () => ({\n  instructions: [],\n  cleanupInstructions: [],\n  signers: [],\n});\n\nexport type Instruction = {\n  instructions: TransactionInstruction[];\n  cleanupInstructions: TransactionInstruction[];\n  signers: Signer[];\n};\n\nexport type TransactionPayload = {\n  transaction: Transaction;\n  signers: Signer[];\n  execute: () => Promise<TransactionSignature>;\n};\n","import { deserializeAccount } from '@mercurial-finance/optimist';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, Token, TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { Connection, PublicKey, SystemProgram, TransactionInstruction } from '@solana/web3.js';\nimport { WRAPPED_SOL_MINT } from '../constants';\nimport { getEmptyInstruction, Instruction } from './instruction';\nimport { Owner } from './Owner';\n\n// Leverage the existing ATA when present\nexport async function createAndCloseWSOLAccount({\n  connection,\n  amount,\n  owner: { publicKey },\n}: {\n  connection: Connection;\n  owner: Owner;\n  amount: number;\n}): Promise<Instruction & { address: PublicKey }> {\n  const result = getEmptyInstruction();\n  result.instructions = [];\n\n  const toAccount = await Token.getAssociatedTokenAddress(\n    ASSOCIATED_TOKEN_PROGRAM_ID,\n    TOKEN_PROGRAM_ID,\n    WRAPPED_SOL_MINT,\n    publicKey,\n    true,\n  );\n\n  const info = await connection.getAccountInfo(toAccount);\n\n  if (info === null) {\n    result.instructions.push(\n      createAssociatedTokenAccountInstruction(publicKey, toAccount, publicKey, WRAPPED_SOL_MINT),\n    );\n  }\n\n  // Fund account and sync\n  result.instructions.push(\n    SystemProgram.transfer({\n      fromPubkey: publicKey,\n      toPubkey: toAccount,\n      lamports: amount,\n    }),\n  );\n  result.instructions.push(\n    // This is not exposed by the types, but indeed it exists\n    (Token as any).createSyncNativeInstruction(TOKEN_PROGRAM_ID, toAccount),\n  );\n\n  result.cleanupInstructions = [\n    Token.createCloseAccountInstruction(TOKEN_PROGRAM_ID, toAccount, publicKey, publicKey, []),\n  ];\n\n  return {\n    address: toAccount,\n    ...result,\n  };\n}\n\nexport async function findOrCreateAssociatedAccountByMint({\n  connection,\n  payer,\n  owner: { publicKey },\n  mintAddress,\n  unwrapSOL,\n}: {\n  connection: Connection;\n  payer: PublicKey;\n  owner: Owner;\n  mintAddress: PublicKey | string;\n  unwrapSOL: boolean;\n}): Promise<Instruction & { address: PublicKey }> {\n  const mint = typeof mintAddress === 'string' ? new PublicKey(mintAddress) : mintAddress;\n  const toAccount = await Token.getAssociatedTokenAddress(\n    ASSOCIATED_TOKEN_PROGRAM_ID,\n    TOKEN_PROGRAM_ID,\n    mint,\n    publicKey,\n    true,\n  );\n  const cleanupInstructions: TransactionInstruction[] = [];\n  const instructions: TransactionInstruction[] = [];\n\n  const info = await connection.getAccountInfo(toAccount);\n\n  if (info === null) {\n    instructions.push(createAssociatedTokenAccountInstruction(payer, toAccount, publicKey, mint));\n  } else {\n    const tokenAccountInfo = deserializeAccount(info.data);\n\n    if (tokenAccountInfo && !tokenAccountInfo.owner.equals(publicKey)) {\n      // What to do at the top level in UIs and SDK?\n      throw new Error(`/!\\ ATA ${toAccount.toBase58()} is not owned by ${publicKey.toBase58()}`);\n    }\n  }\n\n  // We close it when wrapped SOL\n  if (mint.equals(WRAPPED_SOL_MINT) && unwrapSOL) {\n    cleanupInstructions.push(\n      Token.createCloseAccountInstruction(TOKEN_PROGRAM_ID, toAccount, publicKey, publicKey, []),\n    );\n  }\n\n  return {\n    address: toAccount,\n    instructions: instructions,\n    cleanupInstructions,\n    signers: [],\n  };\n}\n\n// 0.1.x @solana/spl-token does not have the version without the rent sysvar\n// Source: https://github.com/solana-labs/solana-program-library/blob/dc5684445f0b42ba36a0157f06c561d967a7cb34/associated-token-account/program/src/instruction.rs#L16-L25\nexport function createAssociatedTokenAccountInstruction(\n  payer: PublicKey,\n  associatedToken: PublicKey,\n  owner: PublicKey,\n  mint: PublicKey,\n  programId = TOKEN_PROGRAM_ID,\n  associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID,\n): TransactionInstruction {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedToken, isSigner: false, isWritable: true },\n    { pubkey: owner, isSigner: false, isWritable: false },\n    { pubkey: mint, isSigner: false, isWritable: false },\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n    { pubkey: programId, isSigner: false, isWritable: false },\n  ];\n\n  return new TransactionInstruction({\n    keys,\n    programId: associatedTokenProgramId,\n    data: Buffer.alloc(0),\n  });\n}\n","import { Connection, Keypair, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { isPlatformFeeSupported, RouteInfo } from './routes';\nimport { getEmptyInstruction, Instruction } from '../utils/instruction';\nimport { findOrCreateAssociatedAccountByMint } from '../utils/token';\nimport { createSetTokenLedgerInstruction } from './jupiterInstruction';\nimport { Owner } from '../utils/Owner';\nimport { PlatformFee } from './types';\nimport { QuoteMintToReferrer } from '..';\nimport { isSerumAndRaydium } from './market';\n\ntype RouteToInstructionsParams = {\n  user: Owner;\n  tokenLedger: PublicKey;\n  openOrdersAddresses: (PublicKey | undefined)[];\n  userSourceTokenAccountAddress: PublicKey;\n  userIntermediaryTokenAccountAddress: PublicKey | undefined;\n  userDestinationTokenAccountAddress: PublicKey;\n  routeInfo: RouteInfo;\n  platformFee: PlatformFee | undefined;\n  quoteMintToReferrer: QuoteMintToReferrer;\n};\n\nasync function routeToInstructions({\n  user,\n  tokenLedger,\n  openOrdersAddresses,\n  userSourceTokenAccountAddress,\n  userIntermediaryTokenAccountAddress,\n  userDestinationTokenAccountAddress,\n  routeInfo,\n  platformFee,\n  quoteMintToReferrer,\n}: RouteToInstructionsParams): Promise<Instruction> {\n  const outAmountWithSlippage = routeInfo.outAmountWithSlippage;\n  const inputAmount = routeInfo.inAmount;\n\n  const legs = routeInfo.marketInfos.length;\n  if (legs === 2 && !userIntermediaryTokenAccountAddress) {\n    throw new Error('Missing intermediary token account');\n  }\n\n  // Drop referrer if space is scarce\n  const effectiveQuoteMintToReferrer =\n    platformFee && isSerumAndRaydium(routeInfo.marketInfos) ? undefined : quoteMintToReferrer;\n\n  const userIntermediateTokenAccountAddresses = userIntermediaryTokenAccountAddress\n    ? [userIntermediaryTokenAccountAddress]\n    : [];\n  const userTokenAccountAddresses = [\n    userSourceTokenAccountAddress,\n    ...userIntermediateTokenAccountAddresses,\n    userDestinationTokenAccountAddress,\n  ];\n\n  const platformFeeSupported = isPlatformFeeSupported(routeInfo.marketInfos.map((mi) => mi.amm));\n\n  const instructions: TransactionInstruction[] = [\n    createSetTokenLedgerInstruction(tokenLedger, userTokenAccountAddresses[1]),\n  ];\n\n  for (const [index, marketInfo] of routeInfo.marketInfos.entries()) {\n    const amm = marketInfo.amm;\n    const legInputAmount = index === 0 ? inputAmount : null;\n    const legOutAmountWithSlippage = index === legs - 1 ? outAmountWithSlippage : 0;\n    const legPlatformFee = index === legs - 1 && platformFeeSupported ? platformFee : undefined;\n\n    const [userSourceTokenAccount, userDestinationTokenAccount] = userTokenAccountAddresses.slice(index);\n\n    instructions.push(\n      ...amm.createSwapInstructions({\n        sourceMint: marketInfo.inputMint,\n        destinationMint: marketInfo.outputMint,\n        userSourceTokenAccount,\n        userDestinationTokenAccount,\n        userTransferAuthority: user.publicKey,\n        inAmount: legInputAmount,\n        minimumOutAmount: legOutAmountWithSlippage,\n        tokenLedger,\n        openOrdersAddress: openOrdersAddresses[index],\n        platformFee: legPlatformFee,\n        quoteMintToReferrer: effectiveQuoteMintToReferrer,\n      }),\n    );\n  }\n\n  const { signers, cleanupInstructions } = getEmptyInstruction();\n\n  if (user.isKeyPair && user.signer) {\n    signers.push(user.signer);\n  }\n  return {\n    signers,\n    cleanupInstructions,\n    instructions,\n  };\n}\n\nexport const routeAtaInstructions = async ({\n  connection,\n  marketInfos,\n  owner,\n  unwrapSOL,\n}: {\n  connection: Connection;\n  marketInfos: RouteInfo['marketInfos'];\n  owner: Owner;\n  unwrapSOL: boolean;\n}) => {\n  const getUserIntermediateTokenAccountAddress = async () => {\n    const userIntermediateTokenAccountAddress =\n      marketInfos.length === 2\n        ? await findOrCreateAssociatedAccountByMint({\n            connection,\n            owner: owner,\n            payer: owner.publicKey,\n            mintAddress: marketInfos[0].outputMint,\n            unwrapSOL,\n          })\n        : undefined;\n    return userIntermediateTokenAccountAddress;\n  };\n\n  const getUserDestinationTokenAccountAddress = () => {\n    return findOrCreateAssociatedAccountByMint({\n      connection,\n      owner: owner,\n      payer: owner.publicKey,\n      mintAddress: marketInfos.length === 2 ? marketInfos[1].outputMint : marketInfos[0].outputMint,\n      unwrapSOL,\n    });\n  };\n\n  const [userIntermediaryTokenAccountResult, userDestinationTokenAccountResult] = await Promise.all([\n    getUserIntermediateTokenAccountAddress(),\n    getUserDestinationTokenAccountAddress(),\n  ]);\n\n  return {\n    userIntermediaryTokenAccountResult,\n    userDestinationTokenAccountResult,\n  };\n};\n\nexport default routeToInstructions;\n","import { Connection, PublicKey } from '@solana/web3.js';\nimport { SerumMarket } from '../market';\nimport { getEmptyInstruction, Instruction } from '../../utils/instruction';\nimport { wait } from '../../utils/wait';\nimport { createOpenOrdersInstruction } from '../jupiterInstruction';\n\nexport type MarketToOpenOrdersAddress = Map<string, PublicKey>;\n\nexport async function getOrCreateOpenOrdersAddress(\n  connection: Connection,\n  user: PublicKey,\n  serumMarket: SerumMarket,\n  marketToOpenOrdersAddress?: MarketToOpenOrdersAddress,\n): Promise<(Instruction & { address: PublicKey }) | undefined> {\n  const result = getEmptyInstruction();\n\n  const marketAddress = serumMarket.address.toString();\n\n  if (marketToOpenOrdersAddress) {\n    // check existing map\n    let openOrdersAddress = marketToOpenOrdersAddress.get(marketAddress);\n\n    if (openOrdersAddress) {\n      let openOrdersAccountInfo = null;\n\n      // We verify if it indeed exists, with low commitment to pick it up, to address the unsafe behaviour below\n      openOrdersAccountInfo = await connection.getAccountInfo(openOrdersAddress, 'confirmed');\n\n      if (openOrdersAccountInfo) {\n        return {\n          ...result,\n          address: openOrdersAddress,\n        };\n      }\n    }\n  }\n\n  const [newOpenOrdersAddress, ix] = createOpenOrdersInstruction(serumMarket, user);\n\n  const newOpenOrdersAddressInfo = await connection.getAccountInfo(newOpenOrdersAddress);\n\n  if (!newOpenOrdersAddressInfo) {\n    result.instructions = [ix];\n  }\n\n  // This is unsafe, since we don't know yet if it has succeeded\n  marketToOpenOrdersAddress?.set(serumMarket.address.toString(), newOpenOrdersAddress);\n\n  return {\n    ...result,\n    address: newOpenOrdersAddress,\n  };\n}\n","import { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { Connection, FeeCalculator, PublicKey } from '@solana/web3.js';\nimport type { SerumOpenOrdersMap } from '..';\nimport { WRAPPED_SOL_MINT } from '../constants';\nimport { deserializeAccount } from '@mercurial-finance/optimist';\nimport { RouteInfo, TransactionFeeInfo } from './routes';\nimport { routeAtaInstructions } from './routeToInstructions';\nimport { getOrCreateOpenOrdersAddress } from './serum/openOrders';\nimport { SerumAmm } from './serum/serumAmm';\nimport { SplitTradeAmm } from './split-trade/splitTradeAmm';\nimport { PlatformFeeAndAccounts, SetupInstructions } from './types';\nimport { Owner } from '../utils/Owner';\n\nconst SERUM_OPEN_ACCOUNT_LAMPORTS = 23_352_760;\nconst OPEN_TOKEN_ACCOUNT_LAMPORTS = 2_039_280;\n\nfunction sum(values: number[]) {\n  return values.reduce((value, acc) => {\n    acc += value;\n    return acc;\n  }, 0);\n}\n\nconst calculateTransactionDepositAndFee = ({\n  intermediate,\n  destination,\n  openOrders,\n  hasWrapUnwrapSOL,\n  feeCalculator,\n}: SetupInstructions & {\n  hasWrapUnwrapSOL: boolean;\n  feeCalculator: FeeCalculator;\n}): TransactionFeeInfo => {\n  const openOrdersDeposits = openOrders\n    .filter((ooi) => ooi && ooi.instructions.length > 0)\n    .map(() => SERUM_OPEN_ACCOUNT_LAMPORTS);\n  const ataDeposits = [intermediate, destination]\n    .filter((item) => item?.instructions.length && item.cleanupInstructions.length === 0)\n    .map(() => OPEN_TOKEN_ACCOUNT_LAMPORTS);\n\n  const signatureFee =\n    ([...openOrders?.map((oo) => oo?.signers), intermediate?.signers, destination.signers].filter(Boolean).flat()\n      .length +\n      1) *\n    feeCalculator.lamportsPerSignature;\n\n  const totalFeeAndDeposits = sum([signatureFee, ...openOrdersDeposits, ...ataDeposits]);\n\n  // We need to account for temporary wrapped SOL token accounts as intermediary or output\n  const minimumSOLForTransaction = sum([\n    signatureFee,\n    ...openOrdersDeposits,\n    ...[intermediate, destination]\n      .filter((item) => (item?.instructions.length ?? 0) > 0)\n      .map(() => OPEN_TOKEN_ACCOUNT_LAMPORTS),\n    hasWrapUnwrapSOL ? OPEN_TOKEN_ACCOUNT_LAMPORTS : 0,\n  ]);\n\n  return {\n    signatureFee,\n    openOrdersDeposits,\n    ataDeposits,\n    totalFeeAndDeposits,\n    minimumSOLForTransaction,\n  };\n};\n\nexport const getDepositAndFeeFromInstructions = async ({\n  connection,\n  owner,\n  inputMint,\n  marketInfos,\n  feeCalculator,\n  serumOpenOrdersPromise,\n  wrapUnwrapSOL: unwrapSOL,\n}: {\n  connection: Connection;\n  owner: Owner;\n  inputMint: PublicKey;\n  marketInfos: RouteInfo['marketInfos'];\n  feeCalculator: FeeCalculator;\n  /* promise because we can choose not to await it when we dont need it */\n  serumOpenOrdersPromise: Promise<SerumOpenOrdersMap>;\n  wrapUnwrapSOL: boolean;\n}) => {\n  const hasWrapUnwrapSOL = inputMint.equals(WRAPPED_SOL_MINT) && unwrapSOL;\n\n  const openOrdersInstructionsPromise = Promise.all(\n    marketInfos.map(async (marketInfo) => {\n      const amm = marketInfo.amm;\n      if (amm instanceof SerumAmm || amm instanceof SplitTradeAmm) {\n        if (!amm.market) return;\n        return await getOrCreateOpenOrdersAddress(\n          connection,\n          owner.publicKey,\n          amm.market,\n          await serumOpenOrdersPromise,\n        );\n      }\n      return;\n    }),\n  );\n\n  const promise = routeAtaInstructions({ connection, marketInfos, owner, unwrapSOL }).then(\n    ({ userIntermediaryTokenAccountResult, userDestinationTokenAccountResult }) => {\n      return openOrdersInstructionsPromise.then((openOrdersInstructions) => ({\n        intermediate: userIntermediaryTokenAccountResult,\n        destination: userDestinationTokenAccountResult,\n        openOrders: openOrdersInstructions,\n      }));\n    },\n  );\n\n  const instructionResult = await promise;\n\n  return calculateTransactionDepositAndFee({\n    ...instructionResult,\n    hasWrapUnwrapSOL,\n    feeCalculator,\n  });\n};\n\nexport const NO_PLATFORM_FEE: PlatformFeeAndAccounts = {\n  feeBps: 0,\n  feeAccounts: new Map<string, PublicKey>(),\n};\n\nexport async function getPlatformFeeAccounts(\n  connection: Connection,\n  feeAccountOwner: PublicKey,\n): Promise<Map<string, PublicKey>> {\n  const tokenAccounts = (\n    await connection.getTokenAccountsByOwner(feeAccountOwner, {\n      programId: TOKEN_PROGRAM_ID,\n    })\n  ).value;\n\n  const feeAccounts = tokenAccounts.reduce((acc, tokenAccount) => {\n    const deserializedtokenAccount = deserializeAccount(tokenAccount.account.data);\n    if (deserializedtokenAccount) {\n      acc.set(deserializedtokenAccount.mint.toBase58(), tokenAccount.pubkey);\n    }\n    return acc;\n  }, new Map<string, PublicKey>());\n\n  return feeAccounts;\n}\n","import {\n  Connection,\n  PublicKey,\n  Transaction,\n  TransactionCtorFields_DEPRECATED,\n  Signer,\n  TransactionInstruction,\n} from '@solana/web3.js';\nimport { Instruction, TransactionPayload } from './instruction';\nimport { Owner } from './Owner';\n\nexport class TransactionBuilder {\n  private connection: Connection;\n  private feePayer: PublicKey;\n  private instructions: Instruction[];\n  private owner: Owner;\n\n  constructor(connection: Connection, feePayer: PublicKey, owner: Owner) {\n    this.connection = connection;\n    this.feePayer = feePayer;\n    this.instructions = [];\n    this.owner = owner;\n  }\n\n  addInstruction(instruction: Instruction): TransactionBuilder {\n    this.instructions.push(instruction);\n    return this;\n  }\n\n  async build(recentBlockHash?: string): Promise<TransactionPayload> {\n    if (!recentBlockHash) {\n      recentBlockHash = (await this.connection.getLatestBlockhash('confirmed')).blockhash;\n    }\n\n    const txFields: TransactionCtorFields_DEPRECATED = {\n      recentBlockhash: recentBlockHash,\n      feePayer: this.feePayer,\n    };\n\n    let instructions: TransactionInstruction[] = [];\n    let cleanupInstructions: TransactionInstruction[] = [];\n    let signers: Signer[] = [];\n    this.instructions.forEach((curr) => {\n      instructions = instructions.concat(curr.instructions);\n      cleanupInstructions = cleanupInstructions.concat(curr.cleanupInstructions);\n      signers = signers.concat(curr.signers);\n    });\n\n    const transaction = new Transaction(txFields);\n    instructions.concat(cleanupInstructions).forEach((ix) => transaction.add(ix));\n    transaction.feePayer = this.feePayer;\n\n    return {\n      transaction: transaction,\n      signers: signers,\n      execute: this.owner.isKeyPair\n        ? () => {\n            return this.connection.sendTransaction(transaction, signers);\n          }\n        : async () => {\n            throw new Error('Please use a Keypair for the owner parameter to enable the execute function');\n          },\n    };\n  }\n}\n","import { Keypair, PublicKey, Signer } from '@solana/web3.js';\n\ntype _Owner = Keypair | PublicKey;\n\nexport class Owner {\n  private readonly _owner: _Owner;\n\n  constructor(owner: _Owner) {\n    this._owner = owner;\n  }\n\n  get publicKey(): PublicKey {\n    if (Owner.isKeyPair(this._owner)) {\n      return this._owner.publicKey;\n    }\n\n    return this._owner;\n  }\n\n  get signer(): Signer | undefined {\n    return Owner.isKeyPair(this._owner) ? this._owner : undefined;\n  }\n\n  get isKeyPair(): boolean {\n    return Owner.isKeyPair(this._owner);\n  }\n\n  get isPublicKey(): boolean {\n    return Owner.isPublicKey(this._owner);\n  }\n\n  static isKeyPair(owner: _Owner): owner is Keypair {\n    return (owner as Keypair).secretKey !== undefined;\n  }\n\n  static isPublicKey(owner: _Owner): owner is PublicKey {\n    return !Owner.isKeyPair(owner);\n  }\n}\n","export const wait = (time: number) => new Promise<void>((resolve) => setTimeout(resolve, time));\n","import { TransactionError } from '@mercurial-finance/optimist';\nimport { bs58 } from '@project-serum/anchor/dist/cjs/utils/bytes';\nimport {\n  ConfirmedTransactionMeta,\n  Connection,\n  PublicKey,\n  SendOptions,\n  Transaction,\n  TransactionResponse,\n  TransactionSignature,\n} from '@solana/web3.js';\nimport Decimal from 'decimal.js';\nimport promiseRetry from 'promise-retry';\nimport { WRAPPED_SOL_MINT, JUPITER_ERRORS } from '../constants';\nimport { wait } from './wait';\n\ntype ResponseMeta = NonNullable<TransactionResponse['meta']>;\ntype ReponseTransaction = TransactionResponse['transaction'];\n\nfunction diffTokenBalance(accountKeyIndex: number, meta: ConfirmedTransactionMeta): number | undefined {\n  const postBalance = meta.postTokenBalances?.find(\n    (postTokenBalance) => postTokenBalance.accountIndex === accountKeyIndex,\n  )?.uiTokenAmount.amount;\n  const preBalance = meta.preTokenBalances?.find((preTokenBalance) => preTokenBalance.accountIndex === accountKeyIndex)\n    ?.uiTokenAmount.amount;\n\n  // When token account is created it isn't present in preBalance\n  if (!postBalance) return;\n  return Math.abs(parseInt(postBalance) - (preBalance !== undefined ? parseInt(preBalance) : 0));\n}\n\nexport function extractTokenBalanceChangeFromTransaction(\n  meta: ResponseMeta,\n  transaction: ReponseTransaction,\n  tokenAccountAddress: PublicKey,\n): number | undefined {\n  const message = transaction.message;\n\n  if (!meta) {\n    return;\n  }\n  const index = message.accountKeys.findIndex((p) => p.equals(tokenAccountAddress));\n\n  return diffTokenBalance(index, meta);\n}\n\nexport function extractSOLChangeFromTransaction(\n  meta: ResponseMeta,\n  transaction: ReponseTransaction,\n  user: PublicKey,\n): number {\n  let accountKeyIndex = transaction.message.accountKeys.findIndex((p) => p.equals(user));\n\n  if (accountKeyIndex !== -1) {\n    return Math.abs(meta.postBalances[accountKeyIndex] - meta.preBalances[accountKeyIndex]);\n  }\n\n  // if 0 is returned it will throw error in the caller function\n  return 0;\n}\n\nexport function getWritableKeys(transaction: Transaction) {\n  return [\n    ...new Set(\n      transaction.instructions\n        .map((inst) => inst.keys.filter((key) => key.isWritable).map((k) => k.pubkey))\n        .reduce((acc, el) => acc.concat(el)),\n    ).values(),\n  ];\n}\n\nexport function getTokenBalanceChangesFromTransactionResponse({\n  txid,\n  inputMint,\n  outputMint,\n  user,\n  sourceAddress,\n  destinationAddress,\n  transactionResponse,\n  hasWrappedSOL,\n}: {\n  txid: TransactionSignature;\n  inputMint: PublicKey;\n  outputMint: PublicKey;\n  user: PublicKey;\n  sourceAddress: PublicKey;\n  destinationAddress: PublicKey;\n  transactionResponse: TransactionResponse | null;\n  hasWrappedSOL: boolean;\n}) {\n  let sourceTokenBalanceChange: number | undefined;\n  let destinationTokenBalanceChange: number | undefined;\n\n  if (transactionResponse) {\n    let { meta, transaction } = transactionResponse;\n    if (meta) {\n      sourceTokenBalanceChange =\n        inputMint.equals(WRAPPED_SOL_MINT) && !hasWrappedSOL\n          ? extractSOLChangeFromTransaction(meta, transaction, user)\n          : extractTokenBalanceChangeFromTransaction(meta, transaction, sourceAddress);\n      destinationTokenBalanceChange =\n        outputMint.equals(WRAPPED_SOL_MINT) && !hasWrappedSOL\n          ? extractSOLChangeFromTransaction(meta, transaction, user)\n          : extractTokenBalanceChangeFromTransaction(meta, transaction, destinationAddress);\n    }\n  }\n\n  if (!(sourceTokenBalanceChange && destinationTokenBalanceChange)) {\n    throw new TransactionError(\n      'Cannot find source or destination token account balance change',\n      txid,\n      JUPITER_ERRORS['BalancesNotExtractedProperly'].code,\n    );\n  }\n\n  return [sourceTokenBalanceChange, destinationTokenBalanceChange];\n}\n\nexport async function pollForConfirmedTransaction(\n  connection: Connection,\n  txid: TransactionSignature,\n): Promise<TransactionResponse | null> {\n  return promiseRetry(\n    async (retry) => {\n      const response = await connection.getTransaction(txid, {\n        commitment: 'confirmed',\n      });\n      if (!response) {\n        retry(\n          new TransactionError('Transaction was not confirmed', txid, JUPITER_ERRORS['TransactionNotConfirmed'].code),\n        );\n      }\n      return response;\n    },\n    {\n      retries: 30,\n      minTimeout: 500,\n    },\n  ).catch(() => null);\n}\n\nexport function getUnixTs() {\n  return new Date().getTime();\n}\n\nconst SEND_OPTIONS: SendOptions = { skipPreflight: true, maxRetries: 2 };\n\n/**\n * awaits confirmation while resending the transaction periodically\n *\n * Our RPC node settings\n * solana_send_leader_count: 8\n * solana_send_retry_ms: 15000\n **/\nexport async function transactionSenderAndConfirmationWaiter(\n  connection: Connection,\n  signedTransaction: Transaction,\n  timeout = 120_000, // 2 minutes, (sendInterval * sendRetries) = 80_000 + extra wait 40_000\n  pollInterval = 500,\n  sendInterval = 2_000,\n  sendRetries = 40,\n): Promise<{ txid: TransactionSignature; transactionResponse: TransactionResponse | null }> {\n  const rawTransaction = signedTransaction.serialize();\n  const txid = await connection.sendRawTransaction(rawTransaction, SEND_OPTIONS);\n\n  const start = getUnixTs();\n  let lastSendTimestamp = getUnixTs();\n  let retries = 0;\n\n  while (getUnixTs() - start < timeout) {\n    const timestamp = getUnixTs();\n    if (retries < sendRetries && timestamp - lastSendTimestamp > sendInterval) {\n      lastSendTimestamp = timestamp;\n      retries += 1;\n      await connection.sendRawTransaction(rawTransaction, SEND_OPTIONS);\n    }\n    const response = await Promise.any([\n      connection.getTransaction(txid, {\n        commitment: 'confirmed',\n      }),\n      wait(5000),\n    ]);\n    if (response) return { txid, transactionResponse: response };\n    await wait(pollInterval);\n  }\n  return { txid, transactionResponse: null };\n}\n\nexport function getSignature(transaction: Transaction) {\n  const signature = transaction.signature;\n  if (!signature) {\n    throw new Error('Transaction has no signature');\n  }\n  return bs58.encode(signature);\n}\n","// The package is missing cjs. Apache License 2.0\n// https://github.com/ehmicky/fast-cartesian/blob/619a497dffd978fb4a09a83f2ca047915579774f/src/main.js\n\n// Validate 'array()' input\nconst validateInput = function <T>(arrays: T[][]) {\n  if (!Array.isArray(arrays)) {\n    throw new TypeError('Argument must be an array of arrays');\n  }\n\n  arrays.forEach(validateArray);\n  validateDimensions(arrays);\n  validateCombinations(arrays);\n};\n\nconst validateArray = function <T>(array: T[]) {\n  if (!Array.isArray(array)) {\n    throw new TypeError(`Argument must be an array: ${array}`);\n  }\n};\n\n// Maximum number of nested `for` loops. In my machine, it's 604 but it is\n// engine-specific so we use a safe number. Above the limit, a max call stack\n// error is thrown by the engine.\nconst validateDimensions = function <T>({ length }: T[]) {\n  if (length >= MAX_DIMENSIONS) {\n    throw new TypeError(\n      `Too many arrays (${length}): please use the 'big-cartesian' library instead of 'fast-cartesian'`,\n    );\n  }\n};\n\nconst MAX_DIMENSIONS = 1e2;\n\n// Max array size in JavaScript. This is the limit of the final return value.\nconst validateCombinations = function <T>(arrays: T[][]) {\n  const size = arrays.reduce(multiplySize, 1);\n\n  if (size >= MAX_SIZE) {\n    const sizeStr = Number.isFinite(size) ? ` (${size.toExponential(0)})` : '';\n    throw new TypeError(\n      `Too many combinations${sizeStr}: please use the 'big-cartesian' library instead of 'fast-cartesian'`,\n    );\n  }\n};\n\nconst multiplySize = function <T>(size: number, array: T[]) {\n  return size * array.length;\n};\n\nconst MAX_SIZE = 4294967296; // 2 ** 32 = 4,294,967,296\n\n// Does a cartesian product on several arrays.\n// Returns an array with the results.\n// Optimized to be the fastest implementation in JavaScript.\nexport default function fastCartesian<T>(arrays: T[][]): T[][] {\n  validateInput(arrays);\n\n  if (arrays.length === 0) {\n    return [];\n  }\n\n  const loopFunc = getLoopFunc(arrays.length);\n  const result: T[][] = [];\n  loopFunc(arrays, result);\n  return result;\n}\n\nconst getLoopFunc = function (length: number) {\n  const cachedLoopFunc = cache[length];\n\n  if (cachedLoopFunc !== undefined) {\n    return cachedLoopFunc;\n  }\n\n  const loopFunc = mGetLoopFunc(length);\n  // eslint-disable-next-line fp/no-mutation\n  cache[length] = loopFunc;\n  return loopFunc;\n};\n\nconst cache: Record<number, any> = {};\n\n// Create a function with `new Function()` that does:\n//   function(arrays, results) {\n//     for (const value0 of arrays[0]) {\n//       for (const value1 of arrays[1]) {\n//         // and so on\n//         results.push([value0, value1])\n//       }\n//     }\n//   }\nconst mGetLoopFunc = function (length: number) {\n  const indexes = Array.from({ length }, getIndex);\n  const start = indexes.map((index) => `for (const value${index} of arrays[${index}]) {`).join('\\n');\n  const middle = indexes.map((index) => `value${index}`).join(', ');\n  const end = '}\\n'.repeat(length);\n\n  // eslint-disable-next-line no-new-func\n  return new Function('arrays', 'result', `${start}\\nresult.push([${middle}])\\n${end}`);\n};\n\nconst getIndex = function (value: any, index: number) {\n  return String(index);\n};\n","import { Connection, PublicKey } from '@solana/web3.js';\nimport { chunkedGetMultipleAccountInfos } from '../utils/chunkedGetMultipleAccountInfos';\nimport { Amm, Quote } from './amm';\nimport { SplitTradeAmm } from './split-trade/splitTradeAmm';\nimport { isValidRoute, MarketInfo } from './market';\nimport { ammCrossProtocolPairs, isPlatformFeeSupported, Route, RouteInfo, TransactionFeeInfo } from './routes';\nimport { TokenRouteSegments } from './types';\nimport { IS_DEV } from '../constants';\nimport fastCartesian from '../utils/cartesian';\n\nconst PLATFORM_FEE_DENOMINATOR = 10000;\n\nexport async function fetchAccountInfos(connection: Connection, routes: TokenRouteSegments): Promise<void> {\n  const accountInfosMap = new Map();\n\n  const accountsToFetchSet = new Set<string>();\n  const ammMap = new Map<string, Amm>();\n  routes.forEach((innerMap) => {\n    innerMap.forEach((amms) => {\n      amms.forEach((amm) => {\n        ammMap.set(amm.id, amm);\n        amm.getAccountsForUpdate().forEach((account) => {\n          // Only add accountInfos that is not in the Map\n          accountsToFetchSet.add(account.toBase58());\n        });\n      });\n    });\n  });\n\n  const accountsToFetch = Array.from(accountsToFetchSet);\n\n  if (accountsToFetch.length > 0) {\n    const accountInfos = await chunkedGetMultipleAccountInfos(connection, accountsToFetch);\n\n    accountInfos.forEach((item, index) => {\n      const publicKey = accountsToFetch[index];\n      if (item) {\n        accountInfosMap.set(publicKey, item);\n      }\n    });\n\n    ammMap.forEach((amm) => {\n      amm.update(accountInfosMap);\n    });\n  }\n}\n\ninterface GetQuotesParams {\n  inputRouteSegment: TokenRouteSegments;\n  amount: number;\n  inputMint: PublicKey;\n  outputMint: PublicKey;\n  platformFeeBps: number;\n  slippage: number;\n  filterTopNResult?: number;\n  onlyDirectRoutes?: boolean;\n  getDepositAndFeeForRoute: (params: {\n    marketInfos: RouteInfo['marketInfos'];\n  }) => Promise<TransactionFeeInfo | undefined>;\n}\n\nfunction getInputOutputId({ inputMint, outputMint }: { inputMint: string; outputMint: string }) {\n  return `${inputMint}-${outputMint}`;\n}\n\nfunction getQuoteId({ ammId, amount }: { ammId: string; amount: number }) {\n  return `${ammId}-${amount}`;\n}\n\ntype QuoteMap = Map<string, Quote>;\n\nfunction getQuoteMap({\n  amms,\n  inputMint,\n  outputMint,\n  amount,\n  filterTopNResult = 3,\n}: {\n  amms: Amm[];\n  inputMint: string;\n  outputMint: string;\n  amount: number;\n  filterTopNResult?: number;\n}): QuoteMap {\n  const quotes = amms\n    .map((amm) => {\n      try {\n        const quote = amm.getQuote({\n          amount,\n          sourceMint: new PublicKey(inputMint),\n          destinationMint: new PublicKey(outputMint),\n        });\n        return { quote, id: amm.id };\n      } catch (e) {\n        if (IS_DEV) {\n          console.error(e);\n        }\n        return undefined;\n      }\n    })\n    .sort((a, b) => (b?.quote.outAmount || 0) - (a?.quote.outAmount || 0))\n    // only choose top 3 rates\n    .filter((item, idx) => item && item.quote.inAmount && idx < filterTopNResult) as Array<{\n    id: string;\n    quote: Quote;\n  }>;\n\n  return new Map<string, Quote>(quotes.map((item) => [getQuoteId({ ammId: item.id, amount }), item.quote]));\n}\n\n// Change this to support N-1 level of hops\nconst MAX_LEVEL = 2;\n\nexport function processInputRouteSegmentToRoutesInfos({\n  inputRouteSegment,\n  inputMint,\n  outputMint,\n  amount,\n  getDepositAndFeeForRoute,\n  platformFeeBps,\n  slippage,\n  filterTopNResult,\n  onlyDirectRoutes,\n}: GetQuotesParams) {\n  const inputMintString = inputMint.toBase58();\n  const outputMintString = outputMint.toBase58();\n  // (InputMint-OutputMint) map to (AmmId-InputAmount) map to Quote from the amm with the inputAmount\n  // this is used to prevent calculation being repeated later on.\n  const tradeIdQuoteMap = new Map<string, Map<string, Quote>>();\n  const inputMintInnerMap = inputRouteSegment.get(inputMintString);\n\n  const routes: Route[] = [];\n\n  if (!inputMintInnerMap) {\n    throw new Error('No routes found for the input and output mints');\n  }\n\n  const maxLevel = onlyDirectRoutes ? 0 : MAX_LEVEL;\n\n  /*\n   * It get the rate of all single pair that is linked to the inputMint\n   * Example: SOL => USDC, will have direct pair, while\n   *          SOL => USDT, USDT => SOL will have a hop\n   *\n   * So we go through each of the hop and get the top 3 rate and drop others\n   * This will eventually reduce the needs to compute bad rate for the same pair\n   *\n   * The loop below is doing for the inputMint, while the one after is doing for the outputMint.\n   */\n  const walkTheTree = ({\n    inputMint,\n    level = 0,\n    walked = [inputMint],\n  }: {\n    inputMint: string;\n    amount: number;\n    level?: number;\n    walked?: string[];\n  }) => {\n    const inputMintInnerMap = inputRouteSegment.get(inputMint);\n\n    if (inputMintInnerMap) {\n      inputMintInnerMap.forEach((amms, outMint) => {\n        const tradeId = getInputOutputId({\n          inputMint,\n          outputMint: outMint,\n        });\n\n        const quoteMap = getQuoteMap({\n          amms,\n          inputMint,\n          outputMint: outMint,\n          amount,\n          filterTopNResult,\n        });\n\n        const filteredAmms = amms.filter((amm) => quoteMap.has(getQuoteId({ ammId: amm.id, amount })));\n\n        // add split trade in when outputMint match and it's not direct only routes\n        if (outMint === outputMintString && !onlyDirectRoutes) {\n          ammCrossProtocolPairs(filteredAmms.slice(), (firstAmm, secondAmm) => {\n            const splitTradeAmm = SplitTradeAmm.create(firstAmm, secondAmm);\n            if (splitTradeAmm) {\n              filteredAmms.push(splitTradeAmm);\n            }\n          });\n        }\n\n        inputMintInnerMap.set(outMint, filteredAmms);\n        tradeIdQuoteMap.set(tradeId, quoteMap);\n\n        // keep looping if not walked and not reached max level\n        if (outMint !== outputMintString && quoteMap.size && !walked.includes(outMint) && level < maxLevel - 1) {\n          walkTheTree({\n            inputMint: outMint,\n            amount: quoteMap.values().next().value.outAmount,\n            level: level + 1,\n            walked: walked.concat(outMint),\n          });\n        } else if (outMint === outputMintString) {\n          // if output reached, we add the route\n\n          const mints = walked.concat(outMint);\n          const _mints = mints.map((i) => new PublicKey(i));\n          const ammsArr = mints.reduce((amms, _, index) => {\n            if (index < mints.length - 1) {\n              amms.push(inputRouteSegment.get(mints[index])?.get(mints[index + 1])!);\n            }\n            return amms;\n          }, [] as Amm[][]);\n\n          const permutations: Amm[][] = fastCartesian(ammsArr);\n\n          permutations.forEach((item) => {\n            if (item.length === 1 || isValidRoute(item[0], item[1])) {\n              routes.push({\n                amms: item,\n                mints: _mints,\n              });\n            }\n          });\n        }\n      });\n    }\n  };\n\n  walkTheTree({\n    inputMint: inputMintString,\n    amount: amount,\n  });\n\n  const routesInfo: RouteInfo[] = routes\n    .map((route) => {\n      const { amms, mints } = route;\n\n      // Chain all amms\n      let marketInfos: MarketInfo[] = [];\n      let intermediateAmount = amount;\n      let outAmountWithSlippage = amount;\n      const platformFeeSupported = isPlatformFeeSupported(amms);\n      const tokenMints: PublicKey[] = mints;\n\n      const legs = amms.length;\n      for (const [i, amm] of amms.entries()) {\n        try {\n          const sourceMint = tokenMints[i];\n          const destinationMint = tokenMints[i + 1];\n\n          const tradeId = getInputOutputId({\n            inputMint: sourceMint.toBase58(),\n            outputMint: destinationMint.toBase58(),\n          });\n\n          const cacheQuote = tradeIdQuoteMap\n            .get(tradeId)\n            ?.get(getQuoteId({ ammId: amm.id, amount: intermediateAmount }));\n\n          const quote =\n            cacheQuote ||\n            amm.getQuote({\n              sourceMint,\n              destinationMint,\n              amount: intermediateAmount,\n            });\n\n          // Platform fee applicable only on last leg\n          const platformFee =\n            legs - 1 === i && platformFeeSupported\n              ? {\n                  amount: Math.floor((quote.outAmount * platformFeeBps) / PLATFORM_FEE_DENOMINATOR),\n                  mint: destinationMint.toBase58(),\n                  pct: platformFeeBps / 100,\n                }\n              : { amount: 0, mint: destinationMint.toBase58(), pct: 0 };\n\n          const outAmountAfterFees = Math.max(0, quote.outAmount - platformFee.amount);\n\n          const legOutAmountWithSlippage = Math.round(outAmountAfterFees * (1 - slippage / 100));\n\n          marketInfos.push({\n            amm,\n            inputMint: sourceMint,\n            outputMint: destinationMint,\n            notEnoughLiquidity: quote.notEnoughLiquidity,\n            minInAmount: quote.minInAmount,\n            minOutAmount: quote.minOutAmount,\n            inAmount: quote.inAmount,\n            outAmount: outAmountAfterFees,\n            priceImpactPct: quote.priceImpactPct,\n            lpFee: {\n              amount: quote.feeAmount,\n              mint: quote.feeMint,\n              pct: quote.feePct,\n            },\n            platformFee,\n          });\n\n          intermediateAmount = outAmountAfterFees;\n          outAmountWithSlippage = legOutAmountWithSlippage;\n        } catch (e: any) {\n          if (IS_DEV) {\n            console.error(e);\n          }\n\n          return undefined;\n        }\n      }\n\n      return {\n        marketInfos,\n        getDepositAndFee: () => getDepositAndFeeForRoute({ marketInfos }),\n        inAmount: marketInfos[0].inAmount,\n        outAmount: intermediateAmount,\n        outAmountWithSlippage: outAmountWithSlippage,\n        priceImpactPct:\n          1 -\n          marketInfos.reduce((priceFactor, marketInfo) => {\n            priceFactor *= 1 - marketInfo.priceImpactPct;\n            return priceFactor;\n          }, 1),\n      };\n    })\n    .filter((item): item is RouteInfo => item !== undefined)\n    .sort((a, b) => b.outAmount - a.outAmount); // sort based on which one have better output\n\n  return routesInfo;\n}\n","import { parseErrorForTransaction, TransactionError } from '@mercurial-finance/optimist';\nimport { TransactionResponse, TransactionSignature } from '@solana/web3.js';\n\n// Throws when not found or contains error to satisfy upper control flow\nexport async function validateTransactionResponse({\n  txid,\n  transactionResponse,\n}: {\n  txid: string;\n  transactionResponse: TransactionResponse | null;\n}): Promise<{ txid: TransactionSignature; transactionResponse: TransactionResponse | null }> {\n  if (!transactionResponse) {\n    throw new TransactionError('Transaction was not confirmed', txid);\n  }\n  if (transactionResponse?.meta?.err) {\n    let { message, code } = await parseErrorForTransaction(transactionResponse);\n\n    switch (code) {\n      case 6000: {\n        message = 'Slippage error';\n      }\n    }\n\n    throw new TransactionError(message || '', txid, code);\n  }\n  return { txid, transactionResponse };\n}\n","import fetch from 'cross-fetch';\n\ntype Address = string;\n\nexport async function getTopTokens() {\n  const topTokens = (await (await fetch('https://cache.jup.ag/top-tokens')).json()) as Address[];\n\n  return new Set(topTokens.filter((_, idx) => idx < 60));\n}\n","import { ASSOCIATED_TOKEN_PROGRAM_ID, Token, TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport {\n  Cluster,\n  Connection,\n  FeeCalculator,\n  Keypair,\n  PublicKey,\n  Transaction,\n  TransactionSignature,\n} from '@solana/web3.js';\n\nimport { OpenOrders } from '@project-serum/serum';\nimport {\n  computeInputRouteSegments,\n  computeRouteMap,\n  fetchMarketCache,\n  getAllAmms,\n  getTokenRouteSegments,\n  isSplitSetupRequired,\n  RouteInfo,\n} from './routes';\nimport { MarketInfo } from './market';\nimport {\n  DEVNET_SERUM_DEX_PROGRAM,\n  JUPITER_WALLET,\n  MAINNET_SERUM_DEX_PROGRAM,\n  WRAPPED_SOL_MINT,\n  MARKETS_URL,\n  SWAP_PROTOCOL_TOKENS,\n} from '../constants';\nimport { getDepositAndFeeFromInstructions, NO_PLATFORM_FEE } from './fee';\nimport routeToInstructions, { routeAtaInstructions } from './routeToInstructions';\nimport { getOrCreateOpenOrdersAddress } from './serum/openOrders';\nimport { createAndCloseWSOLAccount } from '../utils/token';\nimport { getEmptyInstruction, Instruction } from '../utils/instruction';\nimport { TransactionBuilder } from '../utils/TransactionBuilder';\nimport { Owner } from '../utils/Owner';\nimport {\n  getSignature,\n  getTokenBalanceChangesFromTransactionResponse,\n  transactionSenderAndConfirmationWaiter,\n} from '../utils/transactionHelpers';\nimport { createInitializeTokenLedgerInstruction, TOKEN_LEDGER } from './jupiterInstruction';\nimport { fetchAccountInfos, processInputRouteSegmentToRoutesInfos } from './computeRouteInfos';\nimport type { SignerWalletAdapter } from '@solana/wallet-adapter-base';\nimport { TokenRouteSegments, PlatformFeeAndAccounts, QuoteMintToReferrer } from './types';\nimport { SerumAmm } from './serum/serumAmm';\nimport { SaberAmm } from './saber/saberAmm';\nimport { SplTokenSwapAmm } from './spl-token-swap/splTokenSwapAmm';\nimport { MercurialAmm } from './mercurial/mercurialAmm';\nimport { AldrinAmm } from './aldrin/aldrinAmm';\nimport { RaydiumAmm } from './raydium/raydiumAmm';\nimport { CropperAmm } from './cropper/cropperAmm';\nimport { SenchaAmm } from './sencha/senchaAmm';\nimport { SplitTradeAmm } from './split-trade/splitTradeAmm';\nimport { TokenMintAddress, SetupInstructions } from './types';\nimport { getPlatformFeeAccounts } from './fee';\nimport { Amm } from './amm';\nimport { validateTransactionResponse } from '../utils/tx/errors';\nimport { TransactionError } from '@mercurial-finance/optimist';\nimport { getSaberWrappedDecimalsAmms, SaberAddDecimalsAmm } from './saber/saberAddDecimalsAmm';\nimport { getTopTokens } from './getTopTokens';\nimport { WhirlpoolAmm } from './whirlpool/whirlpoolAmm';\nimport { CykuraAmm } from './cykura/cykuraAmm';\n\nexport type SerumOpenOrdersMap = Map<string, PublicKey>;\nexport { MarketInfo } from './market';\nexport { getPlatformFeeAccounts } from './fee';\nexport * from './types';\nexport { transactionSenderAndConfirmationWaiter } from '../utils/transactionHelpers';\nexport { RouteInfo, TransactionFeeInfo, getRouteInfoUniqueId } from './routes';\nexport { getSaberWrappedDecimalsAmms };\nexport {\n  AldrinAmm,\n  CykuraAmm,\n  RaydiumAmm,\n  SerumAmm,\n  SaberAmm,\n  SplTokenSwapAmm,\n  MercurialAmm,\n  CropperAmm,\n  SenchaAmm,\n  SaberAddDecimalsAmm,\n  SplitTradeAmm,\n  WhirlpoolAmm,\n};\n\nexport type SwapResult =\n  | {\n      txid: string;\n      inputAddress: PublicKey;\n      outputAddress: PublicKey;\n      inputAmount: number | undefined;\n      outputAmount: number | undefined;\n    }\n  | {\n      error?: TransactionError;\n    };\n\ntype InputMintAndOutputMint = string;\n\ntype JupiterLoadParams = {\n  connection: Connection;\n  cluster: Cluster;\n  user?: PublicKey | Keypair;\n  platformFeeAndAccounts?: PlatformFeeAndAccounts;\n  quoteMintToReferrer?: Map<TokenMintAddress, PublicKey>;\n  /**\n   * If === -1, mean it will not fetch when shouldFetch == false\n   * If === 0, mean it will fetch everytime\n   */\n  routeCacheDuration?: number;\n  wrapUnwrapSOL?: boolean;\n  marketUrl?: string;\n  /**\n   * On multi-leg trades, the intermediate tokens is restricted to X top tokens in volume and certain utility tokens (Saber wrapped decimal tokens)\n   * This is to reduce the load by having to compute trades through routes that are not so liquid\n   */\n  restrictIntermediateTokens?: boolean;\n  /** See {@link Jupiter.tokenLedger}, default to the standard Jupiter token ledger */\n  tokenLedger?: PublicKey;\n  /** See {@link Jupiter.shouldLoadSerumOpenOrders}, default to true */\n  shouldLoadSerumOpenOrders?: boolean;\n};\n\nexport type OnTransaction = (\n  txid: TransactionSignature,\n  totalTxs: number,\n  txDescription: IConfirmationTxDescription,\n) => void;\n\nexport type IConfirmationTxDescription = 'SETUP' | 'SWAP' | 'CLEANUP';\ntype ExecuteParams = {\n  wallet?: Pick<SignerWalletAdapter, 'sendTransaction' | 'signAllTransactions' | 'signTransaction'>;\n  /**\n   * Allows to customize control of sending and awaiting confirmation in the single/multi transaction flow\n   */\n  onTransaction?: OnTransaction;\n};\n\nexport class Jupiter {\n  /* promise because we can choose not to await it when we dont need it */\n  private serumOpenOrdersPromise: Promise<SerumOpenOrdersMap> | undefined = undefined;\n  private user: Keypair | PublicKey | undefined;\n  private routeCache = new Map<InputMintAndOutputMint, { fetchTimestamp: number }>();\n\n  constructor(\n    private connection: Connection,\n    private cluster: Cluster,\n    public tokenRouteSegments: TokenRouteSegments,\n    private feeCalculator: FeeCalculator,\n    private platformFeeAndAccounts: PlatformFeeAndAccounts,\n    /** Referrer account to collect Serum referrer fees for each given quote mint, the referrer fee is 20% of the Serum protocol fee */\n    private quoteMintToReferrer: QuoteMintToReferrer,\n    /** route cache duration in ms */\n    private routeCacheDuration: number = 0,\n    /** When set to true (default) native SOL is wrapped and wSOL unwrapped in each swap, otherwise it assumes wSOL is funded when it exists */\n    private wrapUnwrapSOL: boolean = true,\n    /** A token ledger which can be used to track volume as it can be made unique per platform, also alleviates write locks on a single token ledger account */\n    private tokenLedger: PublicKey,\n    private intermediateTokens: TokenMintAddress[] | undefined,\n    /** Perform a getProgramAccounts on user's serum open orders. Recomended to turn off if RPC is slow to perform a gPA */\n    private shouldLoadSerumOpenOrders: boolean,\n  ) {}\n\n  /**\n   * load performs the necessary async scaffolding of the Jupiter object\n   */\n  static async load({\n    connection,\n    cluster,\n    user,\n    platformFeeAndAccounts = NO_PLATFORM_FEE,\n    quoteMintToReferrer,\n    routeCacheDuration = 0,\n    wrapUnwrapSOL = true,\n    // @internal,\n    marketUrl,\n    restrictIntermediateTokens = false,\n    tokenLedger = TOKEN_LEDGER,\n    shouldLoadSerumOpenOrders = true,\n  }: JupiterLoadParams) {\n    const [\n      tokenRouteSegments,\n      {\n        value: { feeCalculator },\n      },\n      _quoteMintToReferrer,\n      intermediateTokens,\n    ] = await Promise.all([\n      Jupiter.fetchTokenRouteSegments(connection, cluster, marketUrl),\n      connection.getRecentBlockhashAndContext('processed'),\n      quoteMintToReferrer ?? getPlatformFeeAccounts(connection, new PublicKey(JUPITER_WALLET)),\n      restrictIntermediateTokens ? Jupiter.getIntermediateTokens() : undefined,\n    ]);\n\n    const jupiter = new Jupiter(\n      connection,\n      cluster,\n      tokenRouteSegments,\n      feeCalculator,\n      platformFeeAndAccounts,\n      _quoteMintToReferrer,\n      routeCacheDuration,\n      wrapUnwrapSOL,\n      tokenLedger,\n      intermediateTokens,\n      shouldLoadSerumOpenOrders,\n    );\n    if (user) jupiter.setUserPublicKey(user);\n    return jupiter;\n  }\n\n  getAccountToAmmMap() {\n    const accountToAmmMap = new Map<string, Amm>();\n    this.tokenRouteSegments.forEach((tokenRouteSegment) => {\n      Array.from(tokenRouteSegment.values()).forEach((marketInfos) => {\n        marketInfos.forEach((amm) => {\n          amm.getAccountsForUpdate().forEach((account) => {\n            accountToAmmMap.set(account.toBase58(), amm);\n          });\n        });\n      });\n    });\n    return accountToAmmMap;\n  }\n\n  public getDepositAndFees = async ({\n    marketInfos,\n    userPublicKey,\n    /**\n     * We can use Jupiter.findSerumOpenOrdersForOwner for this, if we want to reuse existing user serum open orders.\n     */\n    serumOpenOrdersPromise = Promise.resolve(new Map()),\n  }: {\n    marketInfos: MarketInfo[];\n    userPublicKey: PublicKey;\n    serumOpenOrdersPromise?: Promise<SerumOpenOrdersMap>;\n  }) => {\n    return getDepositAndFeeFromInstructions({\n      connection: this.connection,\n      feeCalculator: this.feeCalculator,\n      inputMint: marketInfos[0].inputMint,\n      marketInfos,\n      serumOpenOrdersPromise,\n      owner: new Owner(userPublicKey),\n      wrapUnwrapSOL: this.wrapUnwrapSOL,\n    });\n  };\n\n  private getDepositAndFeesForUser = ({ marketInfos }: { marketInfos: MarketInfo[] }) => {\n    if (this.user && this.serumOpenOrdersPromise) {\n      const user = new Owner(this.user);\n\n      return this.getDepositAndFees({\n        marketInfos,\n        userPublicKey: user.publicKey,\n        serumOpenOrdersPromise: this.serumOpenOrdersPromise,\n      });\n    }\n    return Promise.resolve(undefined);\n  };\n\n  async computeRoutes({\n    inputMint,\n    outputMint,\n    inputAmount,\n    slippage,\n    feeBps = 0,\n    forceFetch,\n    onlyDirectRoutes,\n    filterTopNResult,\n  }: {\n    inputMint: PublicKey;\n    outputMint: PublicKey;\n    inputAmount: number;\n    slippage: number;\n    feeBps?: number;\n    forceFetch?: boolean;\n    onlyDirectRoutes?: boolean;\n    /**\n     * filter how many top individual route to be used to compared\n     */\n    filterTopNResult?: number;\n  }) {\n    const inputMintString = inputMint.toBase58();\n    const outputMintString = outputMint.toBase58();\n\n    // Platform fee can only be applied when fee account exists\n    const platformFeeBps =\n      feeBps ||\n      (this.platformFeeAndAccounts.feeAccounts.get(outputMintString) ? this.platformFeeAndAccounts.feeBps : 0);\n\n    const now = new Date().getTime();\n\n    // do sort so that it's always the same order for the same inputMint and outputMint and vice versa\n    const inputMintAndOutputMint = [inputMintString, outputMintString].sort((a, b) => a.localeCompare(b)).join('');\n\n    const routeCache = this.routeCache.get(inputMintAndOutputMint);\n\n    const inputRouteSegment = computeInputRouteSegments({\n      inputMint: inputMintString,\n      outputMint: outputMintString,\n      tokenRouteSegments: this.tokenRouteSegments,\n      intermediateTokens: this.intermediateTokens,\n    });\n\n    let shouldBustCache = false;\n    // special -1 condition to not fetch\n    if (this.routeCacheDuration === -1) {\n      shouldBustCache = false;\n    } else if (this.routeCacheDuration === 0) {\n      shouldBustCache = true;\n    } else {\n      if (routeCache) {\n        const { fetchTimestamp } = routeCache;\n        if (now - fetchTimestamp > this.routeCacheDuration) {\n          shouldBustCache = true;\n        }\n      } else {\n        shouldBustCache = true;\n      }\n    }\n\n    if (forceFetch || shouldBustCache) {\n      await fetchAccountInfos(this.connection, inputRouteSegment);\n      this.routeCache.set(inputMintAndOutputMint, {\n        fetchTimestamp: new Date().getTime(),\n      });\n    }\n\n    try {\n      const routesInfos = processInputRouteSegmentToRoutesInfos({\n        inputRouteSegment: inputRouteSegment,\n        inputMint: inputMint,\n        outputMint: outputMint,\n        amount: inputAmount,\n        getDepositAndFeeForRoute: this.getDepositAndFeesForUser,\n        onlyDirectRoutes,\n        slippage,\n        platformFeeBps,\n        filterTopNResult,\n      });\n\n      return {\n        routesInfos,\n        /* indicate if the result is fetched or get from cache */\n        cached: !(forceFetch || shouldBustCache),\n      };\n    } catch (e) {\n      throw e;\n    } finally {\n      // clear cache if it is expired\n      this.routeCache.forEach(({ fetchTimestamp }, key) => {\n        if (fetchTimestamp - now > this.routeCacheDuration) {\n          this.routeCache.delete(key);\n        }\n      });\n    }\n  }\n\n  setUserPublicKey(userPublicKey: Keypair | PublicKey) {\n    this.user = userPublicKey;\n    const owner = new Owner(this.user);\n    this.serumOpenOrdersPromise = this.shouldLoadSerumOpenOrders\n      ? Jupiter.findSerumOpenOrdersForOwner({\n          connection: this.connection,\n          cluster: this.cluster,\n          userPublicKey: owner.publicKey,\n        })\n      : Promise.resolve(new Map());\n  }\n\n  /**\n   * The token route segments contains all the routes and the market meta information.\n   */\n  static async fetchTokenRouteSegments(connection: Connection, cluster: Cluster, marketUrl?: string) {\n    const marketCaches = await fetchMarketCache(marketUrl || MARKETS_URL[cluster]);\n    const amms = await getAllAmms(connection, marketCaches);\n\n    const tokenRouteSegments = getTokenRouteSegments(amms);\n\n    return tokenRouteSegments;\n  }\n\n  /**\n   * This generate a routeMap which represents every possible output token mint for a given input token mint.\n   * For example, we have SOL to USDC and this pairs have many routings like\n   * SOL => USDT\n   * USDT => USDC\n   * SOL => USDC\n   *\n   * From here we know that we can have 2 different routing of SOL => USDC.\n   * We do single level routing map but for all coins which result in the route map below:\n   * SOL => USDT, USDC\n   * USDT => SOL\n   * USDC => SOL, USDT\n   *\n   * From this route map we can map out all possible route from one to another by checking the intersection.\n   */\n  getRouteMap(onlyDirectRoutes?: boolean) {\n    return computeRouteMap(this.tokenRouteSegments, this.intermediateTokens, onlyDirectRoutes);\n  }\n\n  /**\n   * Query existing open order account, this query is slow.\n   * We suggest to fetch this in the background.\n   */\n  static findSerumOpenOrdersForOwner = async ({\n    userPublicKey,\n    cluster,\n    connection,\n  }: {\n    userPublicKey: PublicKey;\n    cluster: Cluster;\n    connection: Connection;\n  }) => {\n    const newMarketToOpenOrdersAddress: SerumOpenOrdersMap = new Map();\n\n    if (userPublicKey) {\n      const programId = cluster === 'mainnet-beta' ? MAINNET_SERUM_DEX_PROGRAM : DEVNET_SERUM_DEX_PROGRAM;\n\n      const allOpenOrders = await OpenOrders.findForOwner(connection, userPublicKey, programId);\n\n      allOpenOrders.forEach((openOrders) => {\n        newMarketToOpenOrdersAddress.set(openOrders.market.toString(), openOrders.address);\n      });\n    }\n    return newMarketToOpenOrdersAddress;\n  };\n\n  public exchange: (params: {\n    routeInfo: RouteInfo;\n    /**\n     * This will overwrite the default Jupiter.setUser, useful for stateless usage like API\n     */\n    userPublicKey?: PublicKey;\n    /**\n     * This will overwrite the default token ledger, useful for stateless usage like API\n     */\n    tokenLedger?: PublicKey;\n    /**\n     * This will overwrite the default fee account, useful for stateless usage like API\n     */\n    feeAccount?: PublicKey;\n    /**\n     * This will overwrite the default wrapUnwrapSOL, useful for stateless usage like API\n     */\n    wrapUnwrapSOL?: boolean;\n  }) => Promise<{\n    transactions: {\n      setupTransaction?: Transaction;\n      swapTransaction: Transaction;\n      cleanupTransaction?: Transaction;\n    };\n    execute: (params?: ExecuteParams) => Promise<SwapResult>;\n  }> = async ({ routeInfo, userPublicKey, feeAccount, wrapUnwrapSOL, tokenLedger }) => {\n    const { connection, serumOpenOrdersPromise } = this;\n    const user: PublicKey | Keypair | undefined = userPublicKey || this.user;\n    if (!user) {\n      throw new Error('user not found');\n    }\n\n    const owner = new Owner(user);\n\n    const lastMarketInfoIndex = routeInfo.marketInfos.length - 1;\n    const inputMint = routeInfo.marketInfos[0].inputMint;\n    const outputMint = routeInfo.marketInfos[lastMarketInfoIndex].outputMint;\n    const _wrapUnwrapSOL = wrapUnwrapSOL ?? this.wrapUnwrapSOL;\n\n    const [sourceInstruction, ataInstructions, openOrdersInstructions] = await Promise.all([\n      inputMint.equals(WRAPPED_SOL_MINT) && _wrapUnwrapSOL\n        ? createAndCloseWSOLAccount({\n            connection,\n            owner,\n            amount: routeInfo.inAmount,\n          })\n        : Token.getAssociatedTokenAddress(\n            ASSOCIATED_TOKEN_PROGRAM_ID,\n            TOKEN_PROGRAM_ID,\n            inputMint,\n            owner.publicKey,\n            true,\n          ).then((address) => ({\n            ...getEmptyInstruction(),\n            address,\n          })),\n      routeAtaInstructions({ connection, marketInfos: routeInfo.marketInfos, owner, unwrapSOL: _wrapUnwrapSOL }),\n      Promise.all(\n        routeInfo.marketInfos.map(async ({ amm }) => {\n          if (amm instanceof SerumAmm || amm instanceof SplitTradeAmm) {\n            if (!amm.market) return;\n            return await getOrCreateOpenOrdersAddress(\n              connection,\n              owner.publicKey,\n              amm.market,\n              await serumOpenOrdersPromise,\n            );\n          }\n          return;\n        }),\n      ),\n    ]);\n\n    const instructions = {\n      intermediate: ataInstructions.userIntermediaryTokenAccountResult,\n      destination: ataInstructions.userDestinationTokenAccountResult,\n      openOrders: openOrdersInstructions,\n    };\n\n    const hasOpenOrders = instructions.openOrders.filter(Boolean).length > 0;\n\n    // Construct platform fee\n    feeAccount = feeAccount || this.platformFeeAndAccounts.feeAccounts.get(outputMint.toBase58());\n\n    const platformFee = feeAccount\n      ? {\n          feeBps:\n            this.platformFeeAndAccounts.feeBps ||\n            Math.floor(routeInfo.marketInfos[lastMarketInfoIndex].platformFee.pct * 100),\n          feeAccount,\n        }\n      : undefined;\n\n    const preparedInstructions = await routeToInstructions({\n      user: owner,\n      tokenLedger: tokenLedger || this.tokenLedger,\n      openOrdersAddresses: instructions.openOrders.map((oo) => oo?.address),\n      userSourceTokenAccountAddress: sourceInstruction.address,\n      userIntermediaryTokenAccountAddress: instructions.intermediate?.address,\n      userDestinationTokenAccountAddress: instructions.destination.address,\n      routeInfo,\n      platformFee,\n      quoteMintToReferrer: this.quoteMintToReferrer,\n    });\n\n    const { needCleanup, needSetup } = isSplitSetupRequired(routeInfo.marketInfos, {\n      hasSerumOpenOrderInstruction: hasOpenOrders,\n    });\n\n    const setupTransactionBuilder = new TransactionBuilder(connection, owner.publicKey, owner);\n\n    const transactionBuilder = new TransactionBuilder(connection, owner.publicKey, owner);\n\n    const cleanupTransactionBuilder = new TransactionBuilder(connection, owner.publicKey, owner);\n\n    const ixs = [\n      instructions.intermediate,\n      sourceInstruction,\n      // if source address the same as destination address, then we don't need to setup or cleanup twice, mainly SOL-SOL\n      !instructions.destination.address.equals(sourceInstruction.address) && instructions.destination,\n    ];\n\n    if (needSetup) {\n      if (hasOpenOrders) {\n        instructions.openOrders.forEach((openOrders) => {\n          if (openOrders) {\n            setupTransactionBuilder.addInstruction(openOrders);\n          }\n        });\n      }\n\n      ixs.forEach((instruction) => {\n        if (instruction) {\n          // we cannot put cleanup here because we cannot do cleanup in setupTransaction\n          setupTransactionBuilder.addInstruction({\n            ...instruction,\n            cleanupInstructions: [],\n          });\n\n          if (instruction.cleanupInstructions.length) {\n            const cleanupIx = {\n              ...getEmptyInstruction(),\n              cleanupInstructions: instruction.cleanupInstructions,\n            };\n            if (needCleanup) {\n              cleanupTransactionBuilder.addInstruction(cleanupIx);\n            } else {\n              transactionBuilder.addInstruction(cleanupIx);\n            }\n          }\n        }\n      });\n    } else {\n      if (hasOpenOrders) {\n        instructions.openOrders.forEach((openOrders) => {\n          if (openOrders) {\n            transactionBuilder.addInstruction(openOrders);\n          }\n        });\n      }\n\n      ixs.forEach((instruction) => {\n        if (instruction) {\n          transactionBuilder.addInstruction(instruction);\n        }\n      });\n    }\n\n    transactionBuilder.addInstruction(preparedInstructions);\n\n    const recentBlockHash = (await this.connection.getLatestBlockhash('confirmed')).blockhash;\n\n    const { transaction: setupTransaction } = await setupTransactionBuilder.build(recentBlockHash);\n\n    const { transaction } = await transactionBuilder.build(recentBlockHash);\n\n    const { transaction: cleanupTransaction } = await cleanupTransactionBuilder.build(recentBlockHash);\n\n    const [setupTransactionObject, swapTransactionObject, cleanupTransactionObject] = [\n      setupTransaction.instructions.length ? setupTransaction : undefined,\n      transaction,\n      cleanupTransaction.instructions.length ? cleanupTransaction : undefined,\n    ];\n\n    const setupInstructions = instructions;\n    return {\n      transactions: {\n        setupTransaction: setupTransactionObject,\n        swapTransaction: swapTransactionObject,\n        cleanupTransaction: cleanupTransactionObject,\n      },\n      execute: ({ wallet, onTransaction }: ExecuteParams = {}) =>\n        this.executeInternal({\n          wallet,\n          onTransaction,\n          inputMint,\n          outputMint,\n          sourceInstruction,\n          setupInstructions,\n          setupTransaction: setupTransactionObject,\n          swapTransaction: swapTransactionObject,\n          cleanupTransaction: cleanupTransactionObject,\n          wrapUnwrapSOL: _wrapUnwrapSOL,\n          owner,\n        }),\n    };\n  };\n\n  /** sign, send and await confirmation for an exchange */\n  private async executeInternal({\n    wallet,\n    onTransaction,\n    inputMint,\n    outputMint,\n    sourceInstruction,\n    setupInstructions,\n    setupTransaction,\n    swapTransaction,\n    cleanupTransaction,\n    owner,\n    wrapUnwrapSOL,\n  }: {\n    wallet: ExecuteParams['wallet'];\n    onTransaction?: OnTransaction;\n    inputMint: PublicKey;\n    outputMint: PublicKey;\n    sourceInstruction: Instruction & { address: PublicKey };\n    setupInstructions: SetupInstructions;\n    setupTransaction?: Transaction;\n    swapTransaction: Transaction;\n    cleanupTransaction?: Transaction;\n    wrapUnwrapSOL?: boolean;\n    owner: Owner;\n  }): Promise<SwapResult> {\n    try {\n      const transactions = [setupTransaction, swapTransaction, cleanupTransaction].filter(\n        (tx): tx is Transaction => tx !== undefined,\n      );\n\n      const totalTxs = transactions.length;\n\n      if (owner.signer) {\n        const signer = owner.signer;\n        transactions.forEach((transaction) => {\n          transaction.sign(signer);\n        });\n      } else {\n        if (!wallet) {\n          throw new Error('Signer wallet not found');\n        }\n        if (totalTxs > 1) {\n          await wallet.signAllTransactions(transactions);\n        } else {\n          await wallet.signTransaction(transactions[0]);\n        }\n      }\n\n      if (setupTransaction) {\n        onTransaction?.(getSignature(setupTransaction), totalTxs, 'SETUP');\n\n        await validateTransactionResponse(\n          await transactionSenderAndConfirmationWaiter(this.connection, setupTransaction),\n        );\n      }\n\n      onTransaction?.(getSignature(swapTransaction), totalTxs, 'SWAP');\n\n      let swapError: Error | undefined;\n      let swapResult: SwapResult | undefined = undefined;\n\n      try {\n        const { txid, transactionResponse } = await validateTransactionResponse(\n          await transactionSenderAndConfirmationWaiter(this.connection, swapTransaction),\n        );\n\n        const [sourceTokenBalanceChange, destinationTokenBalanceChange] = getTokenBalanceChangesFromTransactionResponse(\n          {\n            txid,\n            inputMint,\n            outputMint,\n            user: owner.publicKey,\n            sourceAddress: sourceInstruction.address,\n            destinationAddress: setupInstructions.destination.address,\n            transactionResponse,\n            hasWrappedSOL: Boolean(cleanupTransaction) || !wrapUnwrapSOL,\n          },\n        );\n\n        swapResult = {\n          txid,\n          inputAddress: sourceInstruction.address,\n          outputAddress: setupInstructions.destination.address,\n          inputAmount: sourceTokenBalanceChange,\n          outputAmount: destinationTokenBalanceChange,\n        };\n      } catch (e: any) {\n        swapError = e;\n      } finally {\n        if (cleanupTransaction) {\n          onTransaction?.(getSignature(cleanupTransaction), totalTxs, 'CLEANUP');\n\n          // wait for confirmation but swallow error to conserve behaviour\n          await transactionSenderAndConfirmationWaiter(this.connection, cleanupTransaction);\n        }\n      }\n\n      if (swapError || !swapResult) {\n        throw swapError || new Error('Swap failed');\n      }\n\n      // return must be after `finally` clause to ensure we wait what we done in the `finally`\n      return swapResult;\n    } catch (error) {\n      return { error: error as TransactionError };\n    } finally {\n      this.routeCache.clear();\n    }\n  }\n\n  static async getIntermediateTokens() {\n    const intermediateTokensSet = await getTopTokens();\n    for (const swapProtocolToken of SWAP_PROTOCOL_TOKENS) {\n      intermediateTokensSet.add(swapProtocolToken);\n    }\n    const saberDecimalAmms = getSaberWrappedDecimalsAmms();\n\n    saberDecimalAmms.forEach((item) => {\n      intermediateTokensSet.add(item.wrappedToken.addDecimals.mint.toBase58());\n    });\n\n    return Array.from(intermediateTokensSet);\n  }\n\n  static createInitializeTokenLedgerInstruction = createInitializeTokenLedgerInstruction;\n}\n"],"names":["IDL","version","name","instructions","accounts","isMut","isSigner","args","type","option","defined","kind","fields","types","variants","errors","code","msg","WRAPPED_SOL_MINT","PublicKey","MAINNET_SERUM_DEX_PROGRAM","DEVNET_SERUM_DEX_PROGRAM","MARKETS_URL","devnet","testnet","TOKEN_LIST_URL","LAMPORTS_PER_SIGNATURE","RAYDIUM_AMM_V4_PROGRAM_ID","ALDRIN_SWAP_PROGRAM_ID","ALDRIN_SWAP_V2_PROGRAM_ID","SABER_ADD_DECIMALS_PROGRAM_ID","CROPPER_PROGRAM_ID","SENCHA_PROGRAM_ID","LIFINITY_PROGRAM_ID","CREMA_PROGRAM_ID","JUPITER_WALLET","MERCURIAL_SWAP_PROGRAM_ID","WHIRLPOOL_PROGRAM_ID","CYKURA_PROGRAM_ID","CYKURA_FACTORY_STATE_ADDRESS","SWAP_PROTOCOL_TOKENS","JUPITER_ERRORS","Object","freeze","TransactionNotConfirmed","BalancesNotExtractedProperly","reduce","accErrors","error","IS_DEV","process","PublicKeyLayout","Layout","constructor","property","layout","blob","span","getSpan","b","offset","decode","encode","src","toBuffer","publicKey","U64Layout","bn","u64","toArrayLike","Buffer","uint64","uint128","CropperTokenSwapLayout","struct","u8","CropperStateLayout","CROPPER_STATE_ADDRESS","accountInfoToCropperPoolState","address","accountInfo","programId","owner","decoded","data","authority","findProgramAddressSync","isInitialized","Boolean","nonce","ammId","serumProgramId","tokenProgramId","tokenAAccount","tokenBAccount","serumMarket","poolMint","mintA","mintB","stateAccountInfoToCropperState","stateOwner","feeOwner","initialSupply","returnFeeNumerator","toNumber","fixedFeeNumerator","feeDenominator","curveType","curveParameters","Side","Bid","bid","Ask","ask","JUPITER_PROGRAM_ID_PRODUCTION","JUPITER_PROGRAM_ID","JUPITER_PROGRAM","Program","PRODUCTION_TOKEN_LEDGERS","TOKEN_LEDGER","Math","floor","random","length","stableSwapNPoolIntoMercurialExchange","swayLayout","sourceTokenAccount","destinationTokenAccount","userTransferAuthority","swapProgram","swapState","tokenProgram","TOKEN_PROGRAM_ID","poolAuthority","raydiumAmmToRaydiumSwap","raydiumAmm","userSourceTokenAccount","userDestinationTokenAccount","ammAuthority","Uint8Array","from","replace","serumMarketKeys","Error","ammOpenOrders","poolCoinTokenAccount","poolPcTokenAccount","serumBids","serumAsks","serumEventQueue","serumCoinVaultAccount","serumPcVaultAccount","serumVaultSigner","userSourceOwner","marketIntoSerumSwap","market","openOrdersAddress","orderPayerTokenAccountAddress","coinWallet","pcWallet","vaultSigner","createProgramAddressSync","vaultSignerNonce","openOrders","requestQueue","eventQueue","bids","bidsAddress","asks","asksAddress","coinVault","baseVault","pcVault","quoteVault","orderPayerTokenAccount","dexProgram","rent","SYSVAR_RENT_PUBKEY","createMercurialExchangeInstruction","swapLayout","inAmount","minimumOutAmount","tokenLedger","platformFee","remainingAccounts","swapTokenAccount","tokenAccounts","push","pubkey","isWritable","prepareRemainingAccounts","feeAccount","instruction","mercurialExchange","BN","feeBps","createSerumSwapInstruction","sourceMint","referrer","side","equals","baseMintAddress","serumSwap","createTokenSwapInstruction","tokenSwapState","isStep","swapSource","swapDestination","tokenAccountA","tokenAccountB","stepTokenSwap","tokenSwap","tokenSwapProgram","swap","source","destination","poolToken","poolFee","createSenchaSwapInstruction","poolState","token0Mint","token0Reserves","token1Reserves","feesSource","feesDestination","token0Fees","token1Fees","senchaExchange","userAuthority","inputUserAccount","inputTokenAccount","inputFeesAccount","outputUserAccount","outputTokenAccount","outputFeesAccount","createCropperSwapInstruction","cropperTokenSwap","createRaydiumSwapInstruction","raydiumSwapV2","createAldrinSwapInstruction","userBaseTokenAccount","userQuoteTokenAccount","baseTokenMint","aldrinSwap","pool","poolSigner","baseTokenVault","quoteTokenVault","feePoolTokenAccount","walletAuthority","createAldrinV2SwapInstruction","curve","aldrinV2Swap","createCremaSwapInstruction","cremaTokenSwap","poolSourceTokenAccount","poolDestinationTokenAccount","poolTicksAccount","ticksKey","createRiskCheckAndFeeInstruction","riskCheckAndFee","createSetTokenLedgerInstruction","tokenAccountAddress","setTokenLedger","tokenAccount","createInitializeTokenLedgerInstruction","payer","initializeTokenLedger","systemProgram","SystemProgram","createOpenOrdersInstruction","ix","createOpenOrders","saberPoolIntoSaberSwap","saberPool","sourceMintAddress","feesTokenAccount","state","tokenA","mint","tokenB","adminFeeAccount","reserve","config","swapProgramID","swapAccount","swapAuthority","createSaberSwapInstruction","stableSwap","saberSwap","createSaberAddDecimalsDepositInstruction","addDecimals","saberAddDecimalsDeposit","addDecimalsProgram","wrapper","wrapperMint","wrapperUnderlyingTokens","userUnderlyingTokens","userWrappedTokens","createSaberAddDecimalsWithdrawInstruction","saberAddDecimalsWithdraw","createLifinitySwapInstruction","tokenAMint","lifinityTokenSwap","amm","sourceInfo","destinationInfo","pythAccount","pythPcAccount","configAccount","createCykuraSwapInstruction","additionalArgs","cykuraSwap","signer","factoryState","poolAddress","inputVault","outputVault","lastObservationState","coreProgram","concat","swapAccountMetas","nextObservationState","createWhirlpoolSwapInstruction","tokenOwnerAccountA","tokenOwnerAccountB","aToB","whirlpoolSwap","tokenAuthority","whirlpool","tokenVaultA","tokenVaultB","tickArray0","tickArray1","tickArray2","oracle","getSaberWrappedDecimalsAmms","addDecimalsJson","map","addDecimalJson","underlying","underlyingDecimals","decimals","SaberAddDecimalsAmm","WrappedToken","multiplier","getOutputAmount","inputAmount","inputMint","calculateWithdrawOutputAmount","calculateDepositOutputAmount","toString","JSBI","multiply","BigInt","divide","wrappedToken","id","label","shouldPrefetch","toBase58","getAccountsForUpdate","Array","update","_accountInfoMap","getQuote","amount","outAmount","notEnoughLiquidity","feeAmount","feeMint","feePct","priceImpactPct","createSwapInstructions","swapParams","reserveTokenMints","getTwoPermutations","array","acc","item","forEach","otherItem","chunks","size","apply","ceil","_","index","slice","chunkedGetMultipleAccountInfos","connection","pks","batchChunkSize","maxAccountsChunkSize","Promise","all","batchPubkeys","batch","pubkeys","methodName","_buildArgs","commitment","_rpcBatchRequest","then","batchResults","res","result","value","catch","e","flat","mapAddressToAccountInfos","accountInfoMap","addresses","accountInfos","get","tokenAccountsToJSBIs","prefetchAmms","amms","accountInfosMap","Map","set","AMM_INFO_LAYOUT_V4","nu64","RaydiumAmm","ammAccountInfo","params","coinMint","pcMint","status","ammTargetOrders","coinReserve","pcReserve","calculator","coinMintAddress","pcMintAddress","keys","pk","swapFeeNumerator","swapFeeDenominator","Decimal","div","TokenSwapConstantProduct","Fraction","ZERO_FRACTION","decodeSerumMarketKeysString","serumMarketInfo","decodedMarket","Market","getLayout","poolCoinTokenAccountInfo","poolPcTokenAccountInfo","ammOpenOrdersAccountInfo","coinAmount","pcAmount","tokenAmountAccessor","OpenOrders","fromAccountInfo","add","baseTokenTotal","sub","String","needTakePnlCoin","quoteTokenTotal","needTakePnlPc","tokenAccountInfo","fromBuffer","outputIndex","exchange","expectedOutputAmount","fees","priceImpact","TAKER_FEE_PCT","STABLE_TAKER_FEE_PCT","STABLE_MARKET_ADDRESSES","getOutAmountMeta","fromAmount","fromMint","toMint","takerFeePct","includes","quoteMintAddress","forecastBuy","forecastSell","orderbook","pcIn","coinOut","bestPrice","worstPrice","totalCost","totalCoins","quoteSizeLots","quoteSizeLotsToNumber","availablePc","ZERO","baseSizeLots","baseSizeLotsToNumber","lotPrice","lotQuantity","getL2","equal","orderCoinAmount","orderPcAmount","greaterThanOrEqual","numberLotsPurchasable","subtract","bestPriceDecimal","worstPriceDecimal","bestPriceSizeLots","priceLotsToDecimal","totalCostSizeLots","lessThanOrEqual","minimum","in","mul","out","coinIn","pcOut","totalCoin","availableCoin","numberLotsCanSell","totalCoinAmountToSell","pcOutInteger","minus","greaterThan","round","descending","isBids","key","quantity","slab","items","price","ushrn","divideBnToDecimal","numerator","denominator","quotient","rem","umod","gcd","baseLotSize","_decoded","isZero","quoteLotSize","_baseSplTokenMultiplier","_quoteSplTokenMultiplier","SerumAmm","_orderbooks","orderbooks","asksAccountInfo","bidsAccountInfo","Orderbook","destinationMint","outAmountMeta","minInAmount","minOutAmount","quoteMintToReferrer","isSplitSupported","firstAmm","secondAmm","SplitTradeAmm","portion1","portion2","getAmmIdsFromSplitTradeAmmId","ammIds","split","create","firstAmmTwoPermutations","secondAmmTwoPermutations","firstAmmTwoPermutation","secondAmmTwoPermutation","every","setPortions","labelWithPortions","portion","sort","a","join","quoteParams","sourceMintString","bestSolution","firstQuote","undefined","secondQuote","p","firstAmount","secondAmount","firstAmmFee","secondAmmFee","isValidRoute","ammA","ammB","isSerumAndRaydium","marketInfos","mi","SaberAmm","Stable","TWO","calculateAmpFactor","ONE","trade","tokenAccountInfos","info","deserializeAccount","asFraction","toFixed","inputIndex","setAmp","Percentage","fromDecimal","number","fromFraction","toDecimalPlaces","num","denom","toDecimal","eq","p2","denomGcd","denomLcm","p1DenomAdjustment","p2DenomAdjustment","p1NumeratorAdjusted","p2NumeratorAdjusted","newNumerator","FEES_LAYOUT","POOL_FIELDS_COMMON","POOL_LAYOUT","POOL_V2_LAYOUT","STABLE_CURVE_LAYOUT","accountInfoToAldrinPoolState","isV2","curveObject","quoteTokenMint","feeBaseAccount","feeQuoteAccount","traderFee","tradeFeeNumerator","tradeFeeDenominator","ownerFee","ownerTradeFeeNumerator","ownerTradeFeeDenominator","AldrinAmm","amp","TokenSwapStable","decodeStableCurveAmp","STEP_TOKEN_SWAP_PROGRAM_ID","PROGRAM_ID_TO_LABEL","TokenSwapLayout","StepTokenSwapLayout","accountInfoToTokenSwapState","tokenSwapAccountInfo","tokenSwapData","tokenPool","ownerWithdrawFeeNumerator","ownerWithdrawFeeDenominator","poolNonce","CurveType","SplTokenSwapAmm","swapStateAccountInfo","ConstantProduct","FEE_DENOMINATOR","pow","MercurialSwapLayout","u32","accountInfoToMercurialSwapLayout","tokenAccountsLength","precisionMultipliers","precisionMultiplierA","precisionMultiplierB","precisionMultiplierC","precisionMultiplierD","tokenAccountC","tokenAccountD","amplificationCoefficient","feeNumerator","precisionFactor","MercurialAmm","precisionMultiplier","filter","x","findIndex","tokenMints","tokenMint","decodeSwapLayout","CropperAmm","getStateFromStateAccount","getAccountInfo","tokenAFeeAccount","tokenBFeeAccount","decodePoolState","accountInfoToCremaPoolState","TokenSwapAccountLayout","swapTokenA","swapTokenB","tokenBMint","fee","currentSqrtPrice","currentLiquity","CremaAmm","ticks","ticksAccountInfo","ticksInfo","parseTicksAccount","preSwapA","preSwapB","revert","amountOut","feeUsed","impact","amountIn","calculateSwapA2B","currentPriceA","transactionPriceA","amountUsed","abs","lessThan","calculateSwapB2A","currentPriceB","transactionPriceB","SenchaSwapLayout","accountInfoToSenchaPoolState","isPaused","bump","token1Mint","tradeFeeKbps","SenchaAmm","swapStateToPoolInfo","poolCoinMint","poolPcMint","poolCoinDecimal","poolPcDecimal","poolMintDecimal","pythBaseDecimal","accountInfoLifinitySwapLayout","LIFINITY_AMM_LAYOUT","poolFeeAccount","LifinityAmm","poolInfo","idx","account","tradeDirection","TradeDirection","AtoB","BtoA","pyth","pythPc","coinBalance","pcBalance","getParsedData","getCurveAmount","publishSlot","amountSwapped","feePercent","FEE_RATE_MUL_VALUE","fromX64","parseWhirlpoolSafe","whirlpoolData","parseWhirlpool","WhirlpoolAmm","whirlpoolAccountInfo","tickArrays","tickPks","feeRate","getTickArrayPks","clear","tickArrayPk","tickArrayAddress","tickArrayAccountInfo","tickArray","parseTickArray","swapQuote","getSwapQuote","tokenAmount","isInput","Number","quotePrice","currentPrice","sqrtPrice","tokenMintA","getTickArrayPublicKeysForSwap","tickCurrentIndex","tickSpacing","tokenMintB","SolanaTickDataProvider","program","bitmapCache","tickCache","accountsToFetch","bitmaps","eagerLoadCache","tickCurrent","compressed","wordPos","tickPosition","bitmapsToFetch","WORD_POS_MIN","TickMath","MIN_TICK","WORD_POS_MAX","MAX_TICK","minWord","max","maxWord","min","i","getBitmapAddressSync","fetchedBitmaps","tickBitmapState","fetchMultiple","tickAddresses","currentWordPos","wordArray","word","generateBitmapWord","eqn","j","shrn","and","tick","tickAddress","getTickAddressSync","fetchedTicks","tickState","fetchedTick","liquidityNet","lazyLoadAccountsToCache","bitmap","tickAddressesToFetch","getTick","savedTick","getTickAddress","TICK_SEED","token0","token1","u32ToSeed","getBitmapAddress","BITMAP_SEED","u16ToSeed","getBitmap","savedBitmap","nextInitializedTickWithinOneWord","lte","bitPos","cachedBitmap","next","nextBit","initialized","nextInitializedBit","nextTick","buildTick","updateCachedAccountInfos","bitmapAddress","bitmapAccountInfo","coder","tickStateAccountInfo","provider","anchor","Provider","skipPreflight","CYCLOS_CORE","CykuraAmm","accountInfoOrPoolState","tickDataProvider","tokens","vaults","sqrtPriceX32","liquidity","Token","CykuraPool","vault0","ASSOCIATED_TOKEN_PROGRAM_ID","vault1","poolAccountInfo","inputToken","currentOutAmount","newPool","CurrencyAmount","fromRawAmount","priceImpactDecimal","sqrtRatioX32","OBSERVATION_SEED","observationIndex","observationCardinalityNext","ammFactory","SerumMarket","accountFlags","SABER_SWAP_PROGRAM_ID","StableSwap","loadWithData","senchaAmm","fetchMarketCache","url","marketsCache","fetch","json","fetchExtraKeyedAccountInfos","extraKeyedAccountInfos","getAllAmms","marketCacheToAccountInfo","format","rest","marketKeyedAccountInfos","extraKeys","keyedAccountInfo","ammCrossProtocolPairs","arr","callback","getTokenRouteSegments","tokenRouteSegments","reserveTokenMintPermutations","firstReserveMint","secondReserveMint","addSegment","inMint","outMint","segments","computeInputRouteSegments","outputMint","intermediateTokens","inputRouteSegments","inputSegment","outputSegment","inputInnerMap","outputInnerMap","entries","intersectionAmms","computeRouteMap","onlyDirectRoutes","routeMap","firstLevelOutputs","validOutputMints","Set","firstLevelOutputMint","firstLevelAmms","secondLevelOutputs","secondLevelOutputMint","secondLevelAmms","firstLevelAmm","secondLevelAmm","isSplitSetupRequired","hasSerumOpenOrderInstruction","needSetup","needCleanup","marketInfo","isPlatformFeeSupported","firstMarket","secondMarket","getRouteInfoUniqueId","routeInfo","getEmptyInstruction","cleanupInstructions","signers","createAndCloseWSOLAccount","toAccount","getAssociatedTokenAddress","createAssociatedTokenAccountInstruction","transfer","fromPubkey","toPubkey","lamports","createSyncNativeInstruction","createCloseAccountInstruction","findOrCreateAssociatedAccountByMint","mintAddress","unwrapSOL","associatedToken","associatedTokenProgramId","TransactionInstruction","alloc","routeToInstructions","user","openOrdersAddresses","userSourceTokenAccountAddress","userIntermediaryTokenAccountAddress","userDestinationTokenAccountAddress","outAmountWithSlippage","legs","effectiveQuoteMintToReferrer","userIntermediateTokenAccountAddresses","userTokenAccountAddresses","platformFeeSupported","legInputAmount","legOutAmountWithSlippage","legPlatformFee","isKeyPair","routeAtaInstructions","getUserIntermediateTokenAccountAddress","userIntermediateTokenAccountAddress","getUserDestinationTokenAccountAddress","userIntermediaryTokenAccountResult","userDestinationTokenAccountResult","getOrCreateOpenOrdersAddress","marketToOpenOrdersAddress","marketAddress","openOrdersAccountInfo","newOpenOrdersAddress","newOpenOrdersAddressInfo","SERUM_OPEN_ACCOUNT_LAMPORTS","OPEN_TOKEN_ACCOUNT_LAMPORTS","sum","values","calculateTransactionDepositAndFee","intermediate","hasWrapUnwrapSOL","feeCalculator","openOrdersDeposits","ooi","ataDeposits","signatureFee","oo","lamportsPerSignature","totalFeeAndDeposits","minimumSOLForTransaction","getDepositAndFeeFromInstructions","serumOpenOrdersPromise","wrapUnwrapSOL","openOrdersInstructionsPromise","promise","openOrdersInstructions","instructionResult","NO_PLATFORM_FEE","feeAccounts","getPlatformFeeAccounts","feeAccountOwner","getTokenAccountsByOwner","deserializedtokenAccount","TransactionBuilder","feePayer","addInstruction","build","recentBlockHash","getLatestBlockhash","blockhash","txFields","recentBlockhash","curr","transaction","Transaction","execute","sendTransaction","Owner","_owner","isPublicKey","secretKey","wait","time","resolve","setTimeout","diffTokenBalance","accountKeyIndex","meta","postBalance","postTokenBalances","find","postTokenBalance","accountIndex","uiTokenAmount","preBalance","preTokenBalances","preTokenBalance","parseInt","extractTokenBalanceChangeFromTransaction","message","accountKeys","extractSOLChangeFromTransaction","postBalances","preBalances","getTokenBalanceChangesFromTransactionResponse","txid","sourceAddress","destinationAddress","transactionResponse","hasWrappedSOL","sourceTokenBalanceChange","destinationTokenBalanceChange","TransactionError","getUnixTs","Date","getTime","SEND_OPTIONS","maxRetries","transactionSenderAndConfirmationWaiter","signedTransaction","timeout","pollInterval","sendInterval","sendRetries","rawTransaction","serialize","sendRawTransaction","start","lastSendTimestamp","retries","timestamp","response","any","getTransaction","getSignature","signature","bs58","validateInput","arrays","isArray","TypeError","validateArray","validateDimensions","validateCombinations","MAX_DIMENSIONS","multiplySize","MAX_SIZE","sizeStr","isFinite","toExponential","fastCartesian","loopFunc","getLoopFunc","cachedLoopFunc","cache","mGetLoopFunc","indexes","getIndex","middle","end","repeat","Function","PLATFORM_FEE_DENOMINATOR","fetchAccountInfos","routes","accountsToFetchSet","ammMap","innerMap","getInputOutputId","getQuoteId","getQuoteMap","filterTopNResult","quotes","quote","MAX_LEVEL","processInputRouteSegmentToRoutesInfos","inputRouteSegment","getDepositAndFeeForRoute","platformFeeBps","slippage","inputMintString","outputMintString","tradeIdQuoteMap","inputMintInnerMap","maxLevel","walkTheTree","level","walked","tradeId","quoteMap","filteredAmms","has","splitTradeAmm","mints","_mints","ammsArr","permutations","routesInfo","route","intermediateAmount","cacheQuote","pct","outAmountAfterFees","lpFee","getDepositAndFee","priceFactor","validateTransactionResponse","err","parseErrorForTransaction","getTopTokens","topTokens","Jupiter","cluster","platformFeeAndAccounts","routeCacheDuration","shouldLoadSerumOpenOrders","routeCache","getDepositAndFees","userPublicKey","getDepositAndFeesForUser","lastMarketInfoIndex","_wrapUnwrapSOL","sourceInstruction","ataInstructions","hasOpenOrders","preparedInstructions","setupTransactionBuilder","transactionBuilder","cleanupTransactionBuilder","ixs","cleanupIx","setupTransaction","cleanupTransaction","setupTransactionObject","swapTransactionObject","cleanupTransactionObject","setupInstructions","transactions","swapTransaction","wallet","onTransaction","executeInternal","load","marketUrl","restrictIntermediateTokens","_quoteMintToReferrer","fetchTokenRouteSegments","getRecentBlockhashAndContext","getIntermediateTokens","jupiter","setUserPublicKey","getAccountToAmmMap","accountToAmmMap","tokenRouteSegment","computeRoutes","forceFetch","now","inputMintAndOutputMint","localeCompare","shouldBustCache","fetchTimestamp","routesInfos","cached","delete","findSerumOpenOrdersForOwner","marketCaches","getRouteMap","tx","totalTxs","sign","signAllTransactions","signTransaction","swapError","swapResult","inputAddress","outputAddress","outputAmount","intermediateTokensSet","swapProtocolToken","saberDecimalAmms","newMarketToOpenOrdersAddress","allOpenOrders","findForOwner"],"mappings":"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"}