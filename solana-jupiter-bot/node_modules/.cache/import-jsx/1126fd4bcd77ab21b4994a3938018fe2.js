const React = require("react");
const {
  Box,
  Text
} = require("ink");
const {
  useContext,
  useState,
  useRef,
  useEffect
} = require("react");
const WizardContext = require("../WizardContext");
const {
  default: TextInput
} = require("ink-text-input");
function MinProfit() {
  let isMountedRef = useRef(false);
  const {
    config: {
      profit: {
        value: profitValue
      }
    },
    configSetValue
  } = useContext(WizardContext);
  const [minProfit, setMinProfit] = useState(profitValue.toString());
  const [inputBorderColor, setInputBorderColor] = useState("gray");
  const handleMinProfitSubmit = value => {
    configSetValue("profit", value);
  };
  const handleMinProfitChange = value => {
    if (!isMountedRef.current) return;
    const badChars = /[^0-9.]/g;
    badChars.test(value) ? setInputBorderColor("red") : setInputBorderColor("gray");
    const sanitizedValue = value.replace(badChars, "");
    setMinProfit(sanitizedValue);
    setTimeout(() => isMountedRef.current && setInputBorderColor("gray"), 100);
  };
  useEffect(() => {
    isMountedRef.current = true;
    return () => isMountedRef.current = false;
  }, []);
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column"
  }, /*#__PURE__*/React.createElement(Text, null, "Set ", /*#__PURE__*/React.createElement(Text, {
    color: "#cdadff"
  }, "min. profit"), " value:"), /*#__PURE__*/React.createElement(Box, {
    flexDirection: "row",
    alignItems: "center"
  }, /*#__PURE__*/React.createElement(Text, null, "Min. Profit:"), /*#__PURE__*/React.createElement(Box, {
    borderStyle: "round",
    borderColor: inputBorderColor,
    marginLeft: 1
  }, /*#__PURE__*/React.createElement(TextInput, {
    value: minProfit,
    onChange: handleMinProfitChange,
    onSubmit: handleMinProfitSubmit
  })), /*#__PURE__*/React.createElement(Text, null, "%")));
}
module.exports = MinProfit;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJCb3giLCJUZXh0IiwidXNlQ29udGV4dCIsInVzZVN0YXRlIiwidXNlUmVmIiwidXNlRWZmZWN0IiwiV2l6YXJkQ29udGV4dCIsImRlZmF1bHQiLCJUZXh0SW5wdXQiLCJNaW5Qcm9maXQiLCJpc01vdW50ZWRSZWYiLCJjb25maWciLCJwcm9maXQiLCJ2YWx1ZSIsInByb2ZpdFZhbHVlIiwiY29uZmlnU2V0VmFsdWUiLCJtaW5Qcm9maXQiLCJzZXRNaW5Qcm9maXQiLCJ0b1N0cmluZyIsImlucHV0Qm9yZGVyQ29sb3IiLCJzZXRJbnB1dEJvcmRlckNvbG9yIiwiaGFuZGxlTWluUHJvZml0U3VibWl0IiwiaGFuZGxlTWluUHJvZml0Q2hhbmdlIiwiY3VycmVudCIsImJhZENoYXJzIiwidGVzdCIsInNhbml0aXplZFZhbHVlIiwicmVwbGFjZSIsInNldFRpbWVvdXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiUHJvZml0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFJlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuY29uc3QgeyBCb3gsIFRleHQgfSA9IHJlcXVpcmUoXCJpbmtcIik7XG5jb25zdCB7IHVzZUNvbnRleHQsIHVzZVN0YXRlLCB1c2VSZWYsIHVzZUVmZmVjdCB9ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuY29uc3QgV2l6YXJkQ29udGV4dCA9IHJlcXVpcmUoXCIuLi9XaXphcmRDb250ZXh0XCIpO1xuXG5jb25zdCB7IGRlZmF1bHQ6IFRleHRJbnB1dCB9ID0gcmVxdWlyZShcImluay10ZXh0LWlucHV0XCIpO1xuXG5mdW5jdGlvbiBNaW5Qcm9maXQoKSB7XG5cdGxldCBpc01vdW50ZWRSZWYgPSB1c2VSZWYoZmFsc2UpO1xuXHRjb25zdCB7XG5cdFx0Y29uZmlnOiB7XG5cdFx0XHRwcm9maXQ6IHsgdmFsdWU6IHByb2ZpdFZhbHVlIH0sXG5cdFx0fSxcblx0XHRjb25maWdTZXRWYWx1ZSxcblx0fSA9IHVzZUNvbnRleHQoV2l6YXJkQ29udGV4dCk7XG5cblx0Y29uc3QgW21pblByb2ZpdCwgc2V0TWluUHJvZml0XSA9IHVzZVN0YXRlKHByb2ZpdFZhbHVlLnRvU3RyaW5nKCkpO1xuXHRjb25zdCBbaW5wdXRCb3JkZXJDb2xvciwgc2V0SW5wdXRCb3JkZXJDb2xvcl0gPSB1c2VTdGF0ZShcImdyYXlcIik7XG5cblx0Y29uc3QgaGFuZGxlTWluUHJvZml0U3VibWl0ID0gKHZhbHVlKSA9PiB7XG5cdFx0Y29uZmlnU2V0VmFsdWUoXCJwcm9maXRcIiwgdmFsdWUpO1xuXHR9O1xuXG5cdGNvbnN0IGhhbmRsZU1pblByb2ZpdENoYW5nZSA9ICh2YWx1ZSkgPT4ge1xuXHRcdGlmICghaXNNb3VudGVkUmVmLmN1cnJlbnQpIHJldHVybjtcblxuXHRcdGNvbnN0IGJhZENoYXJzID0gL1teMC05Ll0vZztcblx0XHRiYWRDaGFycy50ZXN0KHZhbHVlKVxuXHRcdFx0PyBzZXRJbnB1dEJvcmRlckNvbG9yKFwicmVkXCIpXG5cdFx0XHQ6IHNldElucHV0Qm9yZGVyQ29sb3IoXCJncmF5XCIpO1xuXHRcdGNvbnN0IHNhbml0aXplZFZhbHVlID0gdmFsdWUucmVwbGFjZShiYWRDaGFycywgXCJcIik7XG5cdFx0c2V0TWluUHJvZml0KHNhbml0aXplZFZhbHVlKTtcblx0XHRzZXRUaW1lb3V0KCgpID0+IGlzTW91bnRlZFJlZi5jdXJyZW50ICYmIHNldElucHV0Qm9yZGVyQ29sb3IoXCJncmF5XCIpLCAxMDApO1xuXHR9O1xuXG5cdHVzZUVmZmVjdCgoKSA9PiB7XG5cdFx0aXNNb3VudGVkUmVmLmN1cnJlbnQgPSB0cnVlO1xuXHRcdHJldHVybiAoKSA9PiAoaXNNb3VudGVkUmVmLmN1cnJlbnQgPSBmYWxzZSk7XG5cdH0sIFtdKTtcblxuXHRyZXR1cm4gKFxuXHRcdDxCb3ggZmxleERpcmVjdGlvbj1cImNvbHVtblwiPlxuXHRcdFx0PFRleHQ+XG5cdFx0XHRcdFNldCA8VGV4dCBjb2xvcj1cIiNjZGFkZmZcIj5taW4uIHByb2ZpdDwvVGV4dD4gdmFsdWU6XG5cdFx0XHQ8L1RleHQ+XG5cblx0XHRcdDxCb3ggZmxleERpcmVjdGlvbj1cInJvd1wiIGFsaWduSXRlbXM9XCJjZW50ZXJcIj5cblx0XHRcdFx0PFRleHQ+TWluLiBQcm9maXQ6PC9UZXh0PlxuXHRcdFx0XHQ8Qm94IGJvcmRlclN0eWxlPVwicm91bmRcIiBib3JkZXJDb2xvcj17aW5wdXRCb3JkZXJDb2xvcn0gbWFyZ2luTGVmdD17MX0+XG5cdFx0XHRcdFx0PFRleHRJbnB1dFxuXHRcdFx0XHRcdFx0dmFsdWU9e21pblByb2ZpdH1cblx0XHRcdFx0XHRcdG9uQ2hhbmdlPXtoYW5kbGVNaW5Qcm9maXRDaGFuZ2V9XG5cdFx0XHRcdFx0XHRvblN1Ym1pdD17aGFuZGxlTWluUHJvZml0U3VibWl0fVxuXHRcdFx0XHRcdC8+XG5cdFx0XHRcdDwvQm94PlxuXHRcdFx0XHQ8VGV4dD4lPC9UZXh0PlxuXHRcdFx0PC9Cb3g+XG5cdFx0PC9Cb3g+XG5cdCk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IE1pblByb2ZpdDtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBTyxDQUFDO0FBQzlCLE1BQU07RUFBRUMsR0FBRztFQUFFQztBQUFLLENBQUMsR0FBR0YsT0FBTyxDQUFDLEtBQUssQ0FBQztBQUNwQyxNQUFNO0VBQUVHLFVBQVU7RUFBRUMsUUFBUTtFQUFFQyxNQUFNO0VBQUVDO0FBQVUsQ0FBQyxHQUFHTixPQUFPLENBQUMsT0FBTyxDQUFDO0FBQ3BFLE1BQU1PLGFBQWEsR0FBR1AsT0FBTyxDQUFDLGtCQUFrQixDQUFDO0FBRWpELE1BQU07RUFBRVEsT0FBTyxFQUFFQztBQUFVLENBQUMsR0FBR1QsT0FBTyxDQUFDLGdCQUFnQixDQUFDO0FBRXhELFNBQVNVLFNBQVMsR0FBRztFQUNwQixJQUFJQyxZQUFZLEdBQUdOLE1BQU0sQ0FBQyxLQUFLLENBQUM7RUFDaEMsTUFBTTtJQUNMTyxNQUFNLEVBQUU7TUFDUEMsTUFBTSxFQUFFO1FBQUVDLEtBQUssRUFBRUM7TUFBWTtJQUM5QixDQUFDO0lBQ0RDO0VBQ0QsQ0FBQyxHQUFHYixVQUFVLENBQUNJLGFBQWEsQ0FBQztFQUU3QixNQUFNLENBQUNVLFNBQVMsRUFBRUMsWUFBWSxDQUFDLEdBQUdkLFFBQVEsQ0FBQ1csV0FBVyxDQUFDSSxRQUFRLEVBQUUsQ0FBQztFQUNsRSxNQUFNLENBQUNDLGdCQUFnQixFQUFFQyxtQkFBbUIsQ0FBQyxHQUFHakIsUUFBUSxDQUFDLE1BQU0sQ0FBQztFQUVoRSxNQUFNa0IscUJBQXFCLEdBQUlSLEtBQUssSUFBSztJQUN4Q0UsY0FBYyxDQUFDLFFBQVEsRUFBRUYsS0FBSyxDQUFDO0VBQ2hDLENBQUM7RUFFRCxNQUFNUyxxQkFBcUIsR0FBSVQsS0FBSyxJQUFLO0lBQ3hDLElBQUksQ0FBQ0gsWUFBWSxDQUFDYSxPQUFPLEVBQUU7SUFFM0IsTUFBTUMsUUFBUSxHQUFHLFVBQVU7SUFDM0JBLFFBQVEsQ0FBQ0MsSUFBSSxDQUFDWixLQUFLLENBQUMsR0FDakJPLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxHQUMxQkEsbUJBQW1CLENBQUMsTUFBTSxDQUFDO0lBQzlCLE1BQU1NLGNBQWMsR0FBR2IsS0FBSyxDQUFDYyxPQUFPLENBQUNILFFBQVEsRUFBRSxFQUFFLENBQUM7SUFDbERQLFlBQVksQ0FBQ1MsY0FBYyxDQUFDO0lBQzVCRSxVQUFVLENBQUMsTUFBTWxCLFlBQVksQ0FBQ2EsT0FBTyxJQUFJSCxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsRUFBRSxHQUFHLENBQUM7RUFDM0UsQ0FBQztFQUVEZixTQUFTLENBQUMsTUFBTTtJQUNmSyxZQUFZLENBQUNhLE9BQU8sR0FBRyxJQUFJO0lBQzNCLE9BQU8sTUFBT2IsWUFBWSxDQUFDYSxPQUFPLEdBQUcsS0FBTTtFQUM1QyxDQUFDLEVBQUUsRUFBRSxDQUFDO0VBRU4sb0JBQ0Msb0JBQUMsR0FBRztJQUFDLGFBQWEsRUFBQztFQUFRLGdCQUMxQixvQkFBQyxJQUFJLDZCQUNBLG9CQUFDLElBQUk7SUFBQyxLQUFLLEVBQUM7RUFBUyxpQkFBbUIsWUFDdEMsZUFFUCxvQkFBQyxHQUFHO0lBQUMsYUFBYSxFQUFDLEtBQUs7SUFBQyxVQUFVLEVBQUM7RUFBUSxnQkFDM0Msb0JBQUMsSUFBSSx1QkFBb0IsZUFDekIsb0JBQUMsR0FBRztJQUFDLFdBQVcsRUFBQyxPQUFPO0lBQUMsV0FBVyxFQUFFSixnQkFBaUI7SUFBQyxVQUFVLEVBQUU7RUFBRSxnQkFDckUsb0JBQUMsU0FBUztJQUNULEtBQUssRUFBRUgsU0FBVTtJQUNqQixRQUFRLEVBQUVNLHFCQUFzQjtJQUNoQyxRQUFRLEVBQUVEO0VBQXNCLEVBQy9CLENBQ0csZUFDTixvQkFBQyxJQUFJLFlBQVMsQ0FDVCxDQUNEO0FBRVI7QUFDQVEsTUFBTSxDQUFDQyxPQUFPLEdBQUdyQixTQUFTIn0=