const React = require("react");
const {
  Box,
  Text,
  useApp
} = require("ink");
const WizardContext = require("../WizardContext");
const {
  useContext,
  useEffect,
  useState
} = require("react");
const {
  default: TextInput
} = require("ink-text-input");
const chalk = require("chalk");
const {
  createConfigFile,
  verifyConfig
} = require("../../utils");
const Confirm = () => {
  const {
    exit
  } = useApp();
  const {
    config: {
      network: {
        value: network
      },
      rpc: {
        value: rpc
      },
      strategy: {
        value: strategy
      },
      tokens: {
        value: tokens
      },
      "trading size": {
        value: tradingSize
      },
      profit: {
        value: profit
      },
      slippage: {
        value: slippage
      },
      advanced: {
        value: advanced
      }
    },
    config
  } = useContext(WizardContext);
  const [isConfigOk, setIsConfigOk] = useState({
    result: false,
    badConfig: []
  });
  useEffect(() => {
    setIsConfigOk(verifyConfig(config));
  }, []);
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column"
  }, /*#__PURE__*/React.createElement(Text, null, "Confirm your settings:"), /*#__PURE__*/React.createElement(Box, {
    margin: 1,
    flexDirection: "column"
  }, /*#__PURE__*/React.createElement(Text, null, "Network: ", chalk.greenBright(network)), /*#__PURE__*/React.createElement(Text, null, "RPC: ", chalk.greenBright(rpc)), /*#__PURE__*/React.createElement(Text, null, "Strategy: ", chalk.bold.greenBright(strategy)), /*#__PURE__*/React.createElement(Text, null, "Tokens: ", chalk.bold.blueBright(tokens.tokenA.symbol), " /", " ", chalk.bold.blueBright(tokens.tokenB.symbol)), /*#__PURE__*/React.createElement(Text, null, "Trading size: ", chalk.bold.greenBright(tradingSize.value), " ", chalk.gray(tokens.tokenA.symbol), " |", " ", chalk.greenBright(tradingSize.strategy)), /*#__PURE__*/React.createElement(Text, null, "Profit: ", chalk.bold.greenBright(profit)), /*#__PURE__*/React.createElement(Text, null, "Slippage: ", chalk.bold.greenBright(slippage)), /*#__PURE__*/React.createElement(Text, {
    color: "gray"
  }), /*#__PURE__*/React.createElement(Text, null, "Min Interval: ", chalk.bold.greenBright(advanced.minInterval))), isConfigOk.result ? /*#__PURE__*/React.createElement(TextInput, {
    value: `${chalk.bold.greenBright("[ CONFIRM ]")}`,
    showCursor: false,
    onSubmit: async () => {
      createConfigFile(config);
      exit();
    }
  }) : /*#__PURE__*/React.createElement(Text, null, "Error on step:", " ", /*#__PURE__*/React.createElement(Text, {
    color: "red"
  }, isConfigOk.badConfig.join(", "))));
};
module.exports = Confirm;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJCb3giLCJUZXh0IiwidXNlQXBwIiwiV2l6YXJkQ29udGV4dCIsInVzZUNvbnRleHQiLCJ1c2VFZmZlY3QiLCJ1c2VTdGF0ZSIsImRlZmF1bHQiLCJUZXh0SW5wdXQiLCJjaGFsayIsImNyZWF0ZUNvbmZpZ0ZpbGUiLCJ2ZXJpZnlDb25maWciLCJDb25maXJtIiwiZXhpdCIsImNvbmZpZyIsIm5ldHdvcmsiLCJ2YWx1ZSIsInJwYyIsInN0cmF0ZWd5IiwidG9rZW5zIiwidHJhZGluZ1NpemUiLCJwcm9maXQiLCJzbGlwcGFnZSIsImFkdmFuY2VkIiwiaXNDb25maWdPayIsInNldElzQ29uZmlnT2siLCJyZXN1bHQiLCJiYWRDb25maWciLCJncmVlbkJyaWdodCIsImJvbGQiLCJibHVlQnJpZ2h0IiwidG9rZW5BIiwic3ltYm9sIiwidG9rZW5CIiwiZ3JheSIsIm1pbkludGVydmFsIiwiam9pbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJDb25maXJtLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFJlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuY29uc3QgeyBCb3gsIFRleHQsIHVzZUFwcCB9ID0gcmVxdWlyZShcImlua1wiKTtcbmNvbnN0IFdpemFyZENvbnRleHQgPSByZXF1aXJlKFwiLi4vV2l6YXJkQ29udGV4dFwiKTtcbmNvbnN0IHsgdXNlQ29udGV4dCwgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuY29uc3QgeyBkZWZhdWx0OiBUZXh0SW5wdXQgfSA9IHJlcXVpcmUoXCJpbmstdGV4dC1pbnB1dFwiKTtcbmNvbnN0IGNoYWxrID0gcmVxdWlyZShcImNoYWxrXCIpO1xuY29uc3QgeyBjcmVhdGVDb25maWdGaWxlLCB2ZXJpZnlDb25maWcgfSA9IHJlcXVpcmUoXCIuLi8uLi91dGlsc1wiKTtcblxuY29uc3QgQ29uZmlybSA9ICgpID0+IHtcblx0Y29uc3QgeyBleGl0IH0gPSB1c2VBcHAoKTtcblx0Y29uc3Qge1xuXHRcdGNvbmZpZzoge1xuXHRcdFx0bmV0d29yazogeyB2YWx1ZTogbmV0d29yayB9LFxuXHRcdFx0cnBjOiB7IHZhbHVlOiBycGMgfSxcblx0XHRcdHN0cmF0ZWd5OiB7IHZhbHVlOiBzdHJhdGVneSB9LFxuXHRcdFx0dG9rZW5zOiB7IHZhbHVlOiB0b2tlbnMgfSxcblx0XHRcdFwidHJhZGluZyBzaXplXCI6IHsgdmFsdWU6IHRyYWRpbmdTaXplIH0sXG5cdFx0XHRwcm9maXQ6IHsgdmFsdWU6IHByb2ZpdCB9LFxuXHRcdFx0c2xpcHBhZ2U6IHsgdmFsdWU6IHNsaXBwYWdlIH0sXG5cdFx0XHRhZHZhbmNlZDogeyB2YWx1ZTogYWR2YW5jZWQgfSxcblx0XHR9LFxuXHRcdGNvbmZpZyxcblx0fSA9IHVzZUNvbnRleHQoV2l6YXJkQ29udGV4dCk7XG5cdGNvbnN0IFtpc0NvbmZpZ09rLCBzZXRJc0NvbmZpZ09rXSA9IHVzZVN0YXRlKHtcblx0XHRyZXN1bHQ6IGZhbHNlLFxuXHRcdGJhZENvbmZpZzogW10sXG5cdH0pO1xuXG5cdHVzZUVmZmVjdCgoKSA9PiB7XG5cdFx0c2V0SXNDb25maWdPayh2ZXJpZnlDb25maWcoY29uZmlnKSk7XG5cdH0sIFtdKTtcblxuXHRyZXR1cm4gKFxuXHRcdDxCb3ggZmxleERpcmVjdGlvbj1cImNvbHVtblwiPlxuXHRcdFx0PFRleHQ+Q29uZmlybSB5b3VyIHNldHRpbmdzOjwvVGV4dD5cblx0XHRcdDxCb3ggbWFyZ2luPXsxfSBmbGV4RGlyZWN0aW9uPVwiY29sdW1uXCI+XG5cdFx0XHRcdDxUZXh0Pk5ldHdvcms6IHtjaGFsay5ncmVlbkJyaWdodChuZXR3b3JrKX08L1RleHQ+XG5cdFx0XHRcdDxUZXh0PlJQQzoge2NoYWxrLmdyZWVuQnJpZ2h0KHJwYyl9PC9UZXh0PlxuXHRcdFx0XHQ8VGV4dD5TdHJhdGVneToge2NoYWxrLmJvbGQuZ3JlZW5CcmlnaHQoc3RyYXRlZ3kpfTwvVGV4dD5cblx0XHRcdFx0PFRleHQ+XG5cdFx0XHRcdFx0VG9rZW5zOiB7Y2hhbGsuYm9sZC5ibHVlQnJpZ2h0KHRva2Vucy50b2tlbkEuc3ltYm9sKX0gL3tcIiBcIn1cblx0XHRcdFx0XHR7Y2hhbGsuYm9sZC5ibHVlQnJpZ2h0KHRva2Vucy50b2tlbkIuc3ltYm9sKX1cblx0XHRcdFx0PC9UZXh0PlxuXHRcdFx0XHQ8VGV4dD5cblx0XHRcdFx0XHRUcmFkaW5nIHNpemU6IHtjaGFsay5ib2xkLmdyZWVuQnJpZ2h0KHRyYWRpbmdTaXplLnZhbHVlKX17XCIgXCJ9XG5cdFx0XHRcdFx0e2NoYWxrLmdyYXkodG9rZW5zLnRva2VuQS5zeW1ib2wpfSB8e1wiIFwifVxuXHRcdFx0XHRcdHtjaGFsay5ncmVlbkJyaWdodCh0cmFkaW5nU2l6ZS5zdHJhdGVneSl9XG5cdFx0XHRcdDwvVGV4dD5cblx0XHRcdFx0PFRleHQ+UHJvZml0OiB7Y2hhbGsuYm9sZC5ncmVlbkJyaWdodChwcm9maXQpfTwvVGV4dD5cblx0XHRcdFx0PFRleHQ+U2xpcHBhZ2U6IHtjaGFsay5ib2xkLmdyZWVuQnJpZ2h0KHNsaXBwYWdlKX08L1RleHQ+XG5cdFx0XHRcdDxUZXh0IGNvbG9yPVwiZ3JheVwiPjwvVGV4dD5cblx0XHRcdFx0PFRleHQ+XG5cdFx0XHRcdFx0TWluIEludGVydmFsOiB7Y2hhbGsuYm9sZC5ncmVlbkJyaWdodChhZHZhbmNlZC5taW5JbnRlcnZhbCl9XG5cdFx0XHRcdDwvVGV4dD5cblx0XHRcdDwvQm94PlxuXHRcdFx0e2lzQ29uZmlnT2sucmVzdWx0ID8gKFxuXHRcdFx0XHQ8VGV4dElucHV0XG5cdFx0XHRcdFx0dmFsdWU9e2Ake2NoYWxrLmJvbGQuZ3JlZW5CcmlnaHQoXCJbIENPTkZJUk0gXVwiKX1gfVxuXHRcdFx0XHRcdHNob3dDdXJzb3I9e2ZhbHNlfVxuXHRcdFx0XHRcdG9uU3VibWl0PXthc3luYyAoKSA9PiB7XG5cdFx0XHRcdFx0XHRjcmVhdGVDb25maWdGaWxlKGNvbmZpZyk7XG5cdFx0XHRcdFx0XHRleGl0KCk7XG5cdFx0XHRcdFx0fX1cblx0XHRcdFx0Lz5cblx0XHRcdCkgOiAoXG5cdFx0XHRcdDxUZXh0PlxuXHRcdFx0XHRcdEVycm9yIG9uIHN0ZXA6e1wiIFwifVxuXHRcdFx0XHRcdHs8VGV4dCBjb2xvcj1cInJlZFwiPntpc0NvbmZpZ09rLmJhZENvbmZpZy5qb2luKFwiLCBcIil9PC9UZXh0Pn1cblx0XHRcdFx0PC9UZXh0PlxuXHRcdFx0KX1cblx0XHQ8L0JveD5cblx0KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ29uZmlybTtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBTyxDQUFDO0FBQzlCLE1BQU07RUFBRUMsR0FBRztFQUFFQyxJQUFJO0VBQUVDO0FBQU8sQ0FBQyxHQUFHSCxPQUFPLENBQUMsS0FBSyxDQUFDO0FBQzVDLE1BQU1JLGFBQWEsR0FBR0osT0FBTyxDQUFDLGtCQUFrQixDQUFDO0FBQ2pELE1BQU07RUFBRUssVUFBVTtFQUFFQyxTQUFTO0VBQUVDO0FBQVMsQ0FBQyxHQUFHUCxPQUFPLENBQUMsT0FBTyxDQUFDO0FBQzVELE1BQU07RUFBRVEsT0FBTyxFQUFFQztBQUFVLENBQUMsR0FBR1QsT0FBTyxDQUFDLGdCQUFnQixDQUFDO0FBQ3hELE1BQU1VLEtBQUssR0FBR1YsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUM5QixNQUFNO0VBQUVXLGdCQUFnQjtFQUFFQztBQUFhLENBQUMsR0FBR1osT0FBTyxDQUFDLGFBQWEsQ0FBQztBQUVqRSxNQUFNYSxPQUFPLEdBQUcsTUFBTTtFQUNyQixNQUFNO0lBQUVDO0VBQUssQ0FBQyxHQUFHWCxNQUFNLEVBQUU7RUFDekIsTUFBTTtJQUNMWSxNQUFNLEVBQUU7TUFDUEMsT0FBTyxFQUFFO1FBQUVDLEtBQUssRUFBRUQ7TUFBUSxDQUFDO01BQzNCRSxHQUFHLEVBQUU7UUFBRUQsS0FBSyxFQUFFQztNQUFJLENBQUM7TUFDbkJDLFFBQVEsRUFBRTtRQUFFRixLQUFLLEVBQUVFO01BQVMsQ0FBQztNQUM3QkMsTUFBTSxFQUFFO1FBQUVILEtBQUssRUFBRUc7TUFBTyxDQUFDO01BQ3pCLGNBQWMsRUFBRTtRQUFFSCxLQUFLLEVBQUVJO01BQVksQ0FBQztNQUN0Q0MsTUFBTSxFQUFFO1FBQUVMLEtBQUssRUFBRUs7TUFBTyxDQUFDO01BQ3pCQyxRQUFRLEVBQUU7UUFBRU4sS0FBSyxFQUFFTTtNQUFTLENBQUM7TUFDN0JDLFFBQVEsRUFBRTtRQUFFUCxLQUFLLEVBQUVPO01BQVM7SUFDN0IsQ0FBQztJQUNEVDtFQUNELENBQUMsR0FBR1YsVUFBVSxDQUFDRCxhQUFhLENBQUM7RUFDN0IsTUFBTSxDQUFDcUIsVUFBVSxFQUFFQyxhQUFhLENBQUMsR0FBR25CLFFBQVEsQ0FBQztJQUM1Q29CLE1BQU0sRUFBRSxLQUFLO0lBQ2JDLFNBQVMsRUFBRTtFQUNaLENBQUMsQ0FBQztFQUVGdEIsU0FBUyxDQUFDLE1BQU07SUFDZm9CLGFBQWEsQ0FBQ2QsWUFBWSxDQUFDRyxNQUFNLENBQUMsQ0FBQztFQUNwQyxDQUFDLEVBQUUsRUFBRSxDQUFDO0VBRU4sb0JBQ0Msb0JBQUMsR0FBRztJQUFDLGFBQWEsRUFBQztFQUFRLGdCQUMxQixvQkFBQyxJQUFJLGlDQUE4QixlQUNuQyxvQkFBQyxHQUFHO0lBQUMsTUFBTSxFQUFFLENBQUU7SUFBQyxhQUFhLEVBQUM7RUFBUSxnQkFDckMsb0JBQUMsSUFBSSxxQkFBV0wsS0FBSyxDQUFDbUIsV0FBVyxDQUFDYixPQUFPLENBQUMsQ0FBUSxlQUNsRCxvQkFBQyxJQUFJLGlCQUFPTixLQUFLLENBQUNtQixXQUFXLENBQUNYLEdBQUcsQ0FBQyxDQUFRLGVBQzFDLG9CQUFDLElBQUksc0JBQVlSLEtBQUssQ0FBQ29CLElBQUksQ0FBQ0QsV0FBVyxDQUFDVixRQUFRLENBQUMsQ0FBUSxlQUN6RCxvQkFBQyxJQUFJLG9CQUNLVCxLQUFLLENBQUNvQixJQUFJLENBQUNDLFVBQVUsQ0FBQ1gsTUFBTSxDQUFDWSxNQUFNLENBQUNDLE1BQU0sQ0FBQyxRQUFJLEdBQUcsRUFDMUR2QixLQUFLLENBQUNvQixJQUFJLENBQUNDLFVBQVUsQ0FBQ1gsTUFBTSxDQUFDYyxNQUFNLENBQUNELE1BQU0sQ0FBQyxDQUN0QyxlQUNQLG9CQUFDLElBQUksMEJBQ1d2QixLQUFLLENBQUNvQixJQUFJLENBQUNELFdBQVcsQ0FBQ1IsV0FBVyxDQUFDSixLQUFLLENBQUMsRUFBRSxHQUFHLEVBQzVEUCxLQUFLLENBQUN5QixJQUFJLENBQUNmLE1BQU0sQ0FBQ1ksTUFBTSxDQUFDQyxNQUFNLENBQUMsUUFBSSxHQUFHLEVBQ3ZDdkIsS0FBSyxDQUFDbUIsV0FBVyxDQUFDUixXQUFXLENBQUNGLFFBQVEsQ0FBQyxDQUNsQyxlQUNQLG9CQUFDLElBQUksb0JBQVVULEtBQUssQ0FBQ29CLElBQUksQ0FBQ0QsV0FBVyxDQUFDUCxNQUFNLENBQUMsQ0FBUSxlQUNyRCxvQkFBQyxJQUFJLHNCQUFZWixLQUFLLENBQUNvQixJQUFJLENBQUNELFdBQVcsQ0FBQ04sUUFBUSxDQUFDLENBQVEsZUFDekQsb0JBQUMsSUFBSTtJQUFDLEtBQUssRUFBQztFQUFNLEVBQVEsZUFDMUIsb0JBQUMsSUFBSSwwQkFDV2IsS0FBSyxDQUFDb0IsSUFBSSxDQUFDRCxXQUFXLENBQUNMLFFBQVEsQ0FBQ1ksV0FBVyxDQUFDLENBQ3JELENBQ0YsRUFDTFgsVUFBVSxDQUFDRSxNQUFNLGdCQUNqQixvQkFBQyxTQUFTO0lBQ1QsS0FBSyxFQUFHLEdBQUVqQixLQUFLLENBQUNvQixJQUFJLENBQUNELFdBQVcsQ0FBQyxhQUFhLENBQUUsRUFBRTtJQUNsRCxVQUFVLEVBQUUsS0FBTTtJQUNsQixRQUFRLEVBQUUsWUFBWTtNQUNyQmxCLGdCQUFnQixDQUFDSSxNQUFNLENBQUM7TUFDeEJELElBQUksRUFBRTtJQUNQO0VBQUUsRUFDRCxnQkFFRixvQkFBQyxJQUFJLDBCQUNXLEdBQUcsZUFDakIsb0JBQUMsSUFBSTtJQUFDLEtBQUssRUFBQztFQUFLLEdBQUVXLFVBQVUsQ0FBQ0csU0FBUyxDQUFDUyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQVEsQ0FFNUQsQ0FDSTtBQUVSLENBQUM7QUFFREMsTUFBTSxDQUFDQyxPQUFPLEdBQUcxQixPQUFPIn0=