const React = require("react");
const {
  Box,
  Text,
  useInput,
  Newline
} = require("ink");
const WizardContext = require("../WizardContext");
const {
  useContext,
  useState
} = require("react");
const {
  default: SelectInput
} = require("ink-select-input");
const chalk = require("chalk");
const Indicator = ({
  label: selectedLabel,
  value: selectedValue
}) => {
  const {
    config: {
      rpc: {
        value,
        state: {
          items
        }
      }
    }
  } = useContext(WizardContext);
  const isSelected = items.find(item => item.value === selectedValue).isSelected;
  return /*#__PURE__*/React.createElement(Text, null, chalk[value?.includes(selectedValue) ? "greenBright" : isSelected ? "white" : "gray"](`${isSelected ? "⦿" : "○"} ${selectedLabel}`));
};
function Rpc() {
  const {
    config: {
      rpc: {
        state
      }
    },
    configSetValue,
    configSwitchState
  } = useContext(WizardContext);
  const items = state?.items || [];
  const handleSelect = () => {
    const valueToSet = items.filter(item => item.isSelected).map(item => item.value);
    configSetValue("rpc", valueToSet);
  };
  const [highlightedItem, setHighlightedItem] = useState();
  useInput(input => {
    if (input === " " && highlightedItem) {
      configSwitchState("rpc", highlightedItem.value);
    }
  });
  const handleHighlight = item => setHighlightedItem(item);
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column"
  }, /*#__PURE__*/React.createElement(Text, null, "Please select at least one RPC."), /*#__PURE__*/React.createElement(Text, null, "If You choose more, You can switch between them while the bot is running."), /*#__PURE__*/React.createElement(Newline, null), /*#__PURE__*/React.createElement(SelectInput, {
    items: items,
    onHighlight: handleHighlight,
    onSelect: handleSelect,
    itemComponent: Indicator
  }));
}
module.exports = Rpc;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJCb3giLCJUZXh0IiwidXNlSW5wdXQiLCJOZXdsaW5lIiwiV2l6YXJkQ29udGV4dCIsInVzZUNvbnRleHQiLCJ1c2VTdGF0ZSIsImRlZmF1bHQiLCJTZWxlY3RJbnB1dCIsImNoYWxrIiwiSW5kaWNhdG9yIiwibGFiZWwiLCJzZWxlY3RlZExhYmVsIiwidmFsdWUiLCJzZWxlY3RlZFZhbHVlIiwiY29uZmlnIiwicnBjIiwic3RhdGUiLCJpdGVtcyIsImlzU2VsZWN0ZWQiLCJmaW5kIiwiaXRlbSIsImluY2x1ZGVzIiwiUnBjIiwiY29uZmlnU2V0VmFsdWUiLCJjb25maWdTd2l0Y2hTdGF0ZSIsImhhbmRsZVNlbGVjdCIsInZhbHVlVG9TZXQiLCJmaWx0ZXIiLCJtYXAiLCJoaWdobGlnaHRlZEl0ZW0iLCJzZXRIaWdobGlnaHRlZEl0ZW0iLCJpbnB1dCIsImhhbmRsZUhpZ2hsaWdodCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJScGMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgUmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG5jb25zdCB7IEJveCwgVGV4dCwgdXNlSW5wdXQsIE5ld2xpbmUgfSA9IHJlcXVpcmUoXCJpbmtcIik7XG5jb25zdCBXaXphcmRDb250ZXh0ID0gcmVxdWlyZShcIi4uL1dpemFyZENvbnRleHRcIik7XG5jb25zdCB7IHVzZUNvbnRleHQsIHVzZVN0YXRlIH0gPSByZXF1aXJlKFwicmVhY3RcIik7XG5jb25zdCB7IGRlZmF1bHQ6IFNlbGVjdElucHV0IH0gPSByZXF1aXJlKFwiaW5rLXNlbGVjdC1pbnB1dFwiKTtcbmNvbnN0IGNoYWxrID0gcmVxdWlyZShcImNoYWxrXCIpO1xuXG5jb25zdCBJbmRpY2F0b3IgPSAoeyBsYWJlbDogc2VsZWN0ZWRMYWJlbCwgdmFsdWU6IHNlbGVjdGVkVmFsdWUgfSkgPT4ge1xuXHRjb25zdCB7XG5cdFx0Y29uZmlnOiB7XG5cdFx0XHRycGM6IHtcblx0XHRcdFx0dmFsdWUsXG5cdFx0XHRcdHN0YXRlOiB7IGl0ZW1zIH0sXG5cdFx0XHR9LFxuXHRcdH0sXG5cdH0gPSB1c2VDb250ZXh0KFdpemFyZENvbnRleHQpO1xuXG5cdGNvbnN0IGlzU2VsZWN0ZWQgPSBpdGVtcy5maW5kKFxuXHRcdChpdGVtKSA9PiBpdGVtLnZhbHVlID09PSBzZWxlY3RlZFZhbHVlXG5cdCkuaXNTZWxlY3RlZDtcblxuXHRyZXR1cm4gKFxuXHRcdDxUZXh0PlxuXHRcdFx0e2NoYWxrW1xuXHRcdFx0XHR2YWx1ZT8uaW5jbHVkZXMoc2VsZWN0ZWRWYWx1ZSlcblx0XHRcdFx0XHQ/IFwiZ3JlZW5CcmlnaHRcIlxuXHRcdFx0XHRcdDogaXNTZWxlY3RlZFxuXHRcdFx0XHRcdD8gXCJ3aGl0ZVwiXG5cdFx0XHRcdFx0OiBcImdyYXlcIlxuXHRcdFx0XShgJHtpc1NlbGVjdGVkID8gXCLipr9cIiA6IFwi4peLXCJ9ICR7c2VsZWN0ZWRMYWJlbH1gKX1cblx0XHQ8L1RleHQ+XG5cdCk7XG59O1xuXG5mdW5jdGlvbiBScGMoKSB7XG5cdGNvbnN0IHtcblx0XHRjb25maWc6IHtcblx0XHRcdHJwYzogeyBzdGF0ZSB9LFxuXHRcdH0sXG5cdFx0Y29uZmlnU2V0VmFsdWUsXG5cdFx0Y29uZmlnU3dpdGNoU3RhdGUsXG5cdH0gPSB1c2VDb250ZXh0KFdpemFyZENvbnRleHQpO1xuXG5cdGNvbnN0IGl0ZW1zID0gc3RhdGU/Lml0ZW1zIHx8IFtdO1xuXG5cdGNvbnN0IGhhbmRsZVNlbGVjdCA9ICgpID0+IHtcblx0XHRjb25zdCB2YWx1ZVRvU2V0ID0gaXRlbXNcblx0XHRcdC5maWx0ZXIoKGl0ZW0pID0+IGl0ZW0uaXNTZWxlY3RlZClcblx0XHRcdC5tYXAoKGl0ZW0pID0+IGl0ZW0udmFsdWUpO1xuXHRcdGNvbmZpZ1NldFZhbHVlKFwicnBjXCIsIHZhbHVlVG9TZXQpO1xuXHR9O1xuXG5cdGNvbnN0IFtoaWdobGlnaHRlZEl0ZW0sIHNldEhpZ2hsaWdodGVkSXRlbV0gPSB1c2VTdGF0ZSgpO1xuXG5cdHVzZUlucHV0KChpbnB1dCkgPT4ge1xuXHRcdGlmIChpbnB1dCA9PT0gXCIgXCIgJiYgaGlnaGxpZ2h0ZWRJdGVtKSB7XG5cdFx0XHRjb25maWdTd2l0Y2hTdGF0ZShcInJwY1wiLCBoaWdobGlnaHRlZEl0ZW0udmFsdWUpO1xuXHRcdH1cblx0fSk7XG5cblx0Y29uc3QgaGFuZGxlSGlnaGxpZ2h0ID0gKGl0ZW0pID0+IHNldEhpZ2hsaWdodGVkSXRlbShpdGVtKTtcblx0cmV0dXJuIChcblx0XHQ8Qm94IGZsZXhEaXJlY3Rpb249XCJjb2x1bW5cIj5cblx0XHRcdDxUZXh0PlBsZWFzZSBzZWxlY3QgYXQgbGVhc3Qgb25lIFJQQy48L1RleHQ+XG5cdFx0XHQ8VGV4dD5cblx0XHRcdFx0SWYgWW91IGNob29zZSBtb3JlLCBZb3UgY2FuIHN3aXRjaCBiZXR3ZWVuIHRoZW0gd2hpbGUgdGhlIGJvdCBpc1xuXHRcdFx0XHRydW5uaW5nLlxuXHRcdFx0PC9UZXh0PlxuXHRcdFx0PE5ld2xpbmUgLz5cblx0XHRcdDxTZWxlY3RJbnB1dFxuXHRcdFx0XHRpdGVtcz17aXRlbXN9XG5cdFx0XHRcdG9uSGlnaGxpZ2h0PXtoYW5kbGVIaWdobGlnaHR9XG5cdFx0XHRcdG9uU2VsZWN0PXtoYW5kbGVTZWxlY3R9XG5cdFx0XHRcdGl0ZW1Db21wb25lbnQ9e0luZGljYXRvcn1cblx0XHRcdC8+XG5cdFx0PC9Cb3g+XG5cdCk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IFJwYztcbiJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBTyxDQUFDO0FBQzlCLE1BQU07RUFBRUMsR0FBRztFQUFFQyxJQUFJO0VBQUVDLFFBQVE7RUFBRUM7QUFBUSxDQUFDLEdBQUdKLE9BQU8sQ0FBQyxLQUFLLENBQUM7QUFDdkQsTUFBTUssYUFBYSxHQUFHTCxPQUFPLENBQUMsa0JBQWtCLENBQUM7QUFDakQsTUFBTTtFQUFFTSxVQUFVO0VBQUVDO0FBQVMsQ0FBQyxHQUFHUCxPQUFP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