const React = require("react");
const {
  Box,
  Text
} = require("ink");
const {
  useContext,
  useState,
  useRef,
  useEffect
} = require("react");
const WizardContext = require("../WizardContext");
const {
  default: TextInput
} = require("ink-text-input");
const chalk = require("chalk");
const {
  default: SelectInput
} = require("ink-select-input");
const TRADING_SIZE_STRATEGIES = [{
  label: "cumulative",
  value: "cumulative"
}, {
  label: "fixed",
  value: "fixed"
}];
const Indicator = ({
  label,
  value
}) => {
  const {
    config: {
      "trading size": {
        value: selectedValue
      }
    }
  } = useContext(WizardContext);
  const isSelected = value === selectedValue.strategy;
  return /*#__PURE__*/React.createElement(Text, null, chalk[isSelected ? "greenBright" : "white"](`${label}`));
};
function TradingSize() {
  let isMountedRef = useRef(false);
  const {
    config: {
      tokens: {
        value: tokensValue
      },
      "trading size": {
        value: tradingSizeValue
      }
    },
    configSetValue
  } = useContext(WizardContext);
  const [tradingSize, setTradingSize] = useState(tradingSizeValue.value);
  const [inputBorderColor, setInputBorderColor] = useState("gray");
  const handleTradingSizeStrategySelect = selected => {
    configSetValue("trading size", {
      value: {
        strategy: selected.value,
        value: tradingSize
      }
    });
  };
  const handleTradingSizeChange = value => {
    if (!isMountedRef.current) return;
    const badChars = /[^0-9.]/g;
    badChars.test(value) ? setInputBorderColor("red") : setInputBorderColor("gray");
    const sanitizedValue = value.replace(badChars, "");
    setTimeout(() => isMountedRef.current && setInputBorderColor("gray"), 100);
    setTradingSize(sanitizedValue);
  };
  useEffect(() => {
    isMountedRef.current = true;
    return () => isMountedRef.current = false;
  }, []);
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column"
  }, /*#__PURE__*/React.createElement(Text, null, "Set ", /*#__PURE__*/React.createElement(Text, {
    color: "#cdadff"
  }, "trading size"), " strategy:"), /*#__PURE__*/React.createElement(Box, {
    margin: 1
  }, /*#__PURE__*/React.createElement(SelectInput, {
    items: TRADING_SIZE_STRATEGIES,
    onSelect: handleTradingSizeStrategySelect,
    itemComponent: Indicator
  })), /*#__PURE__*/React.createElement(Box, {
    flexDirection: "row",
    alignItems: "center"
  }, /*#__PURE__*/React.createElement(Text, null, "Trading Size:"), /*#__PURE__*/React.createElement(Box, {
    borderStyle: "round",
    borderColor: inputBorderColor,
    marginLeft: 1
  }, /*#__PURE__*/React.createElement(TextInput, {
    value: tradingSize || "",
    placeholder: "0.0",
    onChange: handleTradingSizeChange
    // onSubmit={(value) => handleSubmit("percent", value)}
  }), /*#__PURE__*/React.createElement(Text, {
    color: "gray"
  }, " ", tokensValue.tokenA.symbol))));
}
module.exports = TradingSize;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,