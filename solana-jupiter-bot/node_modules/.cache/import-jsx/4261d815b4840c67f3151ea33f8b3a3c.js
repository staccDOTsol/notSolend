const React = require("react");
const {
  Box,
  Text
} = require("ink");
const WizardContext = require("../WizardContext");
const {
  useContext
} = require("react");
const {
  default: SelectInput
} = require("ink-select-input");
const chalk = require("chalk");
const NETWORKS = [{
  label: "mainnet-beta",
  value: "mainnet-beta"
}, {
  label: "devnet",
  value: "devnet"
}];
const Indicator = ({
  label,
  value
}) => {
  const {
    config: {
      network: {
        value: selectedValue
      }
    }
  } = useContext(WizardContext);
  const isSelected = value == selectedValue;
  return /*#__PURE__*/React.createElement(Text, null, chalk[isSelected ? "greenBright" : "white"](`${label}`));
};
function Network() {
  const {
    configSetValue
  } = useContext(WizardContext);
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column"
  }, /*#__PURE__*/React.createElement(Text, null, "Select Solana ", /*#__PURE__*/React.createElement(Text, {
    color: "magenta"
  }, "Network"), ":"), /*#__PURE__*/React.createElement(Box, {
    margin: 1
  }, /*#__PURE__*/React.createElement(SelectInput, {
    items: NETWORKS,
    onSelect: item => configSetValue("network", item.value),
    itemComponent: Indicator
  })));
}
module.exports = Network;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJCb3giLCJUZXh0IiwiV2l6YXJkQ29udGV4dCIsInVzZUNvbnRleHQiLCJkZWZhdWx0IiwiU2VsZWN0SW5wdXQiLCJjaGFsayIsIk5FVFdPUktTIiwibGFiZWwiLCJ2YWx1ZSIsIkluZGljYXRvciIsImNvbmZpZyIsIm5ldHdvcmsiLCJzZWxlY3RlZFZhbHVlIiwiaXNTZWxlY3RlZCIsIk5ldHdvcmsiLCJjb25maWdTZXRWYWx1ZSIsIml0ZW0iLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiTmV0d29yay5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBSZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbmNvbnN0IHsgQm94LCBUZXh0IH0gPSByZXF1aXJlKFwiaW5rXCIpO1xuY29uc3QgV2l6YXJkQ29udGV4dCA9IHJlcXVpcmUoXCIuLi9XaXphcmRDb250ZXh0XCIpO1xuY29uc3QgeyB1c2VDb250ZXh0IH0gPSByZXF1aXJlKFwicmVhY3RcIik7XG5jb25zdCB7IGRlZmF1bHQ6IFNlbGVjdElucHV0IH0gPSByZXF1aXJlKFwiaW5rLXNlbGVjdC1pbnB1dFwiKTtcbmNvbnN0IGNoYWxrID0gcmVxdWlyZShcImNoYWxrXCIpO1xuXG5jb25zdCBORVRXT1JLUyA9IFtcblx0eyBsYWJlbDogXCJtYWlubmV0LWJldGFcIiwgdmFsdWU6IFwibWFpbm5ldC1iZXRhXCIgfSxcblx0eyBsYWJlbDogXCJkZXZuZXRcIiwgdmFsdWU6IFwiZGV2bmV0XCIgfSxcbl07XG5cbmNvbnN0IEluZGljYXRvciA9ICh7IGxhYmVsLCB2YWx1ZSB9KSA9PiB7XG5cdGNvbnN0IHtcblx0XHRjb25maWc6IHtcblx0XHRcdG5ldHdvcms6IHsgdmFsdWU6IHNlbGVjdGVkVmFsdWUgfSxcblx0XHR9LFxuXHR9ID0gdXNlQ29udGV4dChXaXphcmRDb250ZXh0KTtcblxuXHRjb25zdCBpc1NlbGVjdGVkID0gdmFsdWUgPT0gc2VsZWN0ZWRWYWx1ZTtcblxuXHRyZXR1cm4gPFRleHQ+e2NoYWxrW2lzU2VsZWN0ZWQgPyBcImdyZWVuQnJpZ2h0XCIgOiBcIndoaXRlXCJdKGAke2xhYmVsfWApfTwvVGV4dD47XG59O1xuXG5mdW5jdGlvbiBOZXR3b3JrKCkge1xuXHRjb25zdCB7IGNvbmZpZ1NldFZhbHVlIH0gPSB1c2VDb250ZXh0KFdpemFyZENvbnRleHQpO1xuXHRyZXR1cm4gKFxuXHRcdDxCb3ggZmxleERpcmVjdGlvbj1cImNvbHVtblwiPlxuXHRcdFx0PFRleHQ+XG5cdFx0XHRcdFNlbGVjdCBTb2xhbmEgPFRleHQgY29sb3I9XCJtYWdlbnRhXCI+TmV0d29yazwvVGV4dD46XG5cdFx0XHQ8L1RleHQ+XG5cdFx0XHQ8Qm94IG1hcmdpbj17MX0+XG5cdFx0XHRcdDxTZWxlY3RJbnB1dFxuXHRcdFx0XHRcdGl0ZW1zPXtORVRXT1JLU31cblx0XHRcdFx0XHRvblNlbGVjdD17KGl0ZW0pID0+IGNvbmZpZ1NldFZhbHVlKFwibmV0d29ya1wiLCBpdGVtLnZhbHVlKX1cblx0XHRcdFx0XHRpdGVtQ29tcG9uZW50PXtJbmRpY2F0b3J9XG5cdFx0XHRcdC8+XG5cdFx0XHQ8L0JveD5cblx0XHQ8L0JveD5cblx0KTtcbn1cbm1vZHVsZS5leHBvcnRzID0gTmV0d29yaztcbiJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBTyxDQUFDO0FBQzlCLE1BQU07RUFBRUMsR0FBRztFQUFFQztBQUFLLENBQUMsR0FBR0YsT0FBTyxDQUFDLEtBQUssQ0FBQztBQUNwQyxNQUFNRyxhQUFhLEdBQUdILE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQztBQUNqRCxNQUFNO0VBQUVJO0FBQVcsQ0FBQyxHQUFHSixPQUFPLENBQUMsT0FBTyxDQUFDO0FBQ3ZDLE1BQU07RUFBRUssT0FBTyxFQUFFQztBQUFZLENBQUMsR0FBR04sT0FBTyxDQUFDLGtCQUFrQixDQUFDO0FBQzVELE1BQU1PLEtBQUssR0FBR1AsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUU5QixNQUFNUSxRQUFRLEdBQUcsQ0FDaEI7RUFBRUMsS0FBSyxFQUFFLGNBQWM7RUFBRUMsS0FBSyxFQUFFO0FBQWUsQ0FBQyxFQUNoRDtFQUFFRCxLQUFLLEVBQUUsUUFBUTtFQUFFQyxLQUFLLEVBQUU7QUFBUyxDQUFDLENBQ3BDO0FBRUQsTUFBTUMsU0FBUyxHQUFHLENBQUM7RUFBRUYsS0FBSztFQUFFQztBQUFNLENBQUMsS0FBSztFQUN2QyxNQUFNO0lBQ0xFLE1BQU0sRUFBRTtNQUNQQyxPQUFPLEVBQUU7UUFBRUgsS0FBSyxFQUFFSTtNQUFjO0lBQ2pDO0VBQ0QsQ0FBQyxHQUFHVixVQUFVLENBQUNELGFBQWEsQ0FBQztFQUU3QixNQUFNWSxVQUFVLEdBQUdMLEtBQUssSUFBSUksYUFBYTtFQUV6QyxvQkFBTyxvQkFBQyxJQUFJLFFBQUVQLEtBQUssQ0FBQ1EsVUFBVSxHQUFHLGFBQWEsR0FBRyxPQUFPLENBQUMsQ0FBRSxHQUFFTixLQUFNLEVBQUMsQ0FBQyxDQUFRO0FBQzlFLENBQUM7QUFFRCxTQUFTTyxPQUFPLEdBQUc7RUFDbEIsTUFBTTtJQUFFQztFQUFlLENBQUMsR0FBR2IsVUFBVSxDQUFDRCxhQUFhLENBQUM7RUFDcEQsb0JBQ0Msb0JBQUMsR0FBRztJQUFDLGFBQWEsRUFBQztFQUFRLGdCQUMxQixvQkFBQyxJQUFJLHVDQUNVLG9CQUFDLElBQUk7SUFBQyxLQUFLLEVBQUM7RUFBUyxhQUFlLE1BQzVDLGVBQ1Asb0JBQUMsR0FBRztJQUFDLE1BQU0sRUFBRTtFQUFFLGdCQUNkLG9CQUFDLFdBQVc7SUFDWCxLQUFLLEVBQUVLLFFBQVM7SUFDaEIsUUFBUSxFQUFHVSxJQUFJLElBQUtELGNBQWMsQ0FBQyxTQUFTLEVBQUVDLElBQUksQ0FBQ1IsS0FBSyxDQUFFO0lBQzFELGFBQWEsRUFBRUM7RUFBVSxFQUN4QixDQUNHLENBQ0Q7QUFFUjtBQUNBUSxNQUFNLENBQUNDLE9BQU8sR0FBR0osT0FBTyJ9