const React = require("react");
const {
  Box,
  Text
} = require("ink");
const {
  useContext,
  useState,
  useRef,
  useEffect
} = require("react");
const WizardContext = require("../WizardContext");
const {
  default: TextInput
} = require("ink-text-input");
function Advanced() {
  let isMountedRef = useRef(false);
  const {
    config: {
      advanced: {
        value: advancedValue,
        isSet: advancedIsSet
      }
    },
    configSetValue
  } = useContext(WizardContext);
  const [tempAdvancedValue, setTempAdvancedValue] = useState(advancedValue);
  const handleSubmit = (key, value) => {
    configSetValue("advanced", {
      value: {
        ...advancedValue,
        [key]: value
      },
      isSet: {
        ...advancedIsSet,
        [key]: true
      }
    });
  };
  const handleMinIntervalChange = value => {
    if (!isMountedRef.current) return;
    setTempAdvancedValue({
      ...tempAdvancedValue,
      minInterval: value
    });
  };
  useEffect(() => {
    isMountedRef.current = true;
    return () => isMountedRef.current = false;
  }, []);
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column"
  }, /*#__PURE__*/React.createElement(Text, {
    color: "gray"
  }, "Advanced settings can be crucial for strategy efficiency."), /*#__PURE__*/React.createElement(Text, {
    color: "gray"
  }, "Please make sure you know what you are doing before changing these settings."), /*#__PURE__*/React.createElement(Box, {
    flexDirection: "row",
    marginTop: 1
  }, /*#__PURE__*/React.createElement(Text, null, "Min Interval:", " ", !advancedIsSet.minInterval ? /*#__PURE__*/React.createElement(Text, {
    color: "yellowBright"
  }, /*#__PURE__*/React.createElement(TextInput, {
    value: tempAdvancedValue?.minInterval ? tempAdvancedValue.minInterval.toString() : "",
    onChange: handleMinIntervalChange,
    onSubmit: value => {
      handleSubmit("minInterval", value);
    }
  })) : /*#__PURE__*/React.createElement(Text, {
    color: "greenBright"
  }, tempAdvancedValue?.minInterval))));
}
module.exports = Advanced;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJCb3giLCJUZXh0IiwidXNlQ29udGV4dCIsInVzZVN0YXRlIiwidXNlUmVmIiwidXNlRWZmZWN0IiwiV2l6YXJkQ29udGV4dCIsImRlZmF1bHQiLCJUZXh0SW5wdXQiLCJBZHZhbmNlZCIsImlzTW91bnRlZFJlZiIsImNvbmZpZyIsImFkdmFuY2VkIiwidmFsdWUiLCJhZHZhbmNlZFZhbHVlIiwiaXNTZXQiLCJhZHZhbmNlZElzU2V0IiwiY29uZmlnU2V0VmFsdWUiLCJ0ZW1wQWR2YW5jZWRWYWx1ZSIsInNldFRlbXBBZHZhbmNlZFZhbHVlIiwiaGFuZGxlU3VibWl0Iiwia2V5IiwiaGFuZGxlTWluSW50ZXJ2YWxDaGFuZ2UiLCJjdXJyZW50IiwibWluSW50ZXJ2YWwiLCJ0b1N0cmluZyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJBZHZhbmNlZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBSZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbmNvbnN0IHsgQm94LCBUZXh0IH0gPSByZXF1aXJlKFwiaW5rXCIpO1xuY29uc3QgeyB1c2VDb250ZXh0LCB1c2VTdGF0ZSwgdXNlUmVmLCB1c2VFZmZlY3QgfSA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbmNvbnN0IFdpemFyZENvbnRleHQgPSByZXF1aXJlKFwiLi4vV2l6YXJkQ29udGV4dFwiKTtcbmNvbnN0IHsgZGVmYXVsdDogVGV4dElucHV0IH0gPSByZXF1aXJlKFwiaW5rLXRleHQtaW5wdXRcIik7XG5cbmZ1bmN0aW9uIEFkdmFuY2VkKCkge1xuXHRsZXQgaXNNb3VudGVkUmVmID0gdXNlUmVmKGZhbHNlKTtcblxuXHRjb25zdCB7XG5cdFx0Y29uZmlnOiB7XG5cdFx0XHRhZHZhbmNlZDogeyB2YWx1ZTogYWR2YW5jZWRWYWx1ZSwgaXNTZXQ6IGFkdmFuY2VkSXNTZXQgfSxcblx0XHR9LFxuXHRcdGNvbmZpZ1NldFZhbHVlLFxuXHR9ID0gdXNlQ29udGV4dChXaXphcmRDb250ZXh0KTtcblxuXHRjb25zdCBbdGVtcEFkdmFuY2VkVmFsdWUsIHNldFRlbXBBZHZhbmNlZFZhbHVlXSA9IHVzZVN0YXRlKGFkdmFuY2VkVmFsdWUpO1xuXG5cdGNvbnN0IGhhbmRsZVN1Ym1pdCA9IChrZXksIHZhbHVlKSA9PiB7XG5cdFx0Y29uZmlnU2V0VmFsdWUoXCJhZHZhbmNlZFwiLCB7XG5cdFx0XHR2YWx1ZToge1xuXHRcdFx0XHQuLi5hZHZhbmNlZFZhbHVlLFxuXHRcdFx0XHRba2V5XTogdmFsdWUsXG5cdFx0XHR9LFxuXHRcdFx0aXNTZXQ6IHtcblx0XHRcdFx0Li4uYWR2YW5jZWRJc1NldCxcblx0XHRcdFx0W2tleV06IHRydWUsXG5cdFx0XHR9LFxuXHRcdH0pO1xuXHR9O1xuXG5cdGNvbnN0IGhhbmRsZU1pbkludGVydmFsQ2hhbmdlID0gKHZhbHVlKSA9PiB7XG5cdFx0aWYgKCFpc01vdW50ZWRSZWYuY3VycmVudCkgcmV0dXJuO1xuXG5cdFx0c2V0VGVtcEFkdmFuY2VkVmFsdWUoe1xuXHRcdFx0Li4udGVtcEFkdmFuY2VkVmFsdWUsXG5cdFx0XHRtaW5JbnRlcnZhbDogdmFsdWUsXG5cdFx0fSk7XG5cdH07XG5cblx0dXNlRWZmZWN0KCgpID0+IHtcblx0XHRpc01vdW50ZWRSZWYuY3VycmVudCA9IHRydWU7XG5cdFx0cmV0dXJuICgpID0+IChpc01vdW50ZWRSZWYuY3VycmVudCA9IGZhbHNlKTtcblx0fSwgW10pO1xuXG5cdHJldHVybiAoXG5cdFx0PEJveCBmbGV4RGlyZWN0aW9uPVwiY29sdW1uXCI+XG5cdFx0XHQ8VGV4dCBjb2xvcj1cImdyYXlcIj5cblx0XHRcdFx0QWR2YW5jZWQgc2V0dGluZ3MgY2FuIGJlIGNydWNpYWwgZm9yIHN0cmF0ZWd5IGVmZmljaWVuY3kuXG5cdFx0XHQ8L1RleHQ+XG5cdFx0XHQ8VGV4dCBjb2xvcj1cImdyYXlcIj5cblx0XHRcdFx0UGxlYXNlIG1ha2Ugc3VyZSB5b3Uga25vdyB3aGF0IHlvdSBhcmUgZG9pbmcgYmVmb3JlIGNoYW5naW5nIHRoZXNlXG5cdFx0XHRcdHNldHRpbmdzLlxuXHRcdFx0PC9UZXh0PlxuXHRcdFx0PEJveCBmbGV4RGlyZWN0aW9uPVwicm93XCIgbWFyZ2luVG9wPXsxfT5cblx0XHRcdFx0PFRleHQ+XG5cdFx0XHRcdFx0TWluIEludGVydmFsOntcIiBcIn1cblx0XHRcdFx0XHR7IWFkdmFuY2VkSXNTZXQubWluSW50ZXJ2YWwgPyAoXG5cdFx0XHRcdFx0XHQ8VGV4dCBjb2xvcj1cInllbGxvd0JyaWdodFwiPlxuXHRcdFx0XHRcdFx0XHQ8VGV4dElucHV0XG5cdFx0XHRcdFx0XHRcdFx0dmFsdWU9e1xuXHRcdFx0XHRcdFx0XHRcdFx0dGVtcEFkdmFuY2VkVmFsdWU/Lm1pbkludGVydmFsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdD8gdGVtcEFkdmFuY2VkVmFsdWUubWluSW50ZXJ2YWwudG9TdHJpbmcoKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ6IFwiXCJcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0b25DaGFuZ2U9e2hhbmRsZU1pbkludGVydmFsQ2hhbmdlfVxuXHRcdFx0XHRcdFx0XHRcdG9uU3VibWl0PXsodmFsdWUpID0+IHtcblx0XHRcdFx0XHRcdFx0XHRcdGhhbmRsZVN1Ym1pdChcIm1pbkludGVydmFsXCIsIHZhbHVlKTtcblx0XHRcdFx0XHRcdFx0XHR9fVxuXHRcdFx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdFx0PC9UZXh0PlxuXHRcdFx0XHRcdCkgOiAoXG5cdFx0XHRcdFx0XHQ8VGV4dCBjb2xvcj1cImdyZWVuQnJpZ2h0XCI+e3RlbXBBZHZhbmNlZFZhbHVlPy5taW5JbnRlcnZhbH08L1RleHQ+XG5cdFx0XHRcdFx0KX1cblx0XHRcdFx0PC9UZXh0PlxuXHRcdFx0PC9Cb3g+XG5cdFx0PC9Cb3g+XG5cdCk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEFkdmFuY2VkO1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFP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