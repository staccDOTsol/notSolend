"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseTokenAccount = exports.parseTokenAccountData = exports.getTokenAccounts = exports.getTokenAccount = exports.createAssociatedTokenAccountInstruction = exports.getAssociatedTokenAddress = void 0;
const tslib_1 = require("tslib");
const spl_token_1 = require("@solana/spl-token");
const web3_js_1 = require("@solana/web3.js");
const tiny_invariant_1 = tslib_1.__importDefault(require("tiny-invariant"));
/**
 * Get a authority token account address
 * @param tokenMint The mint of token
 * @param owner The owner associated token address
 * @returns
 */
async function getAssociatedTokenAddress(tokenMint, owner) {
    return await spl_token_1.Token.getAssociatedTokenAddress(spl_token_1.ASSOCIATED_TOKEN_PROGRAM_ID, spl_token_1.TOKEN_PROGRAM_ID, tokenMint, owner, true);
}
exports.getAssociatedTokenAddress = getAssociatedTokenAddress;
/**
 * Get a create associated token account instruction
 * @param tokenMint The mint of token
 * @param owner The owner associated token address
 * @param payer The pays for transaction
 * @returns
 */
function createAssociatedTokenAccountInstruction(tokenMint, associatedAccount, owner, payer) {
    return spl_token_1.Token.createAssociatedTokenAccountInstruction(spl_token_1.ASSOCIATED_TOKEN_PROGRAM_ID, spl_token_1.TOKEN_PROGRAM_ID, tokenMint, associatedAccount, owner, payer);
}
exports.createAssociatedTokenAccountInstruction = createAssociatedTokenAccountInstruction;
/**
 * Get the token account info by address
 * @param conn The connection to use
 * @param address The token account address
 * @returns
 */
async function getTokenAccount(conn, address) {
    const account = await conn.getAccountInfo(address);
    (0, tiny_invariant_1.default)((account === null || account === void 0 ? void 0 : account.data) !== null, `The token account:${address.toBase58()} data is null`);
    (0, tiny_invariant_1.default)(account !== null, "the account is null");
    const accountInfo = parseTokenAccount(account);
    accountInfo.address = address;
    return accountInfo;
}
exports.getTokenAccount = getTokenAccount;
/**
 * Get the token accounts by owner
 * @param conn The connection to use
 * @param owner The owner address
 * @returns The token accounts
 */
async function getTokenAccounts(conn, owner) {
    const accounts = await conn.getTokenAccountsByOwner(owner, {
        programId: spl_token_1.TOKEN_PROGRAM_ID,
    });
    const accountInfos = [];
    accounts.value.forEach((v) => {
        (0, tiny_invariant_1.default)(v.account.data !== null, `The token account:${v.pubkey.toBase58()} data is null`);
        const accountInfo = parseTokenAccount(v.account);
        accountInfo.address = v.pubkey;
        accountInfos.push(accountInfo);
    });
    return accountInfos;
}
exports.getTokenAccounts = getTokenAccounts;
function parseTokenAccountData(data) {
    const accountInfo = spl_token_1.AccountLayout.decode(data);
    accountInfo.mint = new web3_js_1.PublicKey(accountInfo.mint);
    accountInfo.owner = new web3_js_1.PublicKey(accountInfo.owner);
    accountInfo.amount = spl_token_1.u64.fromBuffer(accountInfo.amount);
    if (accountInfo.delegateOption === 0) {
        accountInfo.delegate = null;
        accountInfo.delegatedAmount = new spl_token_1.u64(0);
    }
    else {
        accountInfo.delegate = new web3_js_1.PublicKey(accountInfo.delegate);
        accountInfo.delegatedAmount = spl_token_1.u64.fromBuffer(accountInfo.delegatedAmount);
    }
    accountInfo.isInitialized = accountInfo.state !== 0;
    accountInfo.isFrozen = accountInfo.state === 2;
    if (accountInfo.isNativeOption === 1) {
        accountInfo.rentExemptReserve = spl_token_1.u64.fromBuffer(accountInfo.isNative);
        accountInfo.isNative = true;
    }
    else {
        accountInfo.rentExemptReserve = null;
        accountInfo.isNative = false;
    }
    if (accountInfo.closeAuthorityOption === 0) {
        accountInfo.closeAuthority = null;
    }
    else {
        accountInfo.closeAuthority = new web3_js_1.PublicKey(accountInfo.closeAuthority);
    }
    return accountInfo;
}
exports.parseTokenAccountData = parseTokenAccountData;
function parseTokenAccount(account) {
    (0, tiny_invariant_1.default)((account === null || account === void 0 ? void 0 : account.data) !== null, `The account data is null`);
    const accountInfo = spl_token_1.AccountLayout.decode(account === null || account === void 0 ? void 0 : account.data);
    accountInfo.mint = new web3_js_1.PublicKey(accountInfo.mint);
    accountInfo.owner = new web3_js_1.PublicKey(accountInfo.owner);
    accountInfo.amount = spl_token_1.u64.fromBuffer(accountInfo.amount);
    if (accountInfo.delegateOption === 0) {
        accountInfo.delegate = null;
        accountInfo.delegatedAmount = new spl_token_1.u64(0);
    }
    else {
        accountInfo.delegate = new web3_js_1.PublicKey(accountInfo.delegate);
        accountInfo.delegatedAmount = spl_token_1.u64.fromBuffer(accountInfo.delegatedAmount);
    }
    accountInfo.isInitialized = accountInfo.state !== 0;
    accountInfo.isFrozen = accountInfo.state === 2;
    if (accountInfo.isNativeOption === 1) {
        accountInfo.rentExemptReserve = spl_token_1.u64.fromBuffer(accountInfo.isNative);
        accountInfo.isNative = true;
    }
    else {
        accountInfo.rentExemptReserve = null;
        accountInfo.isNative = false;
    }
    if (accountInfo.closeAuthorityOption === 0) {
        accountInfo.closeAuthority = null;
    }
    else {
        accountInfo.closeAuthority = new web3_js_1.PublicKey(accountInfo.closeAuthority);
    }
    return accountInfo;
}
exports.parseTokenAccount = parseTokenAccount;
//# sourceMappingURL=token.js.map