import { blob } from "@solana/buffer-layout";
import { PublicKey } from "@solana/web3.js";
import { DecimalExt } from "./decimalExt";
/** @internal */
export const encodeDecode = (layout) => {
    const decode = layout.decode.bind(layout);
    const encode = layout.encode.bind(layout);
    return { decode, encode };
};
export const publicKey = (property = "publicKey") => {
    const layout = blob(32, property);
    const { encode, decode } = encodeDecode(layout);
    const publicKeyLayout = layout;
    publicKeyLayout.decode = (buffer, offset) => {
        const src = decode(buffer, offset);
        return new PublicKey(src);
    };
    publicKeyLayout.encode = (publicKey, buffer, offset) => {
        const src = publicKey.toBuffer();
        return encode(src, buffer, offset);
    };
    return publicKeyLayout;
};
export const uint64 = (property = "uint128") => {
    return blob(8, property);
};
export const int64 = (property = "uint128") => {
    return blob(8, property);
};
export const int128 = (property = "uint128") => {
    return blob(16, property);
};
export const uint128 = (property = "uint128") => {
    return blob(16, property);
};
export const decimal64 = (property = "uint64", precision = 0) => {
    const layout = blob(8, property);
    //const { encode, decode } = encodeDecode(layout);
    const decimal64Layout = layout;
    const _decode = layout.decode.bind(layout);
    const _encode = layout.encode.bind(layout);
    decimal64Layout.decode = (buffer, offset) => {
        const src = Buffer.from(_decode(buffer, offset));
        return DecimalExt.from64Buffer(src, precision);
    };
    decimal64Layout.encode = (decimal, buffer, offset) => {
        const src = DecimalExt.to64Buffer(decimal, precision);
        return _encode(src, buffer, offset);
    };
    return decimal64Layout;
};
export const decimalU64 = (property = "uint64", precision = 0) => {
    const layout = blob(8, property);
    //const { encode, decode } = encodeDecode(layout)
    const _decode = layout.decode.bind(layout);
    const _encode = layout.encode.bind(layout);
    const decimalU64Layout = layout;
    decimalU64Layout.decode = (buffer, offset) => {
        const src = Buffer.from(_decode(buffer, offset));
        return DecimalExt.fromU64Buffer(src, precision);
    };
    decimalU64Layout.encode = (decimal, buffer, offset) => {
        const src = DecimalExt.toU64Buffer(decimal, precision);
        return _encode(src, buffer, offset);
    };
    return decimalU64Layout;
};
export const decimal128 = (property = "uint64", precision = 0) => {
    const layout = blob(16, property);
    //const { encode, decode } = encodeDecode(layout);
    const _decode = layout.decode.bind(layout);
    const _encode = layout.encode.bind(layout);
    const decimal128Layout = layout;
    decimal128Layout.decode = (buffer, offset) => {
        const src = Buffer.from(_decode(buffer, offset));
        return DecimalExt.from128Buffer(src, precision);
    };
    decimal128Layout.encode = (decimal, buffer, offset) => {
        const src = DecimalExt.to128Buffer(decimal, precision);
        return _encode(src, buffer, offset);
    };
    return decimal128Layout;
};
export const decimalU128 = (property = "uint64", precision = 0) => {
    const layout = blob(16, property);
    //const { encode, decode } = encodeDecode(layout);
    const _decode = layout.decode.bind(layout);
    const _encode = layout.encode.bind(layout);
    const decimalU128Layout = layout;
    decimalU128Layout.decode = (buffer, offset) => {
        const src = Buffer.from(_decode(buffer, offset));
        const val = DecimalExt.fromU128Buffer(src, precision);
        return val;
    };
    decimalU128Layout.encode = (decimal, buffer, offset) => {
        const src = DecimalExt.toU128Buffer(decimal, precision);
        return _encode(src, buffer, offset);
    };
    return decimalU128Layout;
};
//# sourceMappingURL=layout.js.map