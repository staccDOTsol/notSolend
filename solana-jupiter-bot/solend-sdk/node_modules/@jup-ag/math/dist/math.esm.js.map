{"version":3,"file":"math.esm.js","sources":["../src/utils.ts","../src/math/curve.ts","../src/amm/stable.ts","../src/amm/fees.ts","../src/amm/tokenswap-stable.ts","../src/amm/tokenswap-constant-product.ts","../src/fraction.ts"],"sourcesContent":["import JSBI from 'jsbi';\nimport Decimal from 'decimal.js';\n\nexport type SwapResult = {\n  priceImpact: Decimal;\n  fees: JSBI;\n  expectedOutputAmount: JSBI;\n};\n\nexport const ZERO = JSBI.BigInt(0);\nexport const ONE = JSBI.BigInt(1);\nexport const TWO = JSBI.BigInt(2);\n\nexport function abs(number: JSBI) {\n  if (JSBI.GE(number, ZERO)) {\n    return number;\n  }\n\n  return JSBI.unaryMinus(number);\n}\n\nexport function sumArray(numbers: JSBI[]) {\n  return numbers.reduce((prev, curr) => {\n    return JSBI.add(prev, curr);\n  }, ZERO);\n}\n\nexport function mulArray(numbers: JSBI[]) {\n  return numbers.reduce((prev, curr) => {\n    return JSBI.multiply(prev, curr);\n  }, ONE);\n}\n\nexport function ceilingDivision(dividend: JSBI, divisor: JSBI): [JSBI, JSBI] {\n  let quotient = JSBI.divide(dividend, divisor);\n  if (JSBI.equal(quotient, ZERO)) {\n    return [ZERO, ZERO];\n  }\n\n  let remainder = JSBI.remainder(dividend, divisor);\n  if (JSBI.greaterThan(remainder, ZERO)) {\n    quotient = JSBI.add(quotient, ONE);\n    divisor = JSBI.divide(dividend, quotient);\n    remainder = JSBI.remainder(dividend, quotient);\n    if (JSBI.greaterThan(remainder, ZERO)) {\n      divisor = JSBI.add(divisor, ONE);\n    }\n  }\n\n  return [quotient, divisor];\n}\n\nexport function toDecimal(input: JSBI, shift = 0) {\n  return new Decimal(input.toString()).div(new Decimal(10).pow(shift));\n}\n","import JSBI from 'jsbi';\nimport { abs, mulArray, ONE, sumArray, TWO, ZERO } from '../utils';\nimport Decimal from 'decimal.js';\n\nexport class Curve {\n  constructor(private numberOfCurrencies: JSBI, private amplificationFactor: JSBI, private targetPrices: JSBI[]) {}\n\n  public exchange(\n    tokenAmounts: JSBI[],\n    inputIndex: number,\n    outputIndex: number,\n    amount: JSBI,\n    minusOne: boolean = true,\n  ) {\n    if (tokenAmounts.length !== JSBI.toNumber(this.numberOfCurrencies)) {\n      throw new Error('Number of currencies does not match');\n    }\n\n    let xp = this.xp(tokenAmounts);\n    let dx = JSBI.multiply(amount, this.targetPrices[inputIndex]);\n    let x = JSBI.add(xp[inputIndex], dx);\n    let y = this.computeY(tokenAmounts, inputIndex, outputIndex, x);\n    let dy = JSBI.subtract(xp[outputIndex], y);\n\n    // This is a special condition on Curve stable algo. For TokenSwap, they don't seem to apply this minus one.\n    if (minusOne) {\n      dy = JSBI.subtract(dy, ONE);\n    }\n\n    return JSBI.divide(dy, this.targetPrices[outputIndex]);\n  }\n\n  public computeBaseY(tokenAmounts: JSBI[], inputIndex: number, outputIndex: number, amount: JSBI) {\n    let d = this.computeD(tokenAmounts);\n    let xp = this.xp(tokenAmounts);\n    let nn = JSBI.exponentiate(this.numberOfCurrencies, this.numberOfCurrencies);\n    let sum = sumArray(xp);\n    let product = mulArray(xp);\n    let k = JSBI.subtract(\n      JSBI.add(JSBI.multiply(JSBI.multiply(this.amplificationFactor, nn), sum), d),\n      JSBI.multiply(JSBI.multiply(this.amplificationFactor, d), nn),\n    );\n    let b = JSBI.multiply(JSBI.multiply(JSBI.multiply(this.amplificationFactor, nn), nn), product);\n    let c = JSBI.multiply(JSBI.multiply(nn, product), k);\n    let numerator = JSBI.add(b, JSBI.divide(c, xp[inputIndex]));\n    let denominator = JSBI.add(b, JSBI.divide(c, xp[outputIndex]));\n\n    // Convert to number since JSBI doesn't support log10\n    let inputFactor = Math.log10(JSBI.toNumber(this.targetPrices[inputIndex]));\n    let outputFactor = Math.log10(JSBI.toNumber(this.targetPrices[outputIndex]));\n    let factor = Math.abs(outputFactor - inputFactor);\n\n    if (inputFactor >= outputFactor) {\n      return JSBI.BigInt(\n        new Decimal(numerator.toString())\n          .mul(new Decimal(amount.toString()))\n          .div(new Decimal(denominator.toString()))\n          .mul(Math.pow(10, factor))\n          .floor()\n          .toString(),\n      );\n    } else {\n      return JSBI.BigInt(\n        new Decimal(numerator.toString())\n          .mul(new Decimal(amount.toString()))\n          .div(new Decimal(denominator.toString()))\n          .div(Math.pow(10, factor))\n          .floor()\n          .toString(),\n      );\n    }\n  }\n\n  private computeY(tokenAmounts: JSBI[], inputIndex: number, outputIndex: number, newTotalAmount: JSBI) {\n    let d = this.computeD(tokenAmounts);\n    let xx = this.xp(tokenAmounts);\n    xx[inputIndex] = newTotalAmount;\n    xx.splice(outputIndex, 1);\n\n    let ann = JSBI.multiply(this.amplificationFactor, this.numberOfCurrencies);\n    let c = d;\n\n    for (const y of xx) {\n      c = JSBI.divide(JSBI.multiply(c, d), JSBI.multiply(y, this.numberOfCurrencies));\n    }\n    c = JSBI.divide(JSBI.multiply(c, d), JSBI.multiply(this.numberOfCurrencies, ann));\n\n    let b = JSBI.subtract(JSBI.add(sumArray(xx), JSBI.divide(d, ann)), d);\n    let yPrev = ZERO;\n    let y = d;\n\n    while (JSBI.greaterThan(abs(JSBI.subtract(y, yPrev)), ONE)) {\n      yPrev = y;\n      y = JSBI.divide(JSBI.add(JSBI.exponentiate(y, TWO), c), JSBI.add(JSBI.multiply(TWO, y), b));\n    }\n\n    return y;\n  }\n\n  private computeD(tokenAmounts: JSBI[]) {\n    let dPrev = ZERO;\n    let xp = this.xp(tokenAmounts);\n    let sum = sumArray(xp);\n    let d = sum;\n    let ann = JSBI.multiply(this.amplificationFactor, this.numberOfCurrencies);\n\n    while (JSBI.greaterThan(abs(JSBI.subtract(d, dPrev)), ONE)) {\n      let dP = d;\n      for (const x of xp) {\n        dP = JSBI.divide(JSBI.multiply(dP, d), JSBI.multiply(this.numberOfCurrencies, x));\n      }\n      dPrev = d;\n      let numerator = JSBI.multiply(JSBI.add(JSBI.multiply(ann, sum), JSBI.multiply(dP, this.numberOfCurrencies)), d);\n      let denominator = JSBI.add(\n        JSBI.multiply(JSBI.subtract(ann, ONE), d),\n        JSBI.multiply(JSBI.add(this.numberOfCurrencies, ONE), dP),\n      );\n      d = JSBI.divide(numerator, denominator);\n    }\n\n    return d;\n  }\n\n  private xp(tokenAmounts: JSBI[]) {\n    return tokenAmounts.map((tokenAmount, index) => {\n      return JSBI.multiply(tokenAmount, this.targetPrices[index]);\n    });\n  }\n\n  setAmplificationFactor(amplificationFactor: JSBI) {\n    this.amplificationFactor = amplificationFactor;\n  }\n}\n","import JSBI from 'jsbi';\nimport { Curve } from '../math/curve';\nimport { SwapResult, toDecimal, ZERO } from '../utils';\nimport Decimal from 'decimal.js';\nimport { Fraction } from '..';\n\nexport class Stable {\n  private curve: Curve;\n\n  constructor(numberOfCurrencies: JSBI, amp: JSBI, private targetPrices: JSBI[], private traderFee: Fraction) {\n    this.curve = new Curve(numberOfCurrencies, amp, this.targetPrices);\n  }\n\n  public exchange(tokenAmounts: JSBI[], inputTradeAmount: JSBI, inputIndex: number, outputIndex: number): SwapResult {\n    let outputAmountWithoutFees = this.getOutputAmount(tokenAmounts, inputTradeAmount, inputIndex, outputIndex);\n    let fees = this.getFees(outputAmountWithoutFees);\n    let expectedOutputAmount = JSBI.subtract(outputAmountWithoutFees, fees);\n\n    return {\n      priceImpact: this.getPriceImpact(tokenAmounts, inputTradeAmount, expectedOutputAmount, inputIndex, outputIndex),\n      fees: fees,\n      expectedOutputAmount: expectedOutputAmount,\n    };\n  }\n\n  private getPriceImpact(\n    tokenAmounts: JSBI[],\n    inputTradeAmountJSBI: JSBI,\n    expectedOutputAmountJSBI: JSBI,\n    inputIndex: number,\n    outputIndex: number,\n  ): Decimal {\n    if (\n      JSBI.equal(inputTradeAmountJSBI, ZERO) ||\n      JSBI.equal(tokenAmounts[inputIndex], ZERO) ||\n      JSBI.equal(tokenAmounts[outputIndex], ZERO)\n    ) {\n      return new Decimal(0);\n    }\n\n    const noSlippageOutputAmount = toDecimal(\n      this.getOutputAmountWithNoSlippage(tokenAmounts, inputTradeAmountJSBI, inputIndex, outputIndex),\n    );\n    const expectedOutputAmount = toDecimal(expectedOutputAmountJSBI);\n    const impact = noSlippageOutputAmount.sub(expectedOutputAmount).div(noSlippageOutputAmount);\n\n    return impact;\n  }\n\n  private getFees(outputAmountWithoutFees: JSBI): JSBI {\n    return JSBI.equal(this.traderFee.numerator, ZERO)\n      ? ZERO\n      : JSBI.divide(JSBI.multiply(outputAmountWithoutFees, this.traderFee.numerator), this.traderFee.denominator);\n  }\n\n  private getOutputAmount(tokenAmounts: JSBI[], inputTradeAmount: JSBI, inputIndex: number, outputIndex: number): JSBI {\n    return this.curve.exchange(tokenAmounts, inputIndex, outputIndex, inputTradeAmount);\n  }\n\n  private getOutputAmountWithNoSlippage(\n    tokenAmounts: JSBI[],\n    inputTradeAmount: JSBI,\n    inputIndex: number,\n    outputIndex: number,\n  ): JSBI {\n    return this.curve.computeBaseY(tokenAmounts, inputIndex, outputIndex, inputTradeAmount);\n  }\n\n  setAmp(amp: JSBI) {\n    this.curve.setAmplificationFactor(amp);\n  }\n}\n","import JSBI from 'jsbi';\nimport { Fraction } from '../fraction';\nimport { ZERO, ONE } from '../utils';\n\n/** calculates fee amount given a fee fraction, returning one when fee is set but amount is zero */\nexport function calculateFeeAmount(amount: JSBI, fee: Fraction): JSBI {\n  if (JSBI.equal(fee.numerator, ZERO) || JSBI.equal(amount, ZERO)) {\n    return ZERO;\n  } else {\n    const feeAmount = JSBI.divide(JSBI.multiply(amount, fee.numerator), fee.denominator);\n    if (JSBI.equal(feeAmount, ZERO)) {\n      return ONE;\n    }\n    return feeAmount;\n  }\n}\n","import JSBI from 'jsbi';\nimport { Curve } from '../math/curve';\nimport { ONE, SwapResult, toDecimal, ZERO, TWO } from '../utils';\nimport Decimal from 'decimal.js';\nimport { Fraction } from '../fraction';\nimport { calculateFeeAmount } from './fees';\n\nexport class TokenSwapStable {\n  private curve: Curve;\n\n  constructor(amp: JSBI, private traderFee: Fraction, private ownerFee: Fraction) {\n    this.curve = new Curve(TWO, amp, [ONE, ONE]);\n  }\n\n  public exchange(tokenAmounts: JSBI[], inputTradeAmount: JSBI, outputIndex: number): SwapResult {\n    let inputIndex = outputIndex === 0 ? 1 : 0;\n    let expectedOutputAmount = this.getExpectedOutputAmount(tokenAmounts, inputTradeAmount, inputIndex, outputIndex);\n\n    return {\n      priceImpact: this.getPriceImpact(tokenAmounts, inputTradeAmount, expectedOutputAmount, inputIndex, outputIndex),\n      fees: this.getFees(inputTradeAmount),\n      expectedOutputAmount,\n    };\n  }\n\n  private getPriceImpact(\n    tokenAmounts: JSBI[],\n    inputTradeAmountJSBI: JSBI,\n    expectedOutputAmountJSBI: JSBI,\n    inputIndex: number,\n    outputIndex: number,\n  ): Decimal {\n    if (\n      JSBI.equal(inputTradeAmountJSBI, ZERO) ||\n      JSBI.equal(tokenAmounts[inputIndex], ZERO) ||\n      JSBI.equal(tokenAmounts[outputIndex], ZERO)\n    ) {\n      return new Decimal(0);\n    }\n\n    const noSlippageOutputAmount = toDecimal(\n      this.getExpectedOutputAmountWithNoSlippage(tokenAmounts, inputTradeAmountJSBI, inputIndex, outputIndex),\n    );\n\n    const expectedOutputAmount = toDecimal(expectedOutputAmountJSBI);\n    const impact = noSlippageOutputAmount.sub(expectedOutputAmount).div(noSlippageOutputAmount);\n\n    return impact;\n  }\n\n  private getFees(inputTradeAmount: JSBI): JSBI {\n    const tradingFee = calculateFeeAmount(inputTradeAmount, this.traderFee);\n    const ownerFee = calculateFeeAmount(inputTradeAmount, this.ownerFee);\n\n    return JSBI.add(tradingFee, ownerFee);\n  }\n\n  private getExpectedOutputAmount(\n    tokenAmounts: JSBI[],\n    inputTradeAmount: JSBI,\n    inputIndex: number,\n    outputIndex: number,\n  ): JSBI {\n    const inputTradeAmountLessFees = this.getInputAmountLessFees(inputTradeAmount);\n\n    return this.getOutputAmount(tokenAmounts, inputTradeAmountLessFees, inputIndex, outputIndex);\n  }\n\n  private getExpectedOutputAmountWithNoSlippage(\n    tokenAmounts: JSBI[],\n    inputTradeAmount: JSBI,\n    inputIndex: number,\n    outputIndex: number,\n  ): JSBI {\n    const inputTradeAmountLessFees = this.getInputAmountLessFees(inputTradeAmount);\n\n    return this.getOutputAmountWithNoSlippage(tokenAmounts, inputTradeAmountLessFees, inputIndex, outputIndex);\n  }\n\n  private getInputAmountLessFees(inputTradeAmount: JSBI): JSBI {\n    return JSBI.subtract(inputTradeAmount, this.getFees(inputTradeAmount));\n  }\n\n  private getOutputAmount(\n    tokenAmounts: JSBI[],\n    inputTradeAmountLessFees: JSBI,\n    inputIndex: number,\n    outputIndex: number,\n  ): JSBI {\n    return this.curve.exchange(tokenAmounts, inputIndex, outputIndex, inputTradeAmountLessFees, false);\n  }\n\n  private getOutputAmountWithNoSlippage(\n    tokenAmounts: JSBI[],\n    inputTradeAmountLessFees: JSBI,\n    inputIndex: number,\n    outputIndex: number,\n  ): JSBI {\n    return this.curve.computeBaseY(tokenAmounts, inputIndex, outputIndex, inputTradeAmountLessFees);\n  }\n}\n","import JSBI from 'jsbi';\nimport { SwapResult, toDecimal, ZERO, ceilingDivision } from '../utils';\nimport Decimal from 'decimal.js';\nimport { Fraction } from '..';\nimport { calculateFeeAmount } from './fees';\n\nexport class TokenSwapConstantProduct {\n  constructor(private traderFee: Fraction, private ownerFee: Fraction, private feesOnInput: boolean = true) {}\n\n  public exchange(tokenAmounts: JSBI[], inputTradeAmount: JSBI, outputIndex: number): SwapResult {\n    let inputIndex = outputIndex === 0 ? 1 : 0;\n    const newInputTradeAmount = this.feesOnInput ? this.getAmountLessFees(inputTradeAmount) : inputTradeAmount;\n\n    let expectedOutputAmount = this.getExpectedOutputAmount(tokenAmounts, newInputTradeAmount, inputIndex, outputIndex);\n\n    let fees = this.getFees(this.feesOnInput ? inputTradeAmount : expectedOutputAmount);\n\n    if (!this.feesOnInput) {\n      expectedOutputAmount = this.getAmountLessFees(expectedOutputAmount);\n    }\n\n    return {\n      priceImpact: this.getPriceImpact(\n        tokenAmounts,\n        newInputTradeAmount,\n        expectedOutputAmount,\n        inputIndex,\n        outputIndex,\n      ),\n      fees,\n      expectedOutputAmount,\n    };\n  }\n\n  private getPriceImpact(\n    tokenAmounts: JSBI[],\n    inputTradeAmountJSBI: JSBI,\n    expectedOutputAmountJSBI: JSBI,\n    inputIndex: number,\n    outputIndex: number,\n  ): Decimal {\n    if (\n      JSBI.equal(inputTradeAmountJSBI, ZERO) ||\n      JSBI.equal(tokenAmounts[inputIndex], ZERO) ||\n      JSBI.equal(tokenAmounts[outputIndex], ZERO)\n    ) {\n      return new Decimal(0);\n    }\n\n    const noSlippageOutputAmount = toDecimal(\n      this.getExpectedOutputAmountWithNoSlippage(tokenAmounts, inputTradeAmountJSBI, inputIndex, outputIndex),\n    );\n    const expectedOutputAmount = toDecimal(expectedOutputAmountJSBI);\n    const impact = noSlippageOutputAmount.sub(expectedOutputAmount).div(noSlippageOutputAmount);\n\n    return impact;\n  }\n\n  private getFees(inputTradeAmount: JSBI): JSBI {\n    const tradingFee = calculateFeeAmount(inputTradeAmount, this.traderFee);\n    const ownerFee = calculateFeeAmount(inputTradeAmount, this.ownerFee);\n\n    return JSBI.add(tradingFee, ownerFee);\n  }\n\n  private getExpectedOutputAmount(\n    tokenAmounts: JSBI[],\n    inputTradeAmount: JSBI,\n    inputIndex: number,\n    outputIndex: number,\n  ): JSBI {\n    return this.getOutputAmount(tokenAmounts, inputTradeAmount, inputIndex, outputIndex);\n  }\n\n  private getExpectedOutputAmountWithNoSlippage(\n    tokenAmounts: JSBI[],\n    inputTradeAmount: JSBI,\n    inputIndex: number,\n    outputIndex: number,\n  ): JSBI {\n    if (JSBI.equal(tokenAmounts[inputIndex], ZERO)) {\n      return tokenAmounts[outputIndex];\n    }\n\n    let expectedOutputAmountWithNoSlippage = JSBI.divide(\n      JSBI.multiply(inputTradeAmount, tokenAmounts[outputIndex]),\n      tokenAmounts[inputIndex],\n    );\n\n    if (this.feesOnInput) {\n      return expectedOutputAmountWithNoSlippage;\n    } else {\n      return this.getAmountLessFees(expectedOutputAmountWithNoSlippage);\n    }\n  }\n\n  private getAmountLessFees(tradeAmount: JSBI): JSBI {\n    return JSBI.subtract(tradeAmount, this.getFees(tradeAmount));\n  }\n\n  private getOutputAmount(tokenAmounts: JSBI[], inputTradeAmount: JSBI, inputIndex: number, outputIndex: number): JSBI {\n    const [poolInputAmount, poolOutputAmount] = [tokenAmounts[inputIndex], tokenAmounts[outputIndex]];\n\n    const invariant = this.getInvariant(tokenAmounts);\n\n    const [newPoolOutputAmount] = ceilingDivision(invariant, JSBI.add(poolInputAmount, inputTradeAmount));\n\n    return JSBI.subtract(poolOutputAmount, newPoolOutputAmount);\n  }\n\n  getInvariant(tokenAmounts: JSBI[]) {\n    return JSBI.multiply(tokenAmounts[0], tokenAmounts[1]);\n  }\n}\n","import JSBI from 'jsbi';\n\nexport class Fraction {\n  constructor(public numerator: JSBI, public denominator: JSBI) {}\n}\n\nexport const ZERO_FRACTION = new Fraction(JSBI.BigInt(0), JSBI.BigInt(1));\n"],"names":["ZERO","JSBI","BigInt","ONE","TWO","abs","number","GE","unaryMinus","sumArray","numbers","reduce","prev","curr","add","mulArray","multiply","ceilingDivision","dividend","divisor","quotient","divide","equal","remainder","greaterThan","toDecimal","input","shift","Decimal","toString","div","pow","Curve","numberOfCurrencies","amplificationFactor","targetPrices","exchange","tokenAmounts","inputIndex","outputIndex","amount","minusOne","length","toNumber","Error","xp","dx","x","y","computeY","dy","subtract","computeBaseY","d","computeD","nn","exponentiate","sum","product","k","b","c","numerator","denominator","inputFactor","Math","log10","outputFactor","factor","mul","floor","newTotalAmount","xx","splice","ann","yPrev","dPrev","dP","map","tokenAmount","index","setAmplificationFactor","Stable","amp","traderFee","curve","inputTradeAmount","outputAmountWithoutFees","getOutputAmount","fees","getFees","expectedOutputAmount","priceImpact","getPriceImpact","inputTradeAmountJSBI","expectedOutputAmountJSBI","noSlippageOutputAmount","getOutputAmountWithNoSlippage","impact","sub","setAmp","calculateFeeAmount","fee","feeAmount","TokenSwapStable","ownerFee","getExpectedOutputAmount","getExpectedOutputAmountWithNoSlippage","tradingFee","inputTradeAmountLessFees","getInputAmountLessFees","TokenSwapConstantProduct","feesOnInput","newInputTradeAmount","getAmountLessFees","expectedOutputAmountWithNoSlippage","tradeAmount","poolInputAmount","poolOutputAmount","invariant","getInvariant","newPoolOutputAmount","Fraction","ZERO_FRACTION"],"mappings":"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"}