{"version":3,"file":"swap.js","sourceRoot":"","sources":["../../../src/instructions/swap.ts"],"names":[],"mappings":";;;AAAA,yDAAmD;AACnD,iDAAqD;AAErD,6CAAyD;AAGzD,2CAA4C;AAC5C,+CAAqD;AAQrD,MAAM,UAAU,GAAG,IAAA,sBAAM,EAAO;IAC9B,IAAA,kBAAE,EAAC,aAAa,CAAC;IACjB,IAAA,mBAAU,EAAC,UAAU,CAAC;IACtB,IAAA,mBAAU,EAAC,kBAAkB,CAAC;CAC/B,CAAC,CAAC;AAEI,MAAM,eAAe,GAAG,CAC7B,SAAoB,EACpB,YAAuB,EACvB,SAAoB,EACpB,qBAAgC,EAChC,UAAqB,EACrB,eAA0B,EAC1B,UAAqB,EACrB,eAA0B,EAC1B,QAAmB,EACnB,QAAiB,EACjB,gBAAyB,EACD,EAAE;IAC1B,MAAM,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;IAC3C,UAAU,CAAC,MAAM,CACf;QACE,WAAW,EAAE,kCAAoB,CAAC,IAAI;QACtC,QAAQ;QACR,gBAAgB;KACjB,EACD,IAAI,CACL,CAAC;IACF,MAAM,IAAI,GAAG;QACX,EAAE,MAAM,EAAE,YAAY,EAAE,QAAQ,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE;QAC3D,EAAE,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,KAAK,EAAE,UAAU,EAAE,KAAK,EAAE;QACzD,EAAE,MAAM,EAAE,qBAAqB,EAAE,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE;QACpE,EAAE,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE;QACzD,EAAE,MAAM,EAAE,eAAe,EAAE,QAAQ,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE;QAC9D,EAAE,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE;QACzD,EAAE,MAAM,EAAE,eAAe,EAAE,QAAQ,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE;QAC9D,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE;QACvD,EAAE,MAAM,EAAE,4BAAgB,EAAE,QAAQ,EAAE,KAAK,EAAE,UAAU,EAAE,KAAK,EAAE;KACjE,CAAC;IACF,OAAO,IAAI,gCAAsB,CAAC;QAChC,IAAI;QACJ,SAAS;QACT,IAAI;KACL,CAAC,CAAC;AACL,CAAC,CAAC;AAtCW,QAAA,eAAe,mBAsC1B","sourcesContent":["import { struct, u8 } from \"@solana/buffer-layout\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport type { PublicKey } from \"@solana/web3.js\";\nimport { TransactionInstruction } from \"@solana/web3.js\";\nimport type Decimal from \"decimal.js\";\n\nimport { decimalU64 } from \"../util/layout\";\nimport { TokenSwapInstruction } from \"./instruction\";\n\ninterface Data {\n  instruction: number;\n  amountIn: Decimal;\n  minimumAmountOut: Decimal;\n}\n\nconst DataLayout = struct<Data>([\n  u8(\"instruction\"),\n  decimalU64(\"amountIn\"),\n  decimalU64(\"minimumAmountOut\"),\n]);\n\nexport const swapInstruction = (\n  programId: PublicKey,\n  tokenSwapKey: PublicKey,\n  authority: PublicKey,\n  userTransferAuthority: PublicKey,\n  userSource: PublicKey,\n  userDestination: PublicKey,\n  swapSource: PublicKey,\n  swapDestination: PublicKey,\n  ticksKey: PublicKey,\n  amountIn: Decimal,\n  minimumAmountOut: Decimal\n): TransactionInstruction => {\n  const data = Buffer.alloc(DataLayout.span);\n  DataLayout.encode(\n    {\n      instruction: TokenSwapInstruction.Swap,\n      amountIn,\n      minimumAmountOut,\n    },\n    data\n  );\n  const keys = [\n    { pubkey: tokenSwapKey, isSigner: false, isWritable: true },\n    { pubkey: authority, isSigner: false, isWritable: false },\n    { pubkey: userTransferAuthority, isSigner: true, isWritable: false },\n    { pubkey: userSource, isSigner: false, isWritable: true },\n    { pubkey: userDestination, isSigner: false, isWritable: true },\n    { pubkey: swapSource, isSigner: false, isWritable: true },\n    { pubkey: swapDestination, isSigner: false, isWritable: true },\n    { pubkey: ticksKey, isSigner: false, isWritable: true },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n  ];\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data,\n  });\n};\n"]}