"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseTokenSwapAccount = exports.isTokenSwapAccount = exports.TOKEN_SWAP_ACCOUNT_SIZE = exports.TokenSwapAccountLayout = exports.TOKEN_SWAP_ACCOUNT_TYPE = void 0;
const buffer_layout_1 = require("@solana/buffer-layout");
const layout_1 = require("../util/layout");
exports.TOKEN_SWAP_ACCOUNT_TYPE = 0;
exports.TokenSwapAccountLayout = (0, buffer_layout_1.struct)([
    (0, buffer_layout_1.u8)("version"),
    (0, layout_1.publicKey)("tokenSwapKey"),
    (0, buffer_layout_1.u8)("accountType"),
    (0, buffer_layout_1.u8)("isInitialized"),
    (0, buffer_layout_1.u8)("nonce"),
    (0, layout_1.publicKey)("tokenProgramId"),
    (0, layout_1.publicKey)("manager"),
    (0, layout_1.publicKey)("managerTokenA"),
    (0, layout_1.publicKey)("managerTokenB"),
    (0, layout_1.publicKey)("swapTokenA"),
    (0, layout_1.publicKey)("swapTokenB"),
    (0, layout_1.publicKey)("tokenAMint"),
    (0, layout_1.publicKey)("tokenBMint"),
    (0, layout_1.publicKey)("ticksKey"),
    (0, layout_1.publicKey)("positionsKey"),
    (0, buffer_layout_1.u8)("curveType"),
    (0, layout_1.decimalU64)("fee", 12),
    (0, layout_1.decimalU64)("managerFee", 12),
    (0, buffer_layout_1.u32)("tickSpace"),
    (0, layout_1.decimalU128)("currentSqrtPrice", 12),
    (0, layout_1.decimalU128)("currentLiquity"),
    (0, layout_1.decimalU128)("feeGrowthGlobal0", 16),
    (0, layout_1.decimalU128)("feeGrowthGlobal1", 16),
    (0, layout_1.decimalU128)("managerFeeA"),
    (0, layout_1.decimalU128)("managerFeeB"),
], "tokenSwapAccount");
exports.TOKEN_SWAP_ACCOUNT_SIZE = exports.TokenSwapAccountLayout.span;
const isTokenSwapAccount = (info) => {
    return info.data.readUInt8(33) === exports.TOKEN_SWAP_ACCOUNT_TYPE;
};
exports.isTokenSwapAccount = isTokenSwapAccount;
const parseTokenSwapAccount = (pubkey, info) => {
    if (!(0, exports.isTokenSwapAccount)(info)) {
        return;
    }
    const buffer = Buffer.from(info.data);
    const tokenSwapAccount = exports.TokenSwapAccountLayout.decode(buffer);
    return {
        pubkey,
        info,
        data: tokenSwapAccount,
    };
};
exports.parseTokenSwapAccount = parseTokenSwapAccount;
//# sourceMappingURL=tokenSwap.js.map