{"version":3,"file":"core.cjs.production.min.js","sources":["../src/lib/idl/jupiter.ts","../src/constants.ts","../src/utils/layout.ts","../src/utils/pda.ts","../src/lib/cropper/swapLayout.ts","../src/lib/jupiterInstruction.ts","../src/lib/saber/saberAddDecimalsAmm.ts","../src/utils/getTwoPermutations.ts","../src/utils/chunks.ts","../src/utils/chunkedGetMultipleAccountInfos.ts","../src/lib/amm.ts","../src/lib/raydium/pools.ts","../src/lib/raydium/raydiumAmm.ts","../src/lib/serum/market.ts","../src/lib/serum/serumAmm.ts","../src/lib/split-trade/splitTradeAmm.ts","../src/lib/market.ts","../src/lib/saber/saberAmm.ts","../src/lib/aldrin/percentage.ts","../src/lib/aldrin/poolState.ts","../src/lib/aldrin/aldrinAmm.ts","../src/lib/spl-token-swap/splTokenSwapPools.ts","../src/lib/spl-token-swap/tokenSwapLayout.ts","../src/lib/spl-token-swap/splTokenSwapAmm.ts","../src/lib/mercurial/swapLayout.ts","../src/lib/mercurial/mercurialAmm.ts","../src/lib/cropper/cropperAmm.ts","../src/lib/crema/swapLayout.ts","../src/lib/crema/cremaAmm.ts","../src/lib/sencha/swapLayout.ts","../src/lib/sencha/senchaAmm.ts","../src/lib/lifinity/lifinityAmm.ts","../src/lib/lifinity/swapLayout.ts","../src/lib/whirlpool/whirlpoolAmm.ts","../src/lib/cykura/solanaTickDataProvider.ts","../src/lib/cykura/cykuraAmm.ts","../src/lib/marinade/helpers.ts","../src/lib/marinade/marinadeAmm.ts","../src/lib/routes.ts","../src/utils/token.ts","../src/utils/instruction.ts","../src/lib/routeToInstructions.ts","../src/lib/serum/openOrders.ts","../src/lib/fee.ts","../src/utils/TransactionBuilder.ts","../src/utils/Owner.ts","../src/utils/wait.ts","../src/utils/transactionHelpers.ts","../src/utils/cartesian.ts","../src/lib/computeRouteInfos.ts","../src/utils/tx/errors.ts","../src/utils/indexedRouteMap.ts","../src/lib/jupiter.ts","../src/lib/ammFactory.ts","../src/lib/getTopTokens.ts"],"sourcesContent":["export type Jupiter = {\n  version: '0.1.0';\n  name: 'jupiter';\n  instructions: [\n    {\n      name: 'mercurialExchange';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swapState';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'poolAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userTransferAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'sourceTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'destinationTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'saberExchange';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swap';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swapAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'clock';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'inputUserAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'inputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputUserAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'feesTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'saberSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swap';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swapAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'inputUserAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'inputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputUserAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'feesTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'saberAddDecimalsDeposit';\n      accounts: [\n        {\n          name: 'addDecimalsProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'wrapper';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'wrapperMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'wrapperUnderlyingTokens';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'owner';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'userUnderlyingTokens';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userWrappedTokens';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'saberAddDecimalsWithdraw';\n      accounts: [\n        {\n          name: 'addDecimalsProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'wrapper';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'wrapperMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'wrapperUnderlyingTokens';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'owner';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'userUnderlyingTokens';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userWrappedTokens';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'senchaExchange';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swap';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'inputUserAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'inputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'inputFeesAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputUserAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputFeesAccount';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'serumSwap';\n      accounts: [\n        {\n          name: 'market';\n          accounts: [\n            {\n              name: 'market';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'openOrders';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'requestQueue';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'eventQueue';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'bids';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'asks';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'coinVault';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'pcVault';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'vaultSigner';\n              isMut: false;\n              isSigner: false;\n            },\n          ];\n        },\n        {\n          name: 'authority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'orderPayerTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'coinWallet';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'pcWallet';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'dexProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'rent';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'side';\n          type: {\n            defined: 'Side';\n          };\n        },\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'tokenSwap';\n      accounts: [\n        {\n          name: 'tokenSwapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swap';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'authority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userTransferAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'source';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapSource';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapDestination';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'destination';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolFee';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'stepTokenSwap';\n      accounts: [\n        {\n          name: 'tokenSwapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swap';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'authority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userTransferAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'source';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapSource';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapDestination';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'destination';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolFee';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'cropperTokenSwap';\n      accounts: [\n        {\n          name: 'tokenSwapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swap';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swapState';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'authority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userTransferAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'source';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapSource';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapDestination';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'destination';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolFee';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'raydiumSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'ammId';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'ammAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'ammOpenOrders';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'ammTargetOrders';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolCoinTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolPcTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumProgramId';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'serumMarket';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumBids';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumAsks';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumEventQueue';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumCoinVaultAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumPcVaultAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumVaultSigner';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userSourceTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userDestinationTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userSourceOwner';\n          isMut: false;\n          isSigner: true;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'raydiumSwapV2';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'ammId';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'ammAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'ammOpenOrders';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolCoinTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolPcTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumProgramId';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'serumMarket';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumBids';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumAsks';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumEventQueue';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumCoinVaultAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumPcVaultAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumVaultSigner';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userSourceTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userDestinationTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userSourceOwner';\n          isMut: false;\n          isSigner: true;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'aldrinSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'pool';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'poolSigner';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'poolMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'baseTokenVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'quoteTokenVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'feePoolTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'walletAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'userBaseTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userQuoteTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'side';\n          type: {\n            defined: 'Side';\n          };\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'aldrinV2Swap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'pool';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'poolSigner';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'poolMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'baseTokenVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'quoteTokenVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'feePoolTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'walletAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'userBaseTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userQuoteTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'curve';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'side';\n          type: {\n            defined: 'Side';\n          };\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'cremaTokenSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'pool';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolSigner';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userSourceTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userDestinationTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolSourceTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolDestinationTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolTicksAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'walletAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'lifinityTokenSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'authority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'amm';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userTransferAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'sourceInfo';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'destinationInfo';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapSource';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapDestination';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'feeAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'pythAccount';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'pythPcAccount';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'configAccount';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'cykuraSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'signer';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'factoryState';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'poolState';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'inputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'inputVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'lastObservationState';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'coreProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'whirlpoolSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'whirlpool';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenOwnerAccountA';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenVaultA';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenOwnerAccountB';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenVaultB';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tickArray0';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tickArray1';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tickArray2';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'oracle';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'aToB';\n          type: 'bool';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'whirlpoolSwapExactOutput';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'whirlpool';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenOwnerAccountA';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenVaultA';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenOwnerAccountB';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenVaultB';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tickArray0';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tickArray1';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tickArray2';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'oracle';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'outAmount';\n          type: 'u64';\n        },\n        {\n          name: 'maximumInAmount';\n          type: 'u64';\n        },\n        {\n          name: 'aToB';\n          type: 'bool';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'marinadeFinanceDeposit';\n      accounts: [\n        {\n          name: 'marinadeFinanceProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'state';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'msolMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'liqPoolSolLegPda';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'liqPoolMsolLeg';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'liqPoolMsolLegAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'reservePda';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'transferFrom';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'mintTo';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'msolMintAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'systemProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userWsolTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tempWsolTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userTransferAuthority';\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: 'wsolMint';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'rent';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'marinadeFinanceLiquidUnstake';\n      accounts: [\n        {\n          name: 'marinadeFinanceProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'state';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'msolMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'liqPoolSolLegPda';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'liqPoolMsolLeg';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'treasuryMsolAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'getMsolFrom';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'getMsolFromAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'transferSolTo';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'systemProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userWsolTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'riskCheckAndFee';\n      accounts: [\n        {\n          name: 'tokenLedger';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userDestinationTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userTransferAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'initializeTokenLedger';\n      accounts: [\n        {\n          name: 'tokenLedger';\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: 'payer';\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: 'systemProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'setTokenLedger';\n      accounts: [\n        {\n          name: 'tokenLedger';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenAccount';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'createOpenOrders';\n      accounts: [\n        {\n          name: 'openOrders';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'payer';\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: 'dexProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'systemProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'rent';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'market';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n  ];\n  accounts: [\n    {\n      name: 'tokenLedger';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'tokenAccount';\n            type: 'publicKey';\n          },\n          {\n            name: 'amount';\n            type: 'u64';\n          },\n        ];\n      };\n    },\n  ];\n  types: [\n    {\n      name: 'Swap';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'tokens';\n            type: 'u64';\n          },\n          {\n            name: 'minTokens';\n            type: 'u64';\n          },\n          {\n            name: 'side';\n            type: {\n              defined: 'Side';\n            };\n          },\n        ];\n      };\n    },\n    {\n      name: 'Swap';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'tokens';\n            type: 'u64';\n          },\n          {\n            name: 'minTokens';\n            type: 'u64';\n          },\n          {\n            name: 'side';\n            type: {\n              defined: 'Side';\n            };\n          },\n        ];\n      };\n    },\n    {\n      name: 'Swap';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'amountIn';\n            type: 'u64';\n          },\n          {\n            name: 'minimumAmountOut';\n            type: 'u64';\n          },\n        ];\n      };\n    },\n    {\n      name: 'Deposit';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'lamports';\n            type: 'u64';\n          },\n        ];\n      };\n    },\n    {\n      name: 'LiquidUnstake';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'msolAmount';\n            type: 'u64';\n          },\n        ];\n      };\n    },\n    {\n      name: 'Swap';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'amount';\n            type: 'u64';\n          },\n          {\n            name: 'otherAmountThreshold';\n            type: 'u64';\n          },\n          {\n            name: 'sqrtPriceLimit';\n            type: 'u128';\n          },\n          {\n            name: 'amountSpecifiedIsInput';\n            type: 'bool';\n          },\n          {\n            name: 'aToB';\n            type: 'bool';\n          },\n        ];\n      };\n    },\n    {\n      name: 'SwapInstrution';\n      type: {\n        kind: 'enum';\n        variants: [\n          {\n            name: 'Swap';\n            fields: [\n              {\n                defined: 'Swap';\n              },\n            ];\n          },\n        ];\n      };\n    },\n    {\n      name: 'Side';\n      type: {\n        kind: 'enum';\n        variants: [\n          {\n            name: 'Bid';\n          },\n          {\n            name: 'Ask';\n          },\n        ];\n      };\n    },\n    {\n      name: 'Direction';\n      type: {\n        kind: 'enum';\n        variants: [\n          {\n            name: 'LeftToRight';\n          },\n          {\n            name: 'RightToLeft';\n          },\n        ];\n      };\n    },\n  ];\n  errors: [\n    {\n      code: 6000;\n      name: 'SlippageToleranceExceeded';\n      msg: 'Slippage tolerance exceeded';\n    },\n    {\n      code: 6001;\n      name: 'InvalidTokenLedger';\n      msg: 'Invalid token ledger';\n    },\n    {\n      code: 6002;\n      name: 'MissingTokenLedger';\n      msg: 'Missing token ledger';\n    },\n    {\n      code: 6003;\n      name: 'MissingMercurialExchangeTokenAccount';\n      msg: 'Missing mercurial exchange token account';\n    },\n    {\n      code: 6004;\n      name: 'LedgerTokenAccountDoesNotMatch';\n      msg: 'Ledger token account does not match';\n    },\n    {\n      code: 6005;\n      name: 'MissingPlatformFeeAccount';\n      msg: 'Missing platform fee account';\n    },\n    {\n      code: 6006;\n      name: 'InvalidCalculation';\n      msg: 'Invalid calculation';\n    },\n  ];\n};\n\nexport const IDL: Jupiter = {\n  version: '0.1.0',\n  name: 'jupiter',\n  instructions: [\n    {\n      name: 'mercurialExchange',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swapState',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userTransferAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'sourceTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'destinationTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'saberExchange',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swap',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swapAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'clock',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'inputUserAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'inputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputUserAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'feesTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'saberSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swap',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swapAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'inputUserAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'inputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputUserAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'feesTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'saberAddDecimalsDeposit',\n      accounts: [\n        {\n          name: 'addDecimalsProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'wrapper',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'wrapperMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'wrapperUnderlyingTokens',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'owner',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'userUnderlyingTokens',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userWrappedTokens',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'saberAddDecimalsWithdraw',\n      accounts: [\n        {\n          name: 'addDecimalsProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'wrapper',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'wrapperMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'wrapperUnderlyingTokens',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'owner',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'userUnderlyingTokens',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userWrappedTokens',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'senchaExchange',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swap',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'inputUserAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'inputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'inputFeesAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputUserAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputFeesAccount',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'serumSwap',\n      accounts: [\n        {\n          name: 'market',\n          accounts: [\n            {\n              name: 'market',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'openOrders',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'requestQueue',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'eventQueue',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'bids',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'asks',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'coinVault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'pcVault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultSigner',\n              isMut: false,\n              isSigner: false,\n            },\n          ],\n        },\n        {\n          name: 'authority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'orderPayerTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'coinWallet',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'pcWallet',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'dexProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'side',\n          type: {\n            defined: 'Side',\n          },\n        },\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'tokenSwap',\n      accounts: [\n        {\n          name: 'tokenSwapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swap',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'authority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userTransferAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'source',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapSource',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapDestination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'destination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolFee',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'stepTokenSwap',\n      accounts: [\n        {\n          name: 'tokenSwapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swap',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'authority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userTransferAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'source',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapSource',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapDestination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'destination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolFee',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'cropperTokenSwap',\n      accounts: [\n        {\n          name: 'tokenSwapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swap',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swapState',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'authority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userTransferAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'source',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapSource',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapDestination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'destination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolFee',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'raydiumSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'ammId',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'ammAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'ammOpenOrders',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'ammTargetOrders',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolCoinTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolPcTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumProgramId',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'serumMarket',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumBids',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumAsks',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumEventQueue',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumCoinVaultAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumPcVaultAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumVaultSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userSourceTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userDestinationTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userSourceOwner',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'raydiumSwapV2',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'ammId',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'ammAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'ammOpenOrders',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolCoinTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolPcTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumProgramId',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'serumMarket',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumBids',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumAsks',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumEventQueue',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumCoinVaultAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumPcVaultAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumVaultSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userSourceTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userDestinationTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userSourceOwner',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'aldrinSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'pool',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'baseTokenVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'quoteTokenVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'feePoolTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'walletAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'userBaseTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userQuoteTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'side',\n          type: {\n            defined: 'Side',\n          },\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'aldrinV2Swap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'pool',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'baseTokenVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'quoteTokenVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'feePoolTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'walletAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'userBaseTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userQuoteTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'curve',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'side',\n          type: {\n            defined: 'Side',\n          },\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'cremaTokenSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'pool',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userSourceTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userDestinationTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolSourceTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolDestinationTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolTicksAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'walletAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'lifinityTokenSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'authority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'amm',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userTransferAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'sourceInfo',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'destinationInfo',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapSource',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapDestination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'feeAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'pythAccount',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'pythPcAccount',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'configAccount',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'cykuraSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'signer',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'factoryState',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolState',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'inputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'inputVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'lastObservationState',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'coreProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'whirlpoolSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'whirlpool',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenOwnerAccountA',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenVaultA',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenOwnerAccountB',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenVaultB',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tickArray0',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tickArray1',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tickArray2',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'oracle',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'aToB',\n          type: 'bool',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'whirlpoolSwapExactOutput',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'whirlpool',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenOwnerAccountA',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenVaultA',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenOwnerAccountB',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenVaultB',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tickArray0',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tickArray1',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tickArray2',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'oracle',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'outAmount',\n          type: 'u64',\n        },\n        {\n          name: 'maximumInAmount',\n          type: 'u64',\n        },\n        {\n          name: 'aToB',\n          type: 'bool',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'marinadeFinanceDeposit',\n      accounts: [\n        {\n          name: 'marinadeFinanceProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'state',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'msolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'liqPoolSolLegPda',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'liqPoolMsolLeg',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'liqPoolMsolLegAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'reservePda',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'transferFrom',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'mintTo',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'msolMintAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userWsolTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tempWsolTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userTransferAuthority',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'wsolMint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'marinadeFinanceLiquidUnstake',\n      accounts: [\n        {\n          name: 'marinadeFinanceProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'state',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'msolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'liqPoolSolLegPda',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'liqPoolMsolLeg',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'treasuryMsolAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'getMsolFrom',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'getMsolFromAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'transferSolTo',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userWsolTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'riskCheckAndFee',\n      accounts: [\n        {\n          name: 'tokenLedger',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userDestinationTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userTransferAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'initializeTokenLedger',\n      accounts: [\n        {\n          name: 'tokenLedger',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'payer',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'setTokenLedger',\n      accounts: [\n        {\n          name: 'tokenLedger',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenAccount',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'createOpenOrders',\n      accounts: [\n        {\n          name: 'openOrders',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'payer',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'dexProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'market',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n  ],\n  accounts: [\n    {\n      name: 'tokenLedger',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'tokenAccount',\n            type: 'publicKey',\n          },\n          {\n            name: 'amount',\n            type: 'u64',\n          },\n        ],\n      },\n    },\n  ],\n  types: [\n    {\n      name: 'Swap',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'tokens',\n            type: 'u64',\n          },\n          {\n            name: 'minTokens',\n            type: 'u64',\n          },\n          {\n            name: 'side',\n            type: {\n              defined: 'Side',\n            },\n          },\n        ],\n      },\n    },\n    {\n      name: 'Swap',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'tokens',\n            type: 'u64',\n          },\n          {\n            name: 'minTokens',\n            type: 'u64',\n          },\n          {\n            name: 'side',\n            type: {\n              defined: 'Side',\n            },\n          },\n        ],\n      },\n    },\n    {\n      name: 'Swap',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'amountIn',\n            type: 'u64',\n          },\n          {\n            name: 'minimumAmountOut',\n            type: 'u64',\n          },\n        ],\n      },\n    },\n    {\n      name: 'Deposit',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'lamports',\n            type: 'u64',\n          },\n        ],\n      },\n    },\n    {\n      name: 'LiquidUnstake',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'msolAmount',\n            type: 'u64',\n          },\n        ],\n      },\n    },\n    {\n      name: 'Swap',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'amount',\n            type: 'u64',\n          },\n          {\n            name: 'otherAmountThreshold',\n            type: 'u64',\n          },\n          {\n            name: 'sqrtPriceLimit',\n            type: 'u128',\n          },\n          {\n            name: 'amountSpecifiedIsInput',\n            type: 'bool',\n          },\n          {\n            name: 'aToB',\n            type: 'bool',\n          },\n        ],\n      },\n    },\n    {\n      name: 'SwapInstrution',\n      type: {\n        kind: 'enum',\n        variants: [\n          {\n            name: 'Swap',\n            fields: [\n              {\n                defined: 'Swap',\n              },\n            ],\n          },\n        ],\n      },\n    },\n    {\n      name: 'Side',\n      type: {\n        kind: 'enum',\n        variants: [\n          {\n            name: 'Bid',\n          },\n          {\n            name: 'Ask',\n          },\n        ],\n      },\n    },\n    {\n      name: 'Direction',\n      type: {\n        kind: 'enum',\n        variants: [\n          {\n            name: 'LeftToRight',\n          },\n          {\n            name: 'RightToLeft',\n          },\n        ],\n      },\n    },\n  ],\n  errors: [\n    {\n      code: 6000,\n      name: 'SlippageToleranceExceeded',\n      msg: 'Slippage tolerance exceeded',\n    },\n    {\n      code: 6001,\n      name: 'InvalidTokenLedger',\n      msg: 'Invalid token ledger',\n    },\n    {\n      code: 6002,\n      name: 'MissingTokenLedger',\n      msg: 'Missing token ledger',\n    },\n    {\n      code: 6003,\n      name: 'MissingMercurialExchangeTokenAccount',\n      msg: 'Missing mercurial exchange token account',\n    },\n    {\n      code: 6004,\n      name: 'LedgerTokenAccountDoesNotMatch',\n      msg: 'Ledger token account does not match',\n    },\n    {\n      code: 6005,\n      name: 'MissingPlatformFeeAccount',\n      msg: 'Missing platform fee account',\n    },\n    {\n      code: 6006,\n      name: 'InvalidCalculation',\n      msg: 'Invalid calculation',\n    },\n  ],\n};\n","import { Cluster, PublicKey } from '@solana/web3.js';\nimport { IDL } from './lib/idl/jupiter';\n\nexport const WRAPPED_SOL_MINT = new PublicKey('So11111111111111111111111111111111111111112');\n\nexport const MAINNET_SERUM_DEX_PROGRAM = new PublicKey('9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin');\n\nexport const DEVNET_SERUM_DEX_PROGRAM = new PublicKey('DESVgJVGajEgKGXhb6XmqDHGz3VjdgP7rEVESBgxmroY');\n\nexport const MARKETS_URL: Record<Cluster, string> = {\n  devnet: 'https://api.jup.ag/api/markets/cache/devnet',\n  'mainnet-beta': 'https://cache.jup.ag/markets?v=3',\n  testnet: 'https://api.jup.ag/api/markets/cache/devnet',\n};\n\nexport const INDEXED_ROUTE_MAP_URL = 'https://cache.jup.ag/indexed-route-map';\n\nexport const TOKEN_LIST_URL: Record<Cluster, string> = {\n  devnet: 'https://api.jup.ag/api/tokens/devnet',\n  testnet: 'https://api.jup.ag/api/markets/devnet',\n  'mainnet-beta': 'https://cache.jup.ag/tokens',\n};\n\nexport const LAMPORTS_PER_SIGNATURE = 5000;\n\nexport const RAYDIUM_AMM_V4_PROGRAM_ID = new PublicKey('675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8');\n\nexport const ALDRIN_SWAP_PROGRAM_ID = new PublicKey('AMM55ShdkoGRB5jVYPjWziwk8m5MpwyDgsMWHaMSQWH6');\n\n// https://github.com/aldrin-exchange/aldrin-sdk/blob/f93fe3f2d847d79d8ddff507d8d4f62fd803421b/src/v2.json\nexport const ALDRIN_SWAP_V2_PROGRAM_ID = new PublicKey('CURVGoZn8zycx6FXwwevgBTB2gVvdbGTEpvMJDbgs2t4');\n\nexport const SABER_ADD_DECIMALS_PROGRAM_ID = new PublicKey('DecZY86MU5Gj7kppfUCEmd4LbXXuyZH1yHaP2NTqdiZB');\n\nexport const CROPPER_PROGRAM_ID = new PublicKey('CTMAxxk34HjKWxQ3QLZK1HpaLXmBveao3ESePXbiyfzh');\n\nexport const SENCHA_PROGRAM_ID = new PublicKey('SCHAtsf8mbjyjiv4LkhLKutTf6JnZAbdJKFkXQNMFHZ');\n\nexport const LIFINITY_PROGRAM_ID = new PublicKey('EewxydAPCCVuNEyrVN68PuSYdQ7wKn27V9Gjeoi8dy3S');\n\nexport const CREMA_PROGRAM_ID = new PublicKey('6MLxLqiXaaSUpkgMnWDTuejNZEz3kE7k2woyHGVFw319');\n\nexport const JUPITER_WALLET = new PublicKey('BUX7s2ef2htTGb2KKoPHWkmzxPj4nTWMWRgs5CSbQxf9');\n\nexport const MERCURIAL_SWAP_PROGRAM_ID = new PublicKey('MERLuDFBMmsHnsBPZw2sDQZHvXFMwp8EdjudcU2HKky');\n\nexport const WHIRLPOOL_PROGRAM_ID = new PublicKey('whirLbMiicVdio4qvUfM5KAg6Ct8VwpYzGff3uctyCc');\n\nexport const CYKURA_PROGRAM_ID = new PublicKey('cysPXAjehMpVKUapzbMCCnpFxUFFryEWEaLgnb9NrR8');\n\nexport const CYKURA_FACTORY_STATE_ADDRESS = new PublicKey('DBsMwKfeoUHhxMi9x6wd2AsT12UwUCssjNbUzu1aKgqj');\n\nexport const MARINADE_PROGRAM_ID = new PublicKey('MarBmsSgKXdrN1egZf5sqe1TMai9K1rChYNDJgjq7aD');\n\nexport const STEPN_PROGRAM_ID = new PublicKey('Dooar9JkhdZ7J3LHN3A7YCuoGRUggXhQaG4kijfLGU2j');\nexport const ORCA_PROGRAM_ID = new PublicKey('9W959DqEETiGZocYWCQPaJ6sBmUzgfxXfqGeTEdp3aQP');\nexport const STEP_TOKEN_SWAP_PROGRAM_ID = new PublicKey('SSwpMgqNDsyV7mAgN9ady4bDVu5ySjmmXejXvy2vLt1');\n\nexport const PENGUIN_PROGRAM_ID = new PublicKey('PSwapMdSai8tjrEXcxFeQth87xC4rRsa4VA5mhGhXkP');\nexport const SAROS_PROGRAM_ID = new PublicKey('SSwapUtytfBdBn1b9NUGG6foMVPtcWgpRU32HToDUZr');\n\n/** Tokens which are fundamental pivot in certain protocols */\nexport const SWAP_PROTOCOL_TOKENS = [\n  'StepAscQoEioFxxWGnh2sLBDFp9d8rvKz2Yp39iDpyT', // STEP\n  'DubwWZNWiNGMMeeQHPnMATNj77YZPZSAz2WVR5WjLJqz', // CRP\n];\n\nexport interface ErrorDetails {\n  code: number;\n  name: string;\n  msg: string;\n}\n\ntype JUPITER_ERROR_TYPES =\n  | 'TransactionNotConfirmed'\n  | 'BalancesNotExtractedProperly'\n  | 'InsufficientSOL'\n  | typeof IDL.errors[number]['name'];\n\nexport const JUPITER_ERRORS: Record<JUPITER_ERROR_TYPES, ErrorDetails> = Object.freeze({\n  AlreadyInUse: {\n    code: 1,\n    name: 'AlreadyInUsed',\n    msg: 'Account already In Used',\n  },\n  InsufficientSOL: {\n    code: 1,\n    name: 'InsufficientSOL',\n    msg: 'Insufficient SOL',\n  },\n  TransactionNotConfirmed: {\n    code: 7000, // a code that is not in the list of errors\n    name: 'TransactionNotConfirmed',\n    msg: 'Transaction was not confirmed',\n  },\n  BalancesNotExtractedProperly: {\n    code: 7001, // a code that is not in the list of errors\n    name: 'BalancesNotExtractedProperly',\n    msg: 'Balances cannot be extracted properly',\n  },\n  ...IDL.errors.reduce((accErrors, error) => {\n    return { ...accErrors, [error.name]: error };\n  }, {} as Record<typeof IDL.errors[number]['name'], ErrorDetails>),\n});\n\nexport const IS_DEV = process.env.NODE_ENV === 'development';\n\nexport const MIN_SEGMENT_SIZE_FOR_INTERMEDIATE_MINTS = 100;\n","import { blob, Layout, Structure, u8, union } from '@solana/buffer-layout';\nimport { u64 } from '@solana/spl-token';\nimport { PublicKey } from '@solana/web3.js';\n\nclass PublicKeyLayout extends Layout<PublicKey> {\n  private layout: Layout<any>;\n\n  constructor(property?: string) {\n    const layout = blob(32);\n    super(layout.span, property);\n    this.layout = layout;\n  }\n\n  getSpan(b: Uint8Array, offset?: number) {\n    return this.layout.getSpan(b, offset);\n  }\n\n  decode(b: Uint8Array, offset?: number): PublicKey {\n    return new PublicKey(this.layout.decode(b, offset));\n  }\n\n  encode(src: PublicKey, b: Uint8Array, offset: number): number {\n    return this.layout.encode(src.toBuffer(), b, offset);\n  }\n}\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string) => new PublicKeyLayout(property);\n\nclass U64Layout extends Layout<u64> {\n  private layout: Layout<any>;\n\n  constructor(span = 8, property: string) {\n    const layout = blob(span);\n    super(layout.span, property);\n    this.layout = layout;\n  }\n\n  getSpan(b: Uint8Array, offset?: number) {\n    return this.layout.getSpan(b, offset);\n  }\n\n  decode(b: Uint8Array, offset?: number): u64 {\n    const bn = new u64(this.layout.decode(b, offset), 10, 'le');\n\n    return bn;\n  }\n\n  encode(src: u64, b: Uint8Array, offset: number): number {\n    return this.layout.encode(src.toArrayLike(Buffer, 'le', this.layout.span), b, offset);\n  }\n}\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string) => new U64Layout(8, property);\n\nexport const uint128 = (property: string) => new U64Layout(16, property);\n\nexport const rustEnum = (variants: Structure<any>[], property: string) => {\n  // @ts-expect-error TODO: fix this\n  const unionLayout = union(u8(), u8(), property);\n  variants.forEach((variant, index) => unionLayout.addVariant(index, variant, variant.property || ''));\n  return unionLayout;\n};\n","/**\n * Derive a program address from seeds and a program ID.\n */\nimport { sha256 } from 'js-sha256';\nimport { MAX_SEED_LENGTH, PublicKey } from '@solana/web3.js';\nimport BN from 'bn.js';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n\n/**\n * Derive a program address from seeds and a program ID.\n * Without checking the resulting address is off curve to save computation\n */\nexport function createProgramAddressSyncUnsafe(seeds: Array<Buffer | Uint8Array>, programId: PublicKey): PublicKey {\n  let buffer = Buffer.alloc(0);\n  seeds.forEach(function (seed) {\n    if (seed.length > MAX_SEED_LENGTH) {\n      throw new TypeError(`Max seed length exceeded`);\n    }\n    buffer = Buffer.concat([buffer, toBuffer(seed)]);\n  });\n  buffer = Buffer.concat([buffer, programId.toBuffer(), Buffer.from('ProgramDerivedAddress')]);\n  let hash = sha256(new Uint8Array(buffer));\n  let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n  // if (PublicKey.isOnCurve(new Uint8Array(publicKeyBytes))) {\n  //   throw new Error(`Invalid seeds, address must fall off the curve`);\n  // }\n  return new PublicKey(publicKeyBytes);\n}\n","import { blob, struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/spl-token';\nimport { AccountInfo, PublicKey } from '@solana/web3.js';\nimport { publicKey, uint64 } from '../../utils/layout';\nimport { createProgramAddressSyncUnsafe } from '../../utils/pda';\n\ninterface CropperTokenSwapLayout {\n  version: number;\n  isInitialized: number;\n  nonce: number;\n  ammId: PublicKey;\n  serumProgramId: PublicKey;\n  serumMarket: PublicKey;\n  tokenProgramId: PublicKey;\n  tokenAAccount: PublicKey;\n  tokenBAccount: PublicKey;\n  poolMint: PublicKey;\n  mintA: PublicKey;\n  mintB: PublicKey;\n}\n\nexport const CropperTokenSwapLayout = struct<CropperTokenSwapLayout>([\n  u8('version'),\n  u8('isInitialized'),\n  u8('nonce'),\n  publicKey('ammId'),\n  publicKey('serumProgramId'),\n  publicKey('serumMarket'),\n  publicKey('tokenProgramId'),\n  publicKey('tokenAAccount'),\n  publicKey('tokenBAccount'),\n  publicKey('poolMint'),\n  publicKey('mintA'),\n  publicKey('mintB'),\n]);\n\ninterface CropperStateLayout {\n  isInitialized: number;\n  stateOwner: PublicKey;\n  feeOwner: PublicKey;\n  initialSupply: u64;\n  returnFeeNumerator: u64;\n  fixedFeeNumerator: u64;\n  feeDenominator: u64;\n  curveType: number;\n  curveParameters: Uint8Array;\n}\n\nconst CropperStateLayout = struct<CropperStateLayout>([\n  u8('isInitialized'),\n  publicKey('stateOwner'),\n  publicKey('feeOwner'),\n  uint64('initialSupply'),\n  uint64('returnFeeNumerator'),\n  uint64('fixedFeeNumerator'),\n  uint64('feeDenominator'),\n  u8('curveType'),\n  blob(32, 'curveParameters'),\n]);\n\nexport interface CropperState {\n  isInitialized: boolean;\n  stateOwner: PublicKey;\n  feeOwner: PublicKey;\n  initialSupply: u64;\n  returnFeeNumerator: number;\n  fixedFeeNumerator: number;\n  feeDenominator: number;\n  curveType: number;\n  curveParameters: Uint8Array;\n}\n\nexport interface CropperPoolState {\n  programId: PublicKey;\n  authority: PublicKey;\n  version: number;\n  isInitialized: boolean;\n  nonce: number;\n  ammId: PublicKey;\n  serumProgramId: PublicKey;\n  serumMarket: PublicKey;\n  tokenProgramId: PublicKey;\n  tokenAAccount: PublicKey;\n  tokenBAccount: PublicKey;\n  poolMint: PublicKey;\n  mintA: PublicKey;\n  mintB: PublicKey;\n}\n\n// This seems to be hardcoded.\nexport const CROPPER_STATE_ADDRESS = new PublicKey('3hsU1VgsBgBgz5jWiqdw9RfGU6TpWdCmdah1oi4kF3Tq');\n\nexport const accountInfoToCropperPoolState = (\n  address: PublicKey,\n  accountInfo: AccountInfo<Buffer>,\n): CropperPoolState => {\n  const programId = accountInfo.owner;\n\n  const decoded = CropperTokenSwapLayout.decode(accountInfo.data);\n  const authority = createProgramAddressSyncUnsafe([address.toBuffer(), Buffer.from([decoded.nonce])], programId);\n\n  return {\n    programId,\n    authority,\n    version: decoded.version,\n    isInitialized: Boolean(decoded.isInitialized),\n    nonce: decoded.nonce,\n    ammId: decoded.ammId,\n    serumProgramId: decoded.serumProgramId,\n    tokenProgramId: decoded.tokenProgramId,\n    tokenAAccount: decoded.tokenAAccount,\n    tokenBAccount: decoded.tokenBAccount,\n    serumMarket: decoded.serumMarket,\n    poolMint: decoded.poolMint,\n    mintA: decoded.mintA,\n    mintB: decoded.mintB,\n  };\n};\n\nexport const stateAccountInfoToCropperState = (accountInfo: AccountInfo<Buffer>): CropperState => {\n  const decoded = CropperStateLayout.decode(accountInfo.data);\n\n  return {\n    isInitialized: Boolean(decoded.isInitialized),\n    stateOwner: decoded.stateOwner,\n    feeOwner: decoded.feeOwner,\n    initialSupply: decoded.initialSupply,\n    returnFeeNumerator: decoded.returnFeeNumerator.toNumber(),\n    fixedFeeNumerator: decoded.fixedFeeNumerator.toNumber(),\n    feeDenominator: decoded.feeDenominator.toNumber(),\n    curveType: decoded.curveType,\n    curveParameters: decoded.curveParameters,\n  };\n};\n","import type { Provider } from '@project-serum/anchor';\nimport { Program } from '@project-serum/anchor';\nimport { createProgramAddressSync, findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { Market } from '@project-serum/serum';\nimport { NATIVE_MINT, TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { AccountMeta, PublicKey, SystemProgram, SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport BN from 'bn.js';\nimport { Jupiter as JupiterIDL, IDL } from './idl/jupiter';\nimport type { RaydiumAmm } from './raydium/raydiumAmm';\nimport { StableSwap } from '@saberhq/stableswap-sdk';\nimport {\n  ALDRIN_SWAP_PROGRAM_ID,\n  ALDRIN_SWAP_V2_PROGRAM_ID,\n  RAYDIUM_AMM_V4_PROGRAM_ID,\n  SABER_ADD_DECIMALS_PROGRAM_ID,\n  MERCURIAL_SWAP_PROGRAM_ID,\n  CYKURA_PROGRAM_ID,\n  CYKURA_FACTORY_STATE_ADDRESS,\n  WHIRLPOOL_PROGRAM_ID,\n  MARINADE_PROGRAM_ID,\n} from '../constants';\nimport { AldrinPoolState } from './aldrin/poolState';\nimport type { TokenSwapState } from './spl-token-swap/tokenSwapLayout';\nimport { PlatformFee } from './types';\nimport type { AddDecimals } from './saber/saberAddDecimalsAmm';\nimport { CropperPoolState, CROPPER_STATE_ADDRESS } from './cropper/swapLayout';\nimport { SenchaPoolState } from './sencha/swapLayout';\nimport { CremaPoolState } from './crema/swapLayout';\nimport { MercurialSwapLayoutState } from './mercurial/swapLayout';\nimport { LifinitySwapLayoutState } from './lifinity/swapLayout';\nimport { MarinadeStateResponse } from './marinade/marinade-state.types';\nimport JSBI from 'jsbi';\n\n// Side rust enum used for the program's RPC API.\nconst Side = {\n  Bid: { bid: {} },\n  Ask: { ask: {} },\n};\n\nexport const JUPITER_PROGRAM_ID_STAGING = new PublicKey('JUPSjgjMFjU4453KMgxhqVmzep6W352bQpE4RsNqXAx');\nexport const JUPITER_PROGRAM_ID_PRODUCTION = new PublicKey('JUP3c2Uh3WA4Ng34tw6kPd2G4C5BB21Xo36Je1s32Ph');\n\nexport const JUPITER_PROGRAM_ID = JUPITER_PROGRAM_ID_PRODUCTION; // JUPITER_PROGRAM_ID_PRODUCTION;\n\nconst JUPITER_PROGRAM = new Program<JupiterIDL>(IDL, JUPITER_PROGRAM_ID, {} as Provider);\n\nexport const PRODUCTION_TOKEN_LEDGERS = [\n  new PublicKey('755CiAfB63jK8DTZSM38ZRBTjf1inGM4QfLJTfpPM9x3'),\n  new PublicKey('5ZZ7w2C1c348nQm4zaYgrgb8gfyyqQNzH61zPwGvEQK9'),\n  new PublicKey('H4K65yLyYqVsDxgNCVGqK7MqrpKFLZjmqf95ZvmfyVDx'),\n  new PublicKey('HE4STzYv5dzw2G374ynt4EYvzuKLG41P2xnNffzpdWnG'),\n  new PublicKey('3HmXTbZf6G2oEjN3bPreZmF7YGLbbEXFkgAbVFPaimwU'),\n  new PublicKey('CUNMrNvGNh1aWR6cVzAQekdsW2dfacnQicyfvgvrN5ap'),\n  new PublicKey('6Q6vMHsUFA7kuwdkG9vm7gByMfk151Z9eMSwE14fHcrG'),\n];\nexport const STAGING_TOKEN_LEDGERS = [new PublicKey('755CiAfB63jK8DTZSM38ZRBTjf1inGM4QfLJTfpPM9x3')];\n\nexport const TOKEN_LEDGER: PublicKey =\n  PRODUCTION_TOKEN_LEDGERS[Math.floor(Math.random() * PRODUCTION_TOKEN_LEDGERS.length)];\n\ntype CreateSwapInstructionParams = {\n  sourceMint: PublicKey;\n  userSourceTokenAccount: PublicKey;\n  userDestinationTokenAccount: PublicKey;\n  userTransferAuthority: PublicKey;\n  inAmount: BN | null;\n  minimumOutAmount: BN;\n  tokenLedger: PublicKey;\n  platformFee?: PlatformFee;\n};\n\ntype CreateSwapExactOutputInstructionParams = {\n  sourceMint: PublicKey;\n  userSourceTokenAccount: PublicKey;\n  userDestinationTokenAccount: PublicKey;\n  userTransferAuthority: PublicKey;\n  outAmount: BN;\n  maximumInAmount: BN;\n  tokenLedger: PublicKey;\n  platformFee?: PlatformFee;\n};\n\nfunction stableSwapNPoolIntoMercurialExchange(\n  swayLayout: MercurialSwapLayoutState,\n  sourceTokenAccount: PublicKey,\n  destinationTokenAccount: PublicKey,\n  userTransferAuthority: PublicKey,\n) {\n  return {\n    swapProgram: MERCURIAL_SWAP_PROGRAM_ID,\n    swapState: swayLayout.ammId,\n    tokenProgram: TOKEN_PROGRAM_ID,\n    poolAuthority: swayLayout.authority,\n    userTransferAuthority: userTransferAuthority,\n\n    sourceTokenAccount,\n    destinationTokenAccount,\n  };\n}\n\nconst [ammAuthority] = findProgramAddressSync(\n  [new Uint8Array(Buffer.from('amm authority'.replace('\\u00A0', ' '), 'utf-8'))],\n  RAYDIUM_AMM_V4_PROGRAM_ID,\n);\n\nfunction raydiumAmmToRaydiumSwap(\n  raydiumAmm: RaydiumAmm,\n  userSourceTokenAccount: PublicKey,\n  userDestinationTokenAccount: PublicKey,\n  userTransferAuthority: PublicKey,\n) {\n  if (!raydiumAmm.serumMarketKeys) {\n    throw new Error('RaydiumAmm is missing serumMarketKeys');\n  }\n\n  return {\n    swapProgram: RAYDIUM_AMM_V4_PROGRAM_ID,\n    tokenProgram: TOKEN_PROGRAM_ID,\n    ammId: raydiumAmm.ammId,\n    ammAuthority,\n    ammOpenOrders: raydiumAmm.ammOpenOrders,\n    poolCoinTokenAccount: raydiumAmm.poolCoinTokenAccount,\n    poolPcTokenAccount: raydiumAmm.poolPcTokenAccount,\n    serumProgramId: raydiumAmm.serumProgramId,\n    serumMarket: raydiumAmm.serumMarket,\n    serumBids: raydiumAmm.serumMarketKeys.serumBids,\n    serumAsks: raydiumAmm.serumMarketKeys.serumAsks,\n    serumEventQueue: raydiumAmm.serumMarketKeys.serumEventQueue,\n    serumCoinVaultAccount: raydiumAmm.serumMarketKeys.serumCoinVaultAccount,\n    serumPcVaultAccount: raydiumAmm.serumMarketKeys.serumPcVaultAccount,\n    serumVaultSigner: raydiumAmm.serumMarketKeys.serumVaultSigner,\n    userSourceTokenAccount: userSourceTokenAccount,\n    userDestinationTokenAccount: userDestinationTokenAccount,\n    userSourceOwner: userTransferAuthority,\n  };\n}\n\nfunction marketIntoSerumSwap(\n  market: Market,\n  openOrdersAddress: PublicKey,\n  orderPayerTokenAccountAddress: PublicKey,\n  coinWallet: PublicKey,\n  pcWallet: PublicKey,\n  userTransferAuthority: PublicKey,\n) {\n  const vaultSigner = createProgramAddressSync(\n    [market.address.toBuffer(), market.decoded.vaultSignerNonce.toArrayLike(Buffer, 'le', 8)],\n    market.programId,\n  );\n\n  return {\n    market: {\n      market: market.address,\n      openOrders: openOrdersAddress,\n      requestQueue: market.decoded.requestQueue,\n      eventQueue: market.decoded.eventQueue,\n      bids: market.bidsAddress,\n      asks: market.asksAddress,\n      coinVault: market.decoded.baseVault,\n      pcVault: market.decoded.quoteVault,\n      vaultSigner,\n    },\n    authority: userTransferAuthority,\n    orderPayerTokenAccount: orderPayerTokenAccountAddress,\n    coinWallet,\n    pcWallet,\n    // Programs.\n    dexProgram: market.programId,\n    tokenProgram: TOKEN_PROGRAM_ID,\n    // Sysvars.\n    rent: SYSVAR_RENT_PUBKEY,\n  };\n}\n\nexport function createMercurialExchangeInstruction({\n  swapLayout,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { swapLayout: MercurialSwapLayoutState } & CreateSwapInstructionParams): TransactionInstruction {\n  const remainingAccounts: AccountMeta[] = [];\n\n  for (const swapTokenAccount of swapLayout.tokenAccounts) {\n    remainingAccounts.push({\n      pubkey: swapTokenAccount,\n      isSigner: false,\n      isWritable: true,\n    });\n  }\n  remainingAccounts.push(...prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount));\n\n  return JUPITER_PROGRAM.instruction.mercurialExchange(inAmount, minimumOutAmount, platformFee?.feeBps ?? 0, {\n    accounts: stableSwapNPoolIntoMercurialExchange(\n      swapLayout,\n      userSourceTokenAccount,\n      userDestinationTokenAccount,\n      userTransferAuthority,\n    ),\n    remainingAccounts,\n  });\n}\n\nexport function createSerumSwapInstruction({\n  market,\n  sourceMint,\n  openOrdersAddress,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n  referrer,\n}: {\n  market: Market;\n  openOrdersAddress: PublicKey;\n  referrer: PublicKey | undefined;\n} & CreateSwapInstructionParams): TransactionInstruction {\n  const { side, coinWallet, pcWallet } = sourceMint.equals(market.baseMintAddress)\n    ? {\n        side: Side.Ask,\n        coinWallet: userSourceTokenAccount,\n        pcWallet: userDestinationTokenAccount,\n      }\n    : {\n        side: Side.Bid,\n        coinWallet: userDestinationTokenAccount,\n        pcWallet: userSourceTokenAccount,\n      };\n\n  let remainingAccounts = prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount);\n\n  if (referrer) {\n    remainingAccounts.push({\n      pubkey: referrer,\n      isSigner: false,\n      isWritable: true,\n    });\n  }\n\n  return JUPITER_PROGRAM.instruction.serumSwap(side, inAmount, minimumOutAmount, platformFee?.feeBps ?? 0, {\n    accounts: marketIntoSerumSwap(\n      market,\n      openOrdersAddress,\n      userSourceTokenAccount,\n      coinWallet,\n      pcWallet,\n      userTransferAuthority,\n    ),\n    remainingAccounts,\n  });\n}\n\nexport function createTokenSwapInstruction({\n  tokenSwapState,\n  sourceMint,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n  isStep,\n}: { tokenSwapState: TokenSwapState; isStep: boolean } & CreateSwapInstructionParams): TransactionInstruction {\n  const [swapSource, swapDestination] = sourceMint.equals(tokenSwapState.mintA)\n    ? [tokenSwapState.tokenAccountA, tokenSwapState.tokenAccountB]\n    : [tokenSwapState.tokenAccountB, tokenSwapState.tokenAccountA];\n\n  return (isStep ? JUPITER_PROGRAM.instruction.stepTokenSwap : JUPITER_PROGRAM.instruction.tokenSwap)(\n    inAmount,\n    minimumOutAmount,\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: {\n        tokenSwapProgram: tokenSwapState.programId,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        swap: tokenSwapState.address,\n        authority: tokenSwapState.authority,\n        userTransferAuthority: userTransferAuthority,\n        source: userSourceTokenAccount,\n        swapSource,\n        swapDestination,\n        destination: userDestinationTokenAccount,\n        poolMint: tokenSwapState.poolToken,\n        poolFee: tokenSwapState.feeAccount,\n      },\n      remainingAccounts: prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount),\n    },\n  );\n}\n\nexport function createSenchaSwapInstruction({\n  poolState,\n  sourceMint,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { poolState: SenchaPoolState } & CreateSwapInstructionParams): TransactionInstruction {\n  const [swapSource, swapDestination] = sourceMint.equals(poolState.token0Mint)\n    ? [poolState.token0Reserves, poolState.token1Reserves]\n    : [poolState.token1Reserves, poolState.token0Reserves];\n\n  const [feesSource, feesDestination] = sourceMint.equals(poolState.token0Mint)\n    ? [poolState.token0Fees, poolState.token1Fees]\n    : [poolState.token1Fees, poolState.token0Fees];\n\n  return JUPITER_PROGRAM.instruction.senchaExchange(inAmount, minimumOutAmount, platformFee?.feeBps ?? 0, {\n    accounts: {\n      swapProgram: poolState.programId,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      swap: poolState.ammId,\n      userAuthority: userTransferAuthority,\n      inputUserAccount: userSourceTokenAccount,\n      inputTokenAccount: swapSource,\n      inputFeesAccount: feesSource,\n      outputUserAccount: userDestinationTokenAccount,\n      outputTokenAccount: swapDestination,\n      outputFeesAccount: feesDestination,\n    },\n    remainingAccounts: prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount),\n  });\n}\n\nexport function createCropperSwapInstruction({\n  poolState,\n  feeAccount,\n  sourceMint,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { poolState: CropperPoolState; feeAccount: PublicKey } & CreateSwapInstructionParams): TransactionInstruction {\n  const [swapSource, swapDestination] = sourceMint.equals(poolState.mintA)\n    ? [poolState.tokenAAccount, poolState.tokenBAccount]\n    : [poolState.tokenBAccount, poolState.tokenAAccount];\n\n  return JUPITER_PROGRAM.instruction.cropperTokenSwap(inAmount, minimumOutAmount, platformFee?.feeBps ?? 0, {\n    accounts: {\n      tokenSwapProgram: poolState.programId,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      swap: poolState.ammId,\n      swapState: CROPPER_STATE_ADDRESS,\n      authority: poolState.authority,\n      userTransferAuthority: userTransferAuthority,\n      source: userSourceTokenAccount,\n      swapSource,\n      swapDestination,\n      destination: userDestinationTokenAccount,\n      poolMint: poolState.poolMint,\n      poolFee: feeAccount,\n    },\n    remainingAccounts: prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount),\n  });\n}\n\nexport function createRaydiumSwapInstruction({\n  raydiumAmm,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { raydiumAmm: RaydiumAmm } & CreateSwapInstructionParams): TransactionInstruction {\n  return JUPITER_PROGRAM.instruction.raydiumSwapV2(inAmount, minimumOutAmount, platformFee?.feeBps ?? 0, {\n    accounts: raydiumAmmToRaydiumSwap(\n      raydiumAmm,\n      userSourceTokenAccount,\n      userDestinationTokenAccount,\n      userTransferAuthority,\n    ),\n    remainingAccounts: prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount),\n  });\n}\n\nexport function createAldrinSwapInstruction({\n  poolState,\n  sourceMint,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: {\n  poolState: AldrinPoolState;\n} & CreateSwapInstructionParams): TransactionInstruction {\n  const [side, userBaseTokenAccount, userQuoteTokenAccount] = sourceMint.equals(poolState.baseTokenMint)\n    ? [Side.Ask, userSourceTokenAccount, userDestinationTokenAccount]\n    : [Side.Bid, userDestinationTokenAccount, userSourceTokenAccount];\n\n  return JUPITER_PROGRAM.instruction.aldrinSwap(inAmount, minimumOutAmount, side, platformFee?.feeBps ?? 0, {\n    accounts: {\n      swapProgram: ALDRIN_SWAP_PROGRAM_ID,\n      pool: poolState.address,\n      poolSigner: poolState.poolSigner,\n      poolMint: poolState.poolMint,\n      baseTokenVault: poolState.baseTokenVault,\n      quoteTokenVault: poolState.quoteTokenVault,\n      feePoolTokenAccount: poolState.feePoolTokenAccount,\n      walletAuthority: userTransferAuthority,\n      userBaseTokenAccount,\n      userQuoteTokenAccount,\n      tokenProgram: TOKEN_PROGRAM_ID,\n    },\n    remainingAccounts: prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount),\n  });\n}\n\nexport function createAldrinV2SwapInstruction({\n  poolState,\n  sourceMint,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  curve,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { poolState: AldrinPoolState; curve: PublicKey } & CreateSwapInstructionParams): TransactionInstruction {\n  const [side, userBaseTokenAccount, userQuoteTokenAccount] = sourceMint.equals(poolState.baseTokenMint)\n    ? [Side.Ask, userSourceTokenAccount, userDestinationTokenAccount]\n    : [Side.Bid, userDestinationTokenAccount, userSourceTokenAccount];\n\n  return JUPITER_PROGRAM.instruction.aldrinV2Swap(inAmount, minimumOutAmount, side, platformFee?.feeBps ?? 0, {\n    accounts: {\n      swapProgram: ALDRIN_SWAP_V2_PROGRAM_ID,\n      pool: poolState.address,\n      poolSigner: poolState.poolSigner,\n      poolMint: poolState.poolMint,\n      baseTokenVault: poolState.baseTokenVault,\n      quoteTokenVault: poolState.quoteTokenVault,\n      feePoolTokenAccount: poolState.feePoolTokenAccount,\n      walletAuthority: userTransferAuthority,\n      userBaseTokenAccount,\n      userQuoteTokenAccount,\n      curve,\n      tokenProgram: TOKEN_PROGRAM_ID,\n    },\n    remainingAccounts: prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount),\n  });\n}\n\nexport function createCremaSwapInstruction({\n  poolState,\n  sourceMint,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { poolState: CremaPoolState } & CreateSwapInstructionParams): TransactionInstruction {\n  const [swapSource, swapDestination] = sourceMint.equals(poolState.mintA)\n    ? [poolState.tokenAAccount, poolState.tokenBAccount]\n    : [poolState.tokenBAccount, poolState.tokenAAccount];\n\n  return JUPITER_PROGRAM.instruction.cremaTokenSwap(inAmount, minimumOutAmount, platformFee?.feeBps ?? 0, {\n    accounts: {\n      swapProgram: poolState.programId,\n      pool: poolState.ammId,\n      poolSigner: poolState.authority,\n      userSourceTokenAccount: userSourceTokenAccount,\n      userDestinationTokenAccount: userDestinationTokenAccount,\n      poolSourceTokenAccount: swapSource,\n      poolDestinationTokenAccount: swapDestination,\n      poolTicksAccount: poolState.ticksKey,\n      walletAuthority: userTransferAuthority,\n      tokenProgram: TOKEN_PROGRAM_ID,\n    },\n    remainingAccounts: prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount),\n  });\n}\n\nexport function createRiskCheckAndFeeInstruction(\n  userDestinationTokenAccount: PublicKey,\n  userTransferAuthority: PublicKey,\n  minimumOutAmount: BN,\n  tokenLedger: PublicKey,\n  platformFee: PlatformFee | undefined,\n): TransactionInstruction {\n  const remainingAccounts: AccountMeta[] = [];\n\n  if (platformFee?.feeAccount) {\n    remainingAccounts.push({\n      pubkey: platformFee.feeAccount,\n      isSigner: false,\n      isWritable: true,\n    });\n  }\n\n  return JUPITER_PROGRAM.instruction.riskCheckAndFee(minimumOutAmount, platformFee?.feeBps ?? 0, {\n    accounts: {\n      tokenLedger,\n      userDestinationTokenAccount,\n      userTransferAuthority,\n      tokenProgram: TOKEN_PROGRAM_ID,\n    },\n    remainingAccounts,\n  });\n}\n\nexport function createSetTokenLedgerInstruction(\n  tokenLedger: PublicKey,\n  tokenAccountAddress: PublicKey,\n): TransactionInstruction {\n  return JUPITER_PROGRAM.instruction.setTokenLedger({\n    accounts: {\n      tokenLedger,\n      tokenAccount: tokenAccountAddress,\n    },\n  });\n}\n\nexport function createInitializeTokenLedgerInstruction(\n  tokenLedger: PublicKey,\n  payer: PublicKey,\n): TransactionInstruction {\n  return JUPITER_PROGRAM.instruction.initializeTokenLedger({\n    accounts: {\n      tokenLedger,\n      payer,\n      systemProgram: SystemProgram.programId,\n    },\n  });\n}\n\nexport function createOpenOrdersInstruction(\n  market: Market,\n  userTransferAuthority: PublicKey,\n): [PublicKey, TransactionInstruction] {\n  const [openOrders] = findProgramAddressSync(\n    [Buffer.from('open_orders'), market.publicKey.toBuffer(), userTransferAuthority.toBuffer()],\n    JUPITER_PROGRAM_ID,\n  );\n\n  const ix = JUPITER_PROGRAM.instruction.createOpenOrders({\n    accounts: {\n      openOrders,\n      payer: userTransferAuthority,\n      dexProgram: market.programId,\n      systemProgram: SystemProgram.programId,\n      rent: SYSVAR_RENT_PUBKEY,\n      market: market.publicKey,\n    },\n  });\n  return [openOrders, ix];\n}\n\nfunction saberPoolIntoSaberSwap(\n  saberPool: StableSwap,\n  sourceMintAddress: PublicKey,\n  userSourceTokenAccount: PublicKey,\n  userDestinationTokenAccount: PublicKey,\n  userTransferAuthority: PublicKey,\n) {\n  const feesTokenAccount = sourceMintAddress.equals(saberPool.state.tokenA.mint)\n    ? saberPool.state.tokenB.adminFeeAccount\n    : saberPool.state.tokenA.adminFeeAccount;\n  const [inputTokenAccount, outputTokenAccount] = sourceMintAddress.equals(saberPool.state.tokenA.mint)\n    ? [saberPool.state.tokenA.reserve, saberPool.state.tokenB.reserve]\n    : [saberPool.state.tokenB.reserve, saberPool.state.tokenA.reserve];\n\n  return {\n    swapProgram: saberPool.config.swapProgramID,\n    tokenProgram: TOKEN_PROGRAM_ID,\n    swap: saberPool.config.swapAccount,\n    swapAuthority: saberPool.config.authority,\n    userAuthority: userTransferAuthority,\n    inputUserAccount: userSourceTokenAccount,\n    inputTokenAccount,\n    outputUserAccount: userDestinationTokenAccount,\n    outputTokenAccount,\n    feesTokenAccount,\n  };\n}\n\nexport function createSaberSwapInstruction({\n  stableSwap,\n  sourceMint,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { stableSwap: StableSwap } & CreateSwapInstructionParams): TransactionInstruction {\n  const remainingAccounts = prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount);\n  return JUPITER_PROGRAM.instruction.saberSwap(inAmount, minimumOutAmount, platformFee?.feeBps ?? 0, {\n    accounts: saberPoolIntoSaberSwap(\n      stableSwap,\n      sourceMint,\n      userSourceTokenAccount,\n      userDestinationTokenAccount,\n      userTransferAuthority,\n    ),\n    remainingAccounts,\n  });\n}\n\nexport function createSaberAddDecimalsDepositInstruction({\n  addDecimals,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { addDecimals: AddDecimals } & CreateSwapInstructionParams) {\n  const remainingAccounts = prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount);\n  return JUPITER_PROGRAM.instruction.saberAddDecimalsDeposit(inAmount, minimumOutAmount, platformFee?.feeBps ?? 0, {\n    accounts: {\n      addDecimalsProgram: SABER_ADD_DECIMALS_PROGRAM_ID,\n      wrapper: addDecimals.wrapper,\n      wrapperMint: addDecimals.mint,\n      wrapperUnderlyingTokens: addDecimals.wrapperUnderlyingTokens,\n      owner: userTransferAuthority,\n      userUnderlyingTokens: userSourceTokenAccount,\n      userWrappedTokens: userDestinationTokenAccount,\n      tokenProgram: TOKEN_PROGRAM_ID,\n    },\n    remainingAccounts,\n  });\n}\n\nexport function createSaberAddDecimalsWithdrawInstruction({\n  addDecimals,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { addDecimals: AddDecimals } & CreateSwapInstructionParams) {\n  const remainingAccounts = prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount);\n  return JUPITER_PROGRAM.instruction.saberAddDecimalsWithdraw(inAmount, minimumOutAmount, platformFee?.feeBps ?? 0, {\n    accounts: {\n      addDecimalsProgram: SABER_ADD_DECIMALS_PROGRAM_ID,\n      wrapper: addDecimals.wrapper,\n      wrapperMint: addDecimals.mint,\n      wrapperUnderlyingTokens: addDecimals.wrapperUnderlyingTokens,\n      owner: userTransferAuthority,\n      userUnderlyingTokens: userDestinationTokenAccount,\n      userWrappedTokens: userSourceTokenAccount,\n      tokenProgram: TOKEN_PROGRAM_ID,\n    },\n    remainingAccounts,\n  });\n}\n\nexport function createLifinitySwapInstruction({\n  swapState,\n  sourceMint,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { swapState: LifinitySwapLayoutState } & CreateSwapInstructionParams): TransactionInstruction {\n  const [swapSource, swapDestination] = sourceMint.equals(swapState.tokenAMint)\n    ? [swapState.poolCoinTokenAccount, swapState.poolPcTokenAccount]\n    : [swapState.poolPcTokenAccount, swapState.poolCoinTokenAccount];\n\n  return JUPITER_PROGRAM.instruction.lifinityTokenSwap(inAmount, minimumOutAmount, platformFee?.feeBps ?? 0, {\n    accounts: {\n      swapProgram: swapState.programId,\n      authority: swapState.authority,\n      amm: swapState.amm,\n      userTransferAuthority: userTransferAuthority,\n      sourceInfo: userSourceTokenAccount,\n      destinationInfo: userDestinationTokenAccount,\n      swapSource,\n      swapDestination,\n      poolMint: swapState.poolMint,\n      feeAccount: swapState.feeAccount,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      pythAccount: swapState.pythAccount,\n      pythPcAccount: swapState.pythPcAccount,\n      configAccount: swapState.configAccount,\n    },\n    remainingAccounts: prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount),\n  });\n}\n\ntype CykuraSwapInstructionArgs = {\n  poolAddress: PublicKey;\n  inputVault: PublicKey;\n  outputVault: PublicKey;\n  nextObservationState: PublicKey;\n  lastObservationState: PublicKey;\n  swapAccountMetas: AccountMeta[];\n};\n\nexport function createCykuraSwapInstruction({\n  additionalArgs,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { additionalArgs: CykuraSwapInstructionArgs } & CreateSwapInstructionParams): TransactionInstruction {\n  const remainingAccounts = prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount);\n\n  return JUPITER_PROGRAM.instruction.cykuraSwap(inAmount, minimumOutAmount, platformFee?.feeBps ?? 0, {\n    accounts: {\n      swapProgram: CYKURA_PROGRAM_ID,\n      signer: userTransferAuthority,\n      factoryState: CYKURA_FACTORY_STATE_ADDRESS,\n      poolState: additionalArgs.poolAddress,\n      inputTokenAccount: userSourceTokenAccount,\n      outputTokenAccount: userDestinationTokenAccount,\n      inputVault: additionalArgs.inputVault,\n      outputVault: additionalArgs.outputVault,\n      lastObservationState: additionalArgs.lastObservationState,\n      coreProgram: CYKURA_PROGRAM_ID, // Duplicated as in Cykura accounts\n      tokenProgram: TOKEN_PROGRAM_ID,\n    },\n    remainingAccounts: remainingAccounts.concat([\n      ...additionalArgs.swapAccountMetas,\n      { pubkey: additionalArgs.nextObservationState, isSigner: false, isWritable: true },\n    ]),\n  });\n}\n\ntype WhirlpoolSwapInstructionArgs = {\n  aToB: boolean;\n  whirlpool: PublicKey;\n  tokenVaultA: PublicKey;\n  tokenVaultB: PublicKey;\n  tickArray0: PublicKey;\n  tickArray1: PublicKey;\n  tickArray2: PublicKey;\n  oracle: PublicKey;\n};\n\nexport function createWhirlpoolSwapInstruction({\n  additionalArgs,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { additionalArgs: WhirlpoolSwapInstructionArgs } & CreateSwapInstructionParams): TransactionInstruction {\n  const [tokenOwnerAccountA, tokenOwnerAccountB] = additionalArgs.aToB\n    ? [userSourceTokenAccount, userDestinationTokenAccount]\n    : [userDestinationTokenAccount, userSourceTokenAccount];\n\n  return JUPITER_PROGRAM.instruction.whirlpoolSwap(\n    inAmount,\n    minimumOutAmount,\n    additionalArgs.aToB,\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: {\n        swapProgram: WHIRLPOOL_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        tokenAuthority: userTransferAuthority,\n        whirlpool: additionalArgs.whirlpool,\n        tokenOwnerAccountA,\n        tokenVaultA: additionalArgs.tokenVaultA,\n        tokenOwnerAccountB,\n        tokenVaultB: additionalArgs.tokenVaultB,\n        tickArray0: additionalArgs.tickArray0,\n        tickArray1: additionalArgs.tickArray1,\n        tickArray2: additionalArgs.tickArray2,\n        oracle: additionalArgs.oracle,\n      },\n      remainingAccounts: prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount),\n    },\n  );\n}\n\ntype MarinadeFinanceDepositInstructionArgs = {\n  address: PublicKey;\n  marinadeStateResponse: MarinadeStateResponse;\n  liqPoolSolLegPda: PublicKey;\n  liqPoolMsolLegAuthority: PublicKey;\n  reservePda: PublicKey;\n  msolMintAuthority: PublicKey;\n};\n\nexport function createMarinadeFinanceDepositInstruction({\n  additionalArgs,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { additionalArgs: MarinadeFinanceDepositInstructionArgs } & CreateSwapInstructionParams): TransactionInstruction {\n  const transferFrom = userTransferAuthority;\n  const tempWsolTokenAccount = findProgramAddressSync(\n    [Buffer.from('temp-wsol-token-account'), transferFrom.toBuffer()],\n    JUPITER_PROGRAM_ID,\n  )[0];\n  const tempSolPda = findProgramAddressSync(\n    [Buffer.from('temp-sol-pda'), userTransferAuthority.toBuffer()],\n    JUPITER_PROGRAM_ID,\n  )[0];\n\n  return JUPITER_PROGRAM.instruction.marinadeFinanceDeposit(inAmount, minimumOutAmount, platformFee?.feeBps ?? 0, {\n    accounts: {\n      marinadeFinanceProgram: MARINADE_PROGRAM_ID,\n      state: additionalArgs.address,\n      userTransferAuthority,\n      msolMint: additionalArgs.marinadeStateResponse.msolMint,\n      liqPoolSolLegPda: additionalArgs.liqPoolSolLegPda,\n      liqPoolMsolLeg: additionalArgs.marinadeStateResponse.liqPool.msolLeg,\n      liqPoolMsolLegAuthority: additionalArgs.liqPoolMsolLegAuthority,\n      reservePda: additionalArgs.reservePda,\n      transferFrom: tempSolPda,\n      mintTo: userDestinationTokenAccount,\n      msolMintAuthority: additionalArgs.msolMintAuthority,\n      systemProgram: SystemProgram.programId,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      userWsolTokenAccount: userSourceTokenAccount,\n      tempWsolTokenAccount,\n      wsolMint: NATIVE_MINT,\n      rent: SYSVAR_RENT_PUBKEY,\n    },\n    remainingAccounts: prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount),\n  });\n}\n\ntype MarinadeFinanceLiquidUnstakeInstructionArgs = {\n  address: PublicKey;\n  marinadeStateResponse: MarinadeStateResponse;\n  liqPoolSolLegPda: PublicKey;\n};\n\nexport function createMarinadeFinanceLiquidUnstakeInstruction({\n  additionalArgs,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: {\n  additionalArgs: MarinadeFinanceLiquidUnstakeInstructionArgs;\n} & CreateSwapInstructionParams): TransactionInstruction {\n  const tempSolPda = findProgramAddressSync(\n    [Buffer.from('temp-sol-pda'), userTransferAuthority.toBuffer()],\n    JUPITER_PROGRAM_ID,\n  )[0];\n\n  return JUPITER_PROGRAM.instruction.marinadeFinanceLiquidUnstake(\n    inAmount,\n    minimumOutAmount,\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: {\n        marinadeFinanceProgram: MARINADE_PROGRAM_ID,\n        state: additionalArgs.address,\n        msolMint: additionalArgs.marinadeStateResponse.msolMint,\n        liqPoolSolLegPda: additionalArgs.liqPoolSolLegPda,\n        liqPoolMsolLeg: additionalArgs.marinadeStateResponse.liqPool.msolLeg,\n        treasuryMsolAccount: additionalArgs.marinadeStateResponse.treasuryMsolAccount,\n        getMsolFrom: userSourceTokenAccount,\n        getMsolFromAuthority: userTransferAuthority,\n        transferSolTo: tempSolPda,\n        systemProgram: SystemProgram.programId,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        userWsolTokenAccount: userDestinationTokenAccount,\n      },\n      remainingAccounts: prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount),\n    },\n  );\n}\n\nexport function createWhirlpoolSwapExactOutputInstruction({\n  additionalArgs,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  outAmount,\n  maximumInAmount,\n  tokenLedger,\n  platformFee,\n}: { additionalArgs: WhirlpoolSwapInstructionArgs } & CreateSwapExactOutputInstructionParams): TransactionInstruction {\n  const [tokenOwnerAccountA, tokenOwnerAccountB] = additionalArgs.aToB\n    ? [userSourceTokenAccount, userDestinationTokenAccount]\n    : [userDestinationTokenAccount, userSourceTokenAccount];\n\n  return JUPITER_PROGRAM.instruction.whirlpoolSwapExactOutput(\n    outAmount,\n    maximumInAmount,\n    additionalArgs.aToB,\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: {\n        swapProgram: WHIRLPOOL_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        tokenAuthority: userTransferAuthority,\n        whirlpool: additionalArgs.whirlpool,\n        tokenOwnerAccountA,\n        tokenVaultA: additionalArgs.tokenVaultA,\n        tokenOwnerAccountB,\n        tokenVaultB: additionalArgs.tokenVaultB,\n        tickArray0: additionalArgs.tickArray0,\n        tickArray1: additionalArgs.tickArray1,\n        tickArray2: additionalArgs.tickArray2,\n        oracle: additionalArgs.oracle,\n      },\n      remainingAccounts: prepareRemainingAccounts(new BN(0), tokenLedger, platformFee?.feeAccount),\n    },\n  );\n}\n\nfunction prepareRemainingAccounts(\n  inAmount: BN | null,\n  tokenLedger: PublicKey,\n  feeAccount: PublicKey | undefined,\n): AccountMeta[] {\n  const remainingAccounts = [];\n\n  if (inAmount === null) {\n    remainingAccounts.push({\n      pubkey: tokenLedger,\n      isSigner: false,\n      isWritable: true,\n    });\n  }\n  if (feeAccount) {\n    remainingAccounts.push({\n      pubkey: feeAccount,\n      isSigner: false,\n      isWritable: true,\n    });\n  }\n\n  return remainingAccounts;\n}\n","import { PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport JSBI from 'jsbi';\nimport { AccountInfoMap, Amm, QuoteParams, SwapParams } from '../amm';\n// Modified from saber's registry to contain the underlying mint decimal to avoid pointless queries\nimport addDecimalsJson from './add-decimals-complete-state.mainnet-beta.json';\nimport {\n  createSaberAddDecimalsDepositInstruction,\n  createSaberAddDecimalsWithdrawInstruction,\n} from '../jupiterInstruction';\nimport { ZERO } from '@jup-ag/math';\n\nexport interface AddDecimals {\n  wrapper: PublicKey;\n  underlying: PublicKey;\n  underlyingDecimals: number;\n  wrapperUnderlyingTokens: PublicKey;\n  mint: PublicKey;\n  decimals: number;\n}\n\nexport function getSaberWrappedDecimalsAmms() {\n  return addDecimalsJson.map((addDecimalJson) => {\n    const addDecimals = {\n      wrapper: new PublicKey(addDecimalJson.wrapper),\n      underlying: new PublicKey(addDecimalJson.underlying),\n      underlyingDecimals: addDecimalJson.underlyingDecimals,\n      wrapperUnderlyingTokens: new PublicKey(addDecimalJson.wrapperUnderlyingTokens),\n      mint: new PublicKey(addDecimalJson.mint),\n      decimals: addDecimalJson.decimals,\n    };\n\n    return new SaberAddDecimalsAmm(new WrappedToken(addDecimals));\n  });\n}\n\nexport class WrappedToken {\n  multiplier: JSBI;\n\n  constructor(public addDecimals: AddDecimals) {\n    this.multiplier = JSBI.BigInt(10 ** (this.addDecimals.decimals - this.addDecimals.underlyingDecimals));\n  }\n\n  getOutputAmount(inputAmount: JSBI, inputMint: PublicKey): JSBI {\n    if (this.addDecimals.mint.equals(inputMint)) {\n      // withdraw, so divide\n      return this.calculateWithdrawOutputAmount(inputAmount);\n    } else if (this.addDecimals.underlying.equals(inputMint)) {\n      // deposit, so multiply\n      return this.calculateDepositOutputAmount(inputAmount);\n    }\n    throw new Error(`unknown input token: ${inputMint.toString()}`);\n  }\n\n  private calculateDepositOutputAmount(inputAmount: JSBI) {\n    return JSBI.multiply(inputAmount, this.multiplier);\n  }\n\n  private calculateWithdrawOutputAmount(inputAmount: JSBI) {\n    return JSBI.divide(inputAmount, this.multiplier);\n  }\n}\n\n// This isn't technically an Amm but this the smoothest solution to allow its usage without a major refactor of the abstractions for now\nexport class SaberAddDecimalsAmm implements Amm {\n  id: string;\n  label = 'Saber (Decimals)' as const;\n  shouldPrefetch = false;\n  exactOutputSupported = false;\n\n  constructor(public wrappedToken: WrappedToken) {\n    this.id = this.wrappedToken.addDecimals.wrapper.toBase58();\n  }\n\n  getAccountsForUpdate() {\n    return new Array<PublicKey>();\n  }\n\n  update(_accountInfoMap: AccountInfoMap) {}\n\n  getQuote({ sourceMint, amount }: QuoteParams) {\n    const outAmount = this.wrappedToken.getOutputAmount(amount, sourceMint);\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount,\n      feeAmount: ZERO,\n      feeMint: sourceMint.toBase58(),\n      feePct: 0,\n      priceImpactPct: 0,\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams) {\n    if (this.wrappedToken.addDecimals.underlying.equals(swapParams.sourceMint)) {\n      return [\n        createSaberAddDecimalsDepositInstruction({\n          addDecimals: this.wrappedToken.addDecimals,\n          ...swapParams,\n          inAmount: swapParams.amount,\n          minimumOutAmount: swapParams.otherAmountThreshold,\n        }),\n      ];\n    } else {\n      return [\n        createSaberAddDecimalsWithdrawInstruction({\n          addDecimals: this.wrappedToken.addDecimals,\n          ...swapParams,\n          inAmount: swapParams.amount,\n          minimumOutAmount: swapParams.otherAmountThreshold,\n        }),\n      ];\n    }\n  }\n\n  get reserveTokenMints() {\n    return [this.wrappedToken.addDecimals.underlying, this.wrappedToken.addDecimals.mint];\n  }\n}\n","export function getTwoPermutations<T>(array: T[]) {\n  return array.reduce((acc, item) => {\n    array.forEach((otherItem) => {\n      if (item !== otherItem) {\n        acc.push([item, otherItem]);\n      }\n    });\n    return acc;\n  }, new Array<T[]>());\n}\n","export function chunks<T>(array: T[], size: number): T[][] {\n  return Array.apply<number, T[], T[][]>(0, new Array(Math.ceil(array.length / size))).map((_, index) =>\n    array.slice(index * size, (index + 1) * size),\n  );\n}\n","import { AccountInfo, Connection, PublicKey } from '@solana/web3.js';\nimport { chunks } from './chunks';\n\ninterface Result {\n  jsonrpc: string;\n  result: {\n    context: { slot: number };\n    value: (AccountInfo<string[]> | null)[];\n  };\n}\n\nexport async function chunkedGetMultipleAccountInfos(\n  connection: Connection,\n  pks: string[],\n  batchChunkSize: number = 1000,\n  maxAccountsChunkSize: number = 100,\n): Promise<Array<AccountInfo<Buffer> | null>> {\n  return (\n    await Promise.all(\n      chunks(pks, batchChunkSize).map(async (batchPubkeys) => {\n        const batch = chunks(batchPubkeys, maxAccountsChunkSize).map((pubkeys) => ({\n          methodName: 'getMultipleAccounts',\n          args: connection._buildArgs([pubkeys], connection.commitment, 'base64'),\n        }));\n\n        return (\n          // getMultipleAccounts is quite slow, so we use fetch directly\n          connection\n            // @ts-ignore\n            ._rpcBatchRequest(batch)\n            .then((batchResults: Result[]) => {\n              const accounts = batchResults.reduce((acc, res) => {\n                res.result.value.forEach((item) => {\n                  if (item) {\n                    const value = item as unknown as AccountInfo<Buffer>;\n                    value.data = Buffer.from(item.data[0], item.data[1] as 'base64');\n                    value.owner = new PublicKey(item.owner);\n                    acc.push(value);\n                  } else {\n                    acc.push(null);\n                  }\n                });\n                return acc;\n              }, [] as (AccountInfo<Buffer> | null)[]);\n\n              return accounts;\n            })\n            .catch((e: any) => {\n              console.error('Failed to fetch account infos', e);\n              return batchPubkeys.map(() => null);\n            })\n        );\n      }),\n    )\n  ).flat();\n}\n","import { AccountInfo, Connection, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { PlatformFee, QuoteMintToReferrer, TokenMintAddress } from '..';\nimport { AccountInfo as TokenAccountInfo } from '@solana/spl-token';\nimport JSBI from 'jsbi';\nimport { chunkedGetMultipleAccountInfos } from '../utils/chunkedGetMultipleAccountInfos';\nimport type BN from 'bn.js';\n\nexport enum SwapMode {\n  ExactIn = 'ExactIn',\n  ExactOut = 'ExactOut',\n}\n\nexport interface QuoteParams {\n  sourceMint: PublicKey;\n  destinationMint: PublicKey;\n  amount: JSBI;\n  swapMode: SwapMode;\n}\n\nexport interface Quote {\n  notEnoughLiquidity: boolean;\n  minInAmount?: JSBI;\n  minOutAmount?: JSBI;\n  inAmount: JSBI;\n  outAmount: JSBI;\n  feeAmount: JSBI;\n  feeMint: TokenMintAddress;\n  feePct: number;\n  priceImpactPct: number;\n}\n\nexport interface SwapParams {\n  sourceMint: PublicKey;\n  destinationMint: PublicKey;\n  userSourceTokenAccount: PublicKey;\n  userDestinationTokenAccount: PublicKey;\n  userTransferAuthority: PublicKey;\n  /**\n   * amount is used for instruction and can be null when it is an intermediate swap, only the first swap has an amount\n   */\n  amount: BN | null;\n  /**\n   * inAmount is the calculated amount and is not recomended to be used for constructing instruction.\n   */\n  inAmount: JSBI;\n  otherAmountThreshold: BN;\n  swapMode: SwapMode;\n  tokenLedger: PublicKey;\n  openOrdersAddress?: PublicKey;\n  platformFee?: PlatformFee;\n  quoteMintToReferrer?: QuoteMintToReferrer;\n}\n\nexport type AccountInfoMap = Map<string, AccountInfo<Buffer> | null>;\n\nexport interface Amm {\n  /* Label for UI usage */\n  label: string;\n  /* Unique id to recognize the AMM */\n  id: string;\n  /* Reserve token mints for the purpose of routing */\n  reserveTokenMints: PublicKey[];\n  /* State if we need to prefetch the accounts 1 time */\n  shouldPrefetch: boolean;\n  /* Exact output swap mode is supported */\n  exactOutputSupported: boolean;\n\n  getAccountsForUpdate(): PublicKey[];\n  update(accountInfoMap: AccountInfoMap): void;\n  getQuote(quoteParams: QuoteParams): Quote;\n  createSwapInstructions(swapParams: SwapParams): TransactionInstruction[];\n}\n\nexport const mapAddressToAccountInfos = (accountInfoMap: AccountInfoMap, addresses: PublicKey[]) => {\n  const accountInfos = addresses.map((address) => {\n    const accountInfo = accountInfoMap.get(address.toString());\n    if (!accountInfo) {\n      throw new Error(`Account info ${address.toBase58()} missing`);\n    }\n    return accountInfo;\n  });\n\n  return accountInfos;\n};\n\nexport const tokenAccountsToJSBIs = (tokenAccounts: TokenAccountInfo[]): JSBI[] => {\n  return tokenAccounts.map((tokenAccount) => {\n    return JSBI.BigInt(tokenAccount.amount);\n  });\n};\n\nexport const prefetchAmms = async (amms: Amm[], connection: Connection) => {\n  const accounts = amms.map((amm) => amm.getAccountsForUpdate().map((item) => item.toBase58())).flat();\n  const accountInfosMap = new Map<string, AccountInfo<Buffer>>();\n  const accountInfos = await chunkedGetMultipleAccountInfos(connection, accounts);\n\n  accountInfos.forEach((item, index) => {\n    const publicKey = accounts[index];\n    if (item) {\n      accountInfosMap.set(publicKey, item);\n    }\n  });\n\n  for (let amm of amms) {\n    amm.update(accountInfosMap);\n  }\n};\n","// Only a few hardcoded pools for now, until we query the whole lot through api\nimport { struct, nu64 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/spl-token';\nimport { PublicKey } from '@solana/web3.js';\nimport { publicKey, uint128, uint64 } from '../../utils/layout';\n\ninterface AmmInfoLayoutV4 {\n  status: number;\n  nonce: number;\n  orderNum: number;\n  depth: number;\n  coinDecimals: number;\n  pcDecimals: number;\n  state: number;\n  resetFlag: number;\n  minSize: number;\n  volMaxCutRatio: number;\n  amountWaveRatio: number;\n  coinLotSize: number;\n  pcLotSize: number;\n  minPriceMultiplier: number;\n  maxPriceMultiplier: number;\n  systemDecimalsValue: number;\n  minSeparateNumerator: number;\n  minSeparateDenominator: number;\n  tradeFeeNumerator: number;\n  tradeFeeDenominator: number;\n  pnlNumerator: number;\n  pnlDenominator: number;\n  swapFeeNumerator: u64;\n  swapFeeDenominator: u64;\n  needTakePnlCoin: number;\n  needTakePnlPc: number;\n  totalPnlPc: number;\n  totalPnlCoin: number;\n  poolTotalDepositPc: u64;\n  poolTotalDepositCoin: u64;\n  swapCoinInAmount: u64;\n  swapPcOutAmount: u64;\n  swapCoin2PcFee: number;\n  swapPcInAmount: u64;\n  swapCoinOutAmount: u64;\n  swapPc2CoinFee: number;\n  poolCoinTokenAccount: PublicKey;\n  poolPcTokenAccount: PublicKey;\n  coinMintAddress: PublicKey;\n  pcMintAddress: PublicKey;\n  lpMintAddress: PublicKey;\n  ammOpenOrders: PublicKey;\n  serumMarket: PublicKey;\n  serumProgramId: PublicKey;\n  ammTargetOrders: PublicKey;\n  poolWithdrawQueue: PublicKey;\n  poolTempLpTokenAccount: PublicKey;\n  ammOwner: PublicKey;\n  pnlOwner: PublicKey;\n}\n\nexport const AMM_INFO_LAYOUT_V4 = struct<AmmInfoLayoutV4>([\n  nu64('status'),\n  nu64('nonce'),\n  nu64('orderNum'),\n  nu64('depth'),\n  nu64('coinDecimals'),\n  nu64('pcDecimals'),\n  nu64('state'),\n  nu64('resetFlag'),\n  nu64('minSize'),\n  nu64('volMaxCutRatio'),\n  nu64('amountWaveRatio'),\n  nu64('coinLotSize'),\n  nu64('pcLotSize'),\n  nu64('minPriceMultiplier'),\n  nu64('maxPriceMultiplier'),\n  nu64('systemDecimalsValue'),\n  // Fees\n  nu64('minSeparateNumerator'),\n  nu64('minSeparateDenominator'),\n  nu64('tradeFeeNumerator'),\n  nu64('tradeFeeDenominator'),\n  nu64('pnlNumerator'),\n  nu64('pnlDenominator'),\n  nu64('swapFeeNumerator'),\n  nu64('swapFeeDenominator'),\n  // OutPutData\n  nu64('needTakePnlCoin'),\n  nu64('needTakePnlPc'),\n  nu64('totalPnlPc'),\n  nu64('totalPnlCoin'),\n  uint128('poolTotalDepositPc'),\n  uint128('poolTotalDepositCoin'),\n  uint128('swapCoinInAmount'),\n  uint128('swapPcOutAmount'),\n  nu64('swapCoin2PcFee'),\n  uint128('swapPcInAmount'),\n  uint128('swapCoinOutAmount'),\n  nu64('swapPc2CoinFee'),\n\n  publicKey('poolCoinTokenAccount'),\n  publicKey('poolPcTokenAccount'),\n  publicKey('coinMintAddress'),\n  publicKey('pcMintAddress'),\n  publicKey('lpMintAddress'),\n  publicKey('ammOpenOrders'),\n  publicKey('serumMarket'),\n  publicKey('serumProgramId'),\n  publicKey('ammTargetOrders'),\n  publicKey('poolWithdrawQueue'),\n  publicKey('poolTempLpTokenAccount'),\n  publicKey('ammOwner'),\n  publicKey('pnlOwner'),\n]);\n","// https://github.com/raydium-io/raydium-ui/blob/4048286f79fc4b71c3ffbfd9095470ab0c7d3862/src/utils/liquidity.ts#L30-L82\n\nimport { Fraction, TokenSwapConstantProduct, ZERO_FRACTION } from '@jup-ag/math';\nimport { Market, OpenOrders } from '@project-serum/serum';\nimport { u64 } from '@solana/spl-token';\nimport { AccountInfo, PublicKey } from '@solana/web3.js';\nimport Decimal from 'decimal.js';\nimport JSBI from 'jsbi';\nimport { createProgramAddressSyncUnsafe } from '../../utils/pda';\nimport { AccountInfoMap, Amm, mapAddressToAccountInfos, Quote, QuoteParams, SwapParams } from '../amm';\nimport { createRaydiumSwapInstruction } from '../jupiterInstruction';\nimport { AMM_INFO_LAYOUT_V4 } from './pools';\n\n// Explained here\n// https://discordapp.com/channels/813741812598439958/813750197423308820/900288485028683776\n// total_pc = amminfo.pc_vault.balance + amminfo.openorder.total_quote - amminfo.need_taken_pnl_pc\n// total_coin = amminfo.coin_vault.balance + amminfo.openorder.total_base - amminfo.need_taken_pnl_coin\n\ntype SerumMarketKeys = {\n  serumBids: PublicKey;\n  serumAsks: PublicKey;\n  serumEventQueue: PublicKey;\n  serumCoinVaultAccount: PublicKey;\n  serumPcVaultAccount: PublicKey;\n  serumVaultSigner: PublicKey;\n};\n\ntype SerumMarketKeysString = Record<keyof SerumMarketKeys, string>;\nexport class RaydiumAmm implements Amm {\n  id: string;\n  label = 'Raydium' as const;\n  shouldPrefetch = false;\n  exactOutputSupported = false;\n\n  coinMint: PublicKey;\n  pcMint: PublicKey;\n\n  status: number;\n  serumProgramId: PublicKey;\n  serumMarket: PublicKey;\n  ammOpenOrders: PublicKey;\n  ammTargetOrders: PublicKey;\n  poolCoinTokenAccount: PublicKey;\n  poolPcTokenAccount: PublicKey;\n\n  serumMarketKeys: SerumMarketKeys;\n\n  coinReserve: u64 | undefined;\n  pcReserve: u64 | undefined;\n\n  private feePct: Decimal;\n  private calculator: TokenSwapConstantProduct;\n\n  constructor(public ammId: PublicKey, ammAccountInfo: AccountInfo<Buffer>, params: SerumMarketKeysString) {\n    this.id = ammId.toBase58();\n    const decoded = AMM_INFO_LAYOUT_V4.decode(ammAccountInfo.data);\n\n    this.status = decoded.status;\n    this.coinMint = new PublicKey(decoded.coinMintAddress);\n    this.pcMint = new PublicKey(decoded.pcMintAddress);\n\n    this.poolCoinTokenAccount = new PublicKey(decoded.poolCoinTokenAccount);\n    this.poolPcTokenAccount = new PublicKey(decoded.poolPcTokenAccount);\n\n    this.serumProgramId = new PublicKey(decoded.serumProgramId);\n    this.serumMarket = new PublicKey(decoded.serumMarket);\n    this.ammOpenOrders = new PublicKey(decoded.ammOpenOrders);\n    this.ammTargetOrders = new PublicKey(decoded.ammTargetOrders);\n\n    this.serumMarketKeys = (Object.keys(params) as Array<keyof SerumMarketKeysString>).reduce((acc, item) => {\n      const pk = params[item];\n      if (!pk) throw new Error(`Could not find ${item} in params`);\n      acc[item] = new PublicKey(params[item]);\n      return acc;\n    }, {} as SerumMarketKeys);\n\n    const swapFeeNumerator = decoded.swapFeeNumerator;\n    const swapFeeDenominator = decoded.swapFeeDenominator;\n\n    this.feePct = new Decimal(swapFeeNumerator.toString()).div(swapFeeDenominator.toString());\n\n    this.calculator = new TokenSwapConstantProduct(\n      new Fraction(JSBI.BigInt(swapFeeNumerator), JSBI.BigInt(swapFeeDenominator)),\n      ZERO_FRACTION,\n    );\n  }\n\n  static decodeSerumMarketKeysString(\n    serumProgramId: PublicKey,\n    serumMarket: PublicKey,\n    serumMarketInfo: AccountInfo<Buffer>,\n  ): SerumMarketKeysString {\n    const decodedMarket = Market.getLayout(serumProgramId).decode(serumMarketInfo.data);\n    const serumVaultSigner = createProgramAddressSyncUnsafe(\n      [serumMarket.toBuffer(), decodedMarket.vaultSignerNonce.toArrayLike(Buffer, 'le', 8)],\n      serumProgramId,\n    );\n\n    return {\n      serumBids: decodedMarket.bids.toBase58(),\n      serumAsks: decodedMarket.asks.toBase58(),\n      serumEventQueue: decodedMarket.eventQueue.toBase58(),\n      serumCoinVaultAccount: decodedMarket.baseVault.toBase58(),\n      serumPcVaultAccount: decodedMarket.quoteVault.toBase58(),\n      serumVaultSigner: serumVaultSigner.toBase58(),\n    };\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [this.ammId, this.poolCoinTokenAccount, this.poolPcTokenAccount, this.ammOpenOrders];\n  }\n\n  update(accountInfoMap: AccountInfoMap) {\n    const [ammAccountInfo, poolCoinTokenAccountInfo, poolPcTokenAccountInfo, ammOpenOrdersAccountInfo] =\n      mapAddressToAccountInfos(accountInfoMap, this.getAccountsForUpdate());\n\n    const [coinAmount, pcAmount] = [\n      RaydiumAmm.tokenAmountAccessor(poolCoinTokenAccountInfo),\n      RaydiumAmm.tokenAmountAccessor(poolPcTokenAccountInfo),\n    ];\n\n    const openOrders = OpenOrders.fromAccountInfo(\n      this.ammOpenOrders,\n      ammOpenOrdersAccountInfo,\n      ammOpenOrdersAccountInfo.owner,\n    );\n\n    const decoded = AMM_INFO_LAYOUT_V4.decode(ammAccountInfo.data);\n\n    this.coinReserve = coinAmount.add(openOrders.baseTokenTotal).sub(new u64(String(decoded.needTakePnlCoin)));\n\n    this.pcReserve = pcAmount.add(openOrders.quoteTokenTotal).sub(new u64(String(decoded.needTakePnlPc)));\n  }\n\n  private static tokenAmountAccessor(tokenAccountInfo: AccountInfo<Buffer>): u64 {\n    return u64.fromBuffer(tokenAccountInfo.data.slice(64, 64 + 8));\n  }\n\n  getQuote({ sourceMint, amount }: QuoteParams): Quote {\n    const { coinReserve, pcReserve } = this;\n    if (!coinReserve || !pcReserve) {\n      throw new Error('Pool token accounts balances not refreshed or empty');\n    }\n\n    const outputIndex = this.coinMint.equals(sourceMint) ? 1 : 0;\n    const result = this.calculator.exchange([JSBI.BigInt(coinReserve), JSBI.BigInt(pcReserve)], amount, outputIndex);\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: result.expectedOutputAmount,\n      feeAmount: result.fees,\n      feeMint: sourceMint.toBase58(),\n      feePct: this.feePct.toNumber(),\n      priceImpactPct: result.priceImpact.toNumber(),\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams) {\n    return [\n      createRaydiumSwapInstruction({\n        raydiumAmm: this,\n        ...swapParams,\n        inAmount: swapParams.amount,\n        minimumOutAmount: swapParams.otherAmountThreshold,\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.coinMint, this.pcMint];\n  }\n}\n","import { ZERO } from '@jup-ag/math';\nimport { Market, Orderbook } from '@project-serum/serum';\nimport { PublicKey } from '@solana/web3.js';\nimport BN from 'bn.js';\nimport Decimal from 'decimal.js';\nimport JSBI from 'jsbi';\n\nconst TAKER_FEE_PCT = 0.0004;\nconst STABLE_TAKER_FEE_PCT = 0.0001;\n\n// Stable markets are hardcoded in the program\nconst STABLE_MARKET_ADDRESSES = [\n  '77quYg4MGneUdjgXCunt9GgM1usmrxKY31twEy3WHwcS', // USDT/USDC\n  '5cLrMai1DsLRYc1Nio9qMTicsWtvzjzZfJPXyAoF4t1Z', // mSOL/SOL\n  'EERNEEnBqdGzBS8dd46wwNY5F2kwnaCQ3vsq2fNKGogZ', // UST/USDC\n  '8sFf9TW3KzxLiBXcDcjAxqabEsRroo4EiRr3UG1xbJ9m', // UST/USDT\n  '2iDSTGhjJEiRxNaLF27CY6daMYPs5hgYrP2REHd5YD62', // stSOL/SOL\n];\n\ninterface IMarketMeta {\n  /** buy or sell side */\n  side: 'buy' | 'sell';\n  /** indicate that your order is too huge for the market */\n  notEnoughLiquidity: boolean;\n  /** minimum in amount and the corresponding out amount */\n  minimum: {\n    in: JSBI;\n    out: JSBI;\n  };\n  /** amount in taken for the trade */\n  inAmount: JSBI;\n  /** the amount out for the trade */\n  outAmount: JSBI;\n  /** the total fee amount */\n  feeAmount: JSBI;\n  /** price impact percentage */\n  priceImpactPct: number;\n  /** fee percentage */\n  feePct: number;\n}\n\n// Provides swap like out amount, with slippage and corresponding minimum amount out\nexport function getOutAmountMeta({\n  market,\n  asks,\n  bids,\n  fromAmount,\n  fromMint,\n  toMint,\n}: {\n  market: Market;\n  asks: Orderbook;\n  bids: Orderbook;\n  fromMint: PublicKey;\n  toMint: PublicKey;\n  fromAmount: JSBI;\n}) {\n  const takerFeePct = STABLE_MARKET_ADDRESSES.includes(market.address.toBase58())\n    ? STABLE_TAKER_FEE_PCT\n    : TAKER_FEE_PCT;\n\n  if (fromMint.equals(market.quoteMintAddress) && toMint.equals(market.baseMintAddress)) {\n    // buy\n    return forecastBuy(market, asks, fromAmount, takerFeePct);\n  } else {\n    return forecastSell(market, bids, fromAmount, takerFeePct);\n  }\n}\n\nexport function forecastBuy(market: Market, orderbook: Orderbook, pcIn: JSBI, takerFeePct: number): IMarketMeta {\n  let coinOut = ZERO;\n  let bestPrice: JSBI = ZERO;\n  let worstPrice: JSBI = ZERO;\n  // total base price\n  let totalCost = ZERO;\n  let totalCoins = ZERO;\n\n  // might be decimal, e.g: 0.001\n  const quoteSizeLots = market.quoteSizeLotsToNumber(new BN(1));\n\n  // Serum buy order take fee in quote tokens\n  let availablePc = quoteSizeLots\n    ? JSBI.BigInt(\n        new Decimal(pcIn.toString())\n          .div(1 + takerFeePct)\n          .div(quoteSizeLots)\n          .floor(),\n      )\n    : ZERO;\n  const baseSizeLots = JSBI.BigInt(market.baseSizeLotsToNumber(new BN(1)).toString());\n\n  for (let [lotPrice, lotQuantity] of getL2(orderbook)) {\n    if (JSBI.equal(bestPrice, ZERO)) {\n      bestPrice = lotPrice;\n    }\n\n    worstPrice = lotPrice;\n\n    const orderCoinAmount = JSBI.multiply(lotQuantity, baseSizeLots);\n    const orderPcAmount = JSBI.multiply(lotQuantity, lotPrice);\n\n    totalCoins = JSBI.add(totalCoins, orderCoinAmount);\n\n    if (JSBI.greaterThanOrEqual(orderPcAmount, availablePc)) {\n      const numberLotsPurchasable = JSBI.divide(availablePc, lotPrice);\n\n      totalCost = JSBI.add(totalCost, JSBI.multiply(lotPrice, numberLotsPurchasable));\n      coinOut = JSBI.add(coinOut, JSBI.multiply(baseSizeLots, numberLotsPurchasable));\n      availablePc = ZERO;\n      break;\n    } else {\n      totalCost = JSBI.add(totalCost, JSBI.multiply(lotPrice, lotQuantity));\n      coinOut = JSBI.add(coinOut, orderCoinAmount);\n      availablePc = JSBI.subtract(availablePc, orderPcAmount);\n    }\n  }\n\n  const bestPriceDecimal = new Decimal(bestPrice.toString());\n  const worstPriceDecimal = new Decimal(worstPrice.toString());\n\n  const priceImpactPct = worstPriceDecimal.sub(bestPriceDecimal).div(bestPriceDecimal).toNumber();\n\n  const bestPriceSizeLots = priceLotsToDecimal(market, new BN(bestPrice.toString()));\n  const totalCostSizeLots = priceLotsToDecimal(market, new BN(totalCost.toString()));\n  const inAmountWithoutFee = totalCostSizeLots.mul(baseSizeLots.toString()).ceil();\n  const fee = totalCostSizeLots.mul(baseSizeLots.toString()).mul(takerFeePct).ceil();\n\n  return {\n    side: 'buy',\n    notEnoughLiquidity: JSBI.lessThanOrEqual(totalCoins, coinOut),\n    minimum: {\n      in: JSBI.BigInt(\n        bestPriceSizeLots\n          .mul(baseSizeLots.toString())\n          .mul(1 + takerFeePct)\n          .ceil(),\n      ),\n      out: baseSizeLots,\n    },\n    inAmount: JSBI.BigInt(inAmountWithoutFee.add(fee)),\n    outAmount: coinOut,\n    feeAmount: JSBI.BigInt(fee),\n    priceImpactPct,\n    feePct: takerFeePct,\n  };\n}\n\nexport function forecastSell(market: Market, orderbook: Orderbook, coinIn: JSBI, takerFeePct: number): IMarketMeta {\n  let pcOut = JSBI.BigInt(0);\n  let bestPrice = JSBI.BigInt(0);\n  let worstPrice = JSBI.BigInt(0);\n  let totalCoin = JSBI.BigInt(0);\n  let availableCoin = coinIn;\n  let inAmount = JSBI.BigInt(0);\n\n  const baseSizeLots = JSBI.BigInt(market.baseSizeLotsToNumber(new BN(1)));\n  const quoteSizeLots = JSBI.BigInt(market.quoteSizeLotsToNumber(new BN(1)));\n\n  for (const [lotPrice, lotQuantity] of getL2(orderbook)) {\n    if (JSBI.equal(bestPrice, ZERO)) {\n      bestPrice = lotPrice;\n    }\n\n    worstPrice = lotPrice;\n\n    const orderCoinAmount = JSBI.multiply(baseSizeLots, lotQuantity);\n    const orderPcAmount = JSBI.multiply(lotQuantity, JSBI.multiply(lotPrice, quoteSizeLots));\n    totalCoin = JSBI.add(totalCoin, orderCoinAmount);\n\n    if (JSBI.greaterThanOrEqual(orderCoinAmount, availableCoin)) {\n      const numberLotsCanSell = JSBI.divide(availableCoin, baseSizeLots);\n      const totalCoinAmountToSell = JSBI.multiply(numberLotsCanSell, lotPrice);\n      pcOut = JSBI.add(pcOut, JSBI.multiply(totalCoinAmountToSell, quoteSizeLots));\n      availableCoin = JSBI.subtract(availableCoin, totalCoinAmountToSell);\n      inAmount = JSBI.add(inAmount, JSBI.multiply(numberLotsCanSell, baseSizeLots));\n      break;\n    } else {\n      pcOut = JSBI.add(pcOut, orderPcAmount);\n      availableCoin = JSBI.subtract(availableCoin, orderCoinAmount);\n      inAmount = JSBI.add(inAmount, orderCoinAmount);\n    }\n  }\n\n  let pcOutAfterFee = new Decimal(pcOut.toString()).mul(1 - takerFeePct).floor();\n\n  const bestPriceDecimal = priceLotsToDecimal(market, new BN(bestPrice.toString()));\n  const worstPriceDecimal = priceLotsToDecimal(market, new BN(worstPrice.toString()));\n\n  const priceImpactPct = bestPriceDecimal.minus(worstPriceDecimal).div(bestPriceDecimal).toNumber();\n\n  return {\n    side: 'sell',\n    notEnoughLiquidity: JSBI.greaterThan(JSBI.BigInt(coinIn), totalCoin),\n    minimum: {\n      in: baseSizeLots,\n      out: JSBI.BigInt(\n        bestPriceDecimal\n          .mul(JSBI.toNumber(baseSizeLots))\n          .mul(1 - takerFeePct)\n          .floor()\n          .toString(),\n      ),\n    },\n    inAmount: inAmount,\n    outAmount: JSBI.BigInt(pcOutAfterFee),\n    feeAmount: JSBI.BigInt(new Decimal(pcOut.toString()).mul(takerFeePct).round()),\n    priceImpactPct,\n    feePct: takerFeePct,\n  };\n}\n\nexport function* getL2(orderbook: Orderbook): Generator<[JSBI, JSBI]> {\n  const descending = orderbook.isBids;\n  for (const { key, quantity } of orderbook.slab.items(descending)) {\n    const price = JSBI.BigInt(key.ushrn(64).toString());\n    yield [price, JSBI.BigInt(quantity.toString())];\n  }\n}\n\nfunction divideBnToDecimal(numerator: BN, denominator: BN): Decimal {\n  const quotient = new Decimal(numerator.div(denominator).toString());\n  const rem = numerator.umod(denominator);\n  const gcd = rem.gcd(denominator);\n  return quotient.add(new Decimal(rem.div(gcd).toString()).div(new Decimal(denominator.div(gcd).toString())));\n}\n\nfunction priceLotsToDecimal(market: Market, price: BN) {\n  // @ts-expect-error _decoded\n  const baseLotSize = market._decoded.baseLotSize;\n  if (baseLotSize.isZero()) return new Decimal(0);\n\n  return divideBnToDecimal(\n    // @ts-expect-error _decoded _baseSplTokenMultiplier is private\n    price.mul(market._decoded.quoteLotSize).mul(market._baseSplTokenMultiplier),\n    // @ts-expect-error _quoteSplTokenMultiplier is private\n    baseLotSize.mul(market._quoteSplTokenMultiplier),\n  );\n}\n","import { Orderbook } from '@project-serum/serum';\nimport { PublicKey } from '@solana/web3.js';\nimport { AccountInfoMap, Amm, mapAddressToAccountInfos, Quote, QuoteParams, SwapParams } from '../amm';\nimport { createSerumSwapInstruction } from '../jupiterInstruction';\nimport { SerumMarket } from '../market';\nimport { getL2, getOutAmountMeta } from './market';\n\nexport class SerumAmm implements Amm {\n  id: string;\n  label = 'Serum' as const;\n  shouldPrefetch = false;\n  exactOutputSupported = false;\n\n  private _orderbooks: { asks: Orderbook; bids: Orderbook } | undefined;\n\n  constructor(public market: SerumMarket) {\n    this.id = market.address.toBase58();\n  }\n\n  get orderbooks() {\n    return this._orderbooks;\n  }\n\n  static getL2 = getL2;\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [this.market.asksAddress, this.market.bidsAddress];\n  }\n\n  update(accountInfoMap: AccountInfoMap): void {\n    const [asksAccountInfo, bidsAccountInfo] = mapAddressToAccountInfos(accountInfoMap, this.getAccountsForUpdate());\n\n    const asks = Orderbook.decode(this.market, asksAccountInfo.data);\n    const bids = Orderbook.decode(this.market, bidsAccountInfo.data);\n\n    this._orderbooks = {\n      asks,\n      bids,\n    };\n  }\n\n  getQuote({ sourceMint, destinationMint, amount }: QuoteParams): Quote {\n    if (!this.orderbooks) {\n      throw new Error('Failed to find orderbooks');\n    }\n\n    const outAmountMeta = getOutAmountMeta({\n      market: this.market,\n      asks: this.orderbooks.asks,\n      bids: this.orderbooks.bids,\n      fromMint: sourceMint,\n      toMint: destinationMint,\n      fromAmount: amount,\n    });\n\n    return {\n      notEnoughLiquidity: outAmountMeta.notEnoughLiquidity,\n      minInAmount: outAmountMeta.minimum.in,\n      minOutAmount: outAmountMeta.minimum.out,\n      inAmount: outAmountMeta.inAmount,\n      outAmount: outAmountMeta.outAmount,\n      feeAmount: outAmountMeta.feeAmount,\n      feeMint: this.market.quoteMintAddress.toBase58(),\n      feePct: outAmountMeta.feePct,\n      priceImpactPct: outAmountMeta.priceImpactPct,\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams) {\n    if (!swapParams.openOrdersAddress) {\n      throw new Error('Missing open orders');\n    }\n\n    return [\n      createSerumSwapInstruction({\n        market: this.market,\n        openOrdersAddress: swapParams.openOrdersAddress,\n        referrer: swapParams?.quoteMintToReferrer?.get(this.market.quoteMintAddress.toBase58()),\n        ...swapParams,\n        inAmount: swapParams.amount,\n        minimumOutAmount: swapParams.otherAmountThreshold,\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.market.baseMintAddress, this.market.quoteMintAddress];\n  }\n}\n","import { PublicKey } from '@solana/web3.js';\nimport { getTwoPermutations } from '../../utils/getTwoPermutations';\nimport { AccountInfoMap, Amm, Quote, QuoteParams, SwapParams } from '../amm';\nimport { RaydiumAmm } from '../raydium/raydiumAmm';\nimport { createRiskCheckAndFeeInstruction } from '../jupiterInstruction';\nimport { SerumAmm } from '../serum/serumAmm';\nimport { SerumMarket } from '../market';\nimport JSBI from 'jsbi';\nimport { ZERO } from '@jup-ag/math';\nimport { BN } from 'bn.js';\n\ninterface SplitSolution {\n  outAmount: JSBI;\n  portion: number;\n  firstQuote: Quote | undefined;\n  secondQuote: Quote | undefined;\n}\n\nfunction isSplitSupported(firstAmm: Amm, secondAmm: Amm) {\n  if (\n    (firstAmm instanceof SerumAmm && secondAmm instanceof RaydiumAmm) ||\n    (firstAmm instanceof RaydiumAmm && secondAmm instanceof SerumAmm) ||\n    (firstAmm instanceof SerumAmm && secondAmm instanceof SerumAmm)\n  ) {\n    return false;\n  }\n  return true;\n}\n\nconst HUNDRED = JSBI.BigInt(100);\n\n// Create an iteration to quote with a stepped split\nexport class SplitTradeAmm implements Amm {\n  market: SerumMarket | null;\n  shouldPrefetch = false;\n  exactOutputSupported = false;\n  private portion1: number = 0;\n  private portion2: number = 0;\n\n  constructor(public firstAmm: Amm, public secondAmm: Amm, public reserveTokenMints: PublicKey[]) {\n    this.market =\n      firstAmm instanceof SerumAmm ? firstAmm.market : secondAmm instanceof SerumAmm ? secondAmm.market : null;\n  }\n\n  static getAmmIdsFromSplitTradeAmmId(id: string): string[] {\n    const ammIds = id.split('-');\n\n    return ammIds.length > 1 ? ammIds : [];\n  }\n\n  static create(firstAmm: Amm, secondAmm: Amm) {\n    if (!isSplitSupported(firstAmm, secondAmm)) return;\n\n    const firstAmmTwoPermutations = getTwoPermutations(firstAmm.reserveTokenMints);\n    const secondAmmTwoPermutations = getTwoPermutations(secondAmm.reserveTokenMints);\n\n    for (const firstAmmTwoPermutation of firstAmmTwoPermutations) {\n      for (const secondAmmTwoPermutation of secondAmmTwoPermutations) {\n        if (firstAmmTwoPermutation.every((value, index) => value.equals(secondAmmTwoPermutation[index]))) {\n          return new SplitTradeAmm(firstAmm, secondAmm, firstAmmTwoPermutation);\n        }\n      }\n    }\n  }\n\n  setPortions(portion1: number, portion2: number) {\n    if (portion1 + portion2 !== 100) {\n      throw new Error('Split trade portions must sum to 100');\n    }\n\n    this.portion1 = portion1;\n    this.portion2 = portion2;\n  }\n\n  get id() {\n    return `${this.firstAmm.id}-${this.secondAmm.id}`;\n  }\n\n  get label() {\n    const labelWithPortions = [\n      { label: this.firstAmm.label, portion: this.portion1 },\n      { label: this.secondAmm.label, portion: this.portion2 },\n    ].sort((a, b) => b.portion - a.portion);\n\n    return labelWithPortions.map(({ label, portion }) => `${label} (${portion}%)`).join(' + ');\n  }\n\n  getAccountsForUpdate() {\n    return [];\n  }\n\n  update(_accountInfoMap: AccountInfoMap) {\n    // Underlying amms are updated\n  }\n\n  getQuote(quoteParams: QuoteParams): Quote {\n    const sourceMintString = quoteParams.sourceMint.toBase58();\n    const amount = quoteParams.amount;\n    // Portion in % directly to please the UI\n    let bestSolution: SplitSolution = {\n      outAmount: ZERO,\n      portion: 0,\n      firstQuote: undefined,\n      secondQuote: undefined,\n    };\n\n    // Increase portion until 100\n    for (let p = 100; (p -= 5); p > 0) {\n      const firstAmount = JSBI.divide(JSBI.multiply(amount, JSBI.BigInt(p)), HUNDRED);\n      const secondAmount = JSBI.subtract(amount, firstAmount);\n\n      const firstQuote = this.firstAmm.getQuote({\n        ...quoteParams,\n        amount: firstAmount,\n      });\n      const secondQuote = this.secondAmm.getQuote({\n        ...quoteParams,\n        amount: secondAmount,\n      });\n      const outAmount = JSBI.add(firstQuote.outAmount, secondQuote.outAmount);\n\n      if (JSBI.lessThan(outAmount, bestSolution.outAmount)) {\n        break;\n      }\n\n      bestSolution = {\n        outAmount,\n        portion: p,\n        firstQuote,\n        secondQuote,\n      };\n    }\n\n    if (!bestSolution.firstQuote || !bestSolution.secondQuote) {\n      throw new Error('Unreachable: There was no better solution than getting 0 outAmount');\n    }\n\n    const { outAmount, portion, firstQuote, secondQuote } = bestSolution;\n    const portion1 = portion;\n    const portion2 = 100 - portion1;\n\n    // For UI display\n    this.portion1 = portion1;\n    this.portion2 = portion2;\n\n    let firstAmmFee = {\n      amount: firstQuote.feeAmount,\n      mint: firstQuote.feeMint,\n    };\n    let secondAmmFee = {\n      amount: secondQuote.feeAmount,\n      mint: secondQuote.feeMint,\n    };\n\n    if (firstAmmFee.mint !== secondAmmFee.mint) {\n      // Then we convert destinationMint fee into a sourceMint, to please the current data structure\n      // This will lead to inexact fees but this doesn't affect the user minimum out amount\n      if (firstAmmFee.mint !== sourceMintString) {\n        firstAmmFee = {\n          amount: JSBI.divide(\n            JSBI.divide(JSBI.multiply(firstAmmFee.amount, JSBI.multiply(amount, JSBI.BigInt(portion1))), HUNDRED),\n            bestSolution.outAmount,\n          ),\n          mint: sourceMintString,\n        };\n      }\n      if (secondAmmFee.mint !== sourceMintString) {\n        secondAmmFee = {\n          amount: JSBI.divide(\n            JSBI.divide(JSBI.multiply(JSBI.multiply(secondAmmFee.amount, amount), JSBI.BigInt(portion2)), HUNDRED),\n            bestSolution.outAmount,\n          ),\n          mint: sourceMintString,\n        };\n      }\n    }\n\n    const feePct = (portion1 * firstQuote.feePct + portion2 * secondQuote.feePct) / 100;\n    const priceImpactPct = (portion1 * firstQuote.priceImpactPct + portion2 * secondQuote.priceImpactPct) / 100;\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: quoteParams.amount,\n      outAmount: outAmount,\n      feeAmount: JSBI.add(firstAmmFee.amount, secondAmmFee.amount),\n      feeMint: firstAmmFee.mint, // Guaranteed identical mint at this point\n      feePct,\n      priceImpactPct,\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams) {\n    const inAmount = swapParams.amount;\n    if (inAmount === null) {\n      throw new Error('Split trade cannot be used with a null inAmount');\n    }\n\n    // We rely on the fact that this.portion1 is set, what if it isn't?\n    const firstAmount = inAmount.mul(new BN(this.portion1)).div(new BN(HUNDRED.toString()));\n    const secondAmount = inAmount.sub(firstAmount);\n\n    return [\n      ...this.firstAmm.createSwapInstructions({\n        ...swapParams,\n        amount: firstAmount,\n        otherAmountThreshold: new BN(0),\n        platformFee: undefined,\n      }),\n      ...this.secondAmm.createSwapInstructions({\n        ...swapParams,\n        amount: secondAmount,\n        otherAmountThreshold: new BN(0),\n        platformFee: undefined,\n      }),\n      createRiskCheckAndFeeInstruction(\n        swapParams.userDestinationTokenAccount,\n        swapParams.userTransferAuthority,\n        new BN(swapParams.otherAmountThreshold.toString()),\n        swapParams.tokenLedger,\n        swapParams.platformFee,\n      ),\n    ];\n  }\n}\n","import { Market as SerumMarket } from '@project-serum/serum';\nimport { PublicKey } from '@solana/web3.js';\nimport { StableSwap } from '@saberhq/stableswap-sdk';\nimport { SaberAddDecimalsAmm } from './saber/saberAddDecimalsAmm';\nimport { SplitTradeAmm } from './split-trade/splitTradeAmm';\nimport { RaydiumAmm } from './raydium/raydiumAmm';\nimport { SerumAmm } from './serum/serumAmm';\nimport { Amm } from './amm';\nimport JSBI from 'jsbi';\n\nexport interface Fee {\n  amount: JSBI;\n  mint: string;\n  pct: number;\n}\n\nexport { SerumMarket, StableSwap };\n\nexport interface MarketInfo {\n  amm: Amm; //name: string, // pair for serum, pool name for mer pool\n  inputMint: PublicKey;\n  outputMint: PublicKey;\n  minInAmount?: JSBI;\n  minOutAmount?: JSBI;\n  inAmount: JSBI;\n  outAmount: JSBI;\n  notEnoughLiquidity: boolean;\n  priceImpactPct: number;\n  lpFee: Fee;\n  platformFee: Fee;\n}\n\n// This is to check if the two markets are supported by the aggregator\nexport const isValidRoute = (ammA: Amm, ammB: Amm) => {\n  // dont match the same amm together\n  if (ammA.id === ammB.id) {\n    return false;\n  }\n  // don't show decimal as input or output\n  else if (ammA instanceof SaberAddDecimalsAmm && ammB instanceof SaberAddDecimalsAmm) {\n    return false;\n  } else if (ammA instanceof SplitTradeAmm || ammB instanceof SplitTradeAmm) {\n    return false;\n  }\n\n  return true;\n};\n\nexport function isSerumAndRaydium(marketInfos: MarketInfo[]) {\n  if (marketInfos.length < 2) return false;\n\n  const [firstAmm, secondAmm] = marketInfos.map((mi) => mi.amm);\n\n  return (\n    (firstAmm instanceof RaydiumAmm && secondAmm instanceof SerumAmm) ||\n    (firstAmm instanceof SerumAmm && secondAmm instanceof RaydiumAmm)\n  );\n}\n","import { calculateAmpFactor, StableSwap } from '@saberhq/stableswap-sdk';\nimport { PublicKey } from '@solana/web3.js';\nimport { Fraction, ONE, Stable, TWO } from '@jup-ag/math';\nimport JSBI from 'jsbi';\nimport Decimal from 'decimal.js';\nimport {\n  AccountInfoMap,\n  Amm,\n  mapAddressToAccountInfos,\n  Quote,\n  QuoteParams,\n  tokenAccountsToJSBIs,\n  SwapParams,\n} from '../amm';\nimport { createSaberSwapInstruction } from '../jupiterInstruction';\nimport { deserializeAccount } from '@mercurial-finance/optimist';\nimport { AccountInfo } from '@solana/spl-token';\n\nexport class SaberAmm implements Amm {\n  id: string;\n  label = 'Saber' as const;\n  shouldPrefetch = false;\n  exactOutputSupported = false;\n\n  private tokenAccounts: AccountInfo[] = [];\n  private calculator: Stable;\n\n  constructor(private stableSwap: StableSwap) {\n    this.id = stableSwap.config.swapAccount.toBase58();\n\n    this.calculator = new Stable(\n      TWO,\n      calculateAmpFactor(this.stableSwap.state),\n      [ONE, ONE],\n      new Fraction(this.stableSwap.state.fees.trade.numerator, this.stableSwap.state.fees.trade.denominator),\n    );\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [this.stableSwap.state.tokenA.reserve, this.stableSwap.state.tokenB.reserve];\n  }\n\n  update(accountInfoMap: AccountInfoMap) {\n    let tokenAccountInfos = mapAddressToAccountInfos(accountInfoMap, this.getAccountsForUpdate());\n\n    this.tokenAccounts = tokenAccountInfos.map((info) => {\n      const tokenAccount = deserializeAccount(info.data);\n      if (!tokenAccount) {\n        throw new Error('Invalid token account data');\n      }\n      return tokenAccount;\n    });\n  }\n\n  getQuote({ sourceMint, destinationMint, amount }: QuoteParams): Quote {\n    if (this.tokenAccounts.length === 0) {\n      throw new Error('Unable to fetch accounts for specified tokens.');\n    }\n\n    const feePct = new Decimal(this.stableSwap.state.fees.trade.asFraction.toFixed(4));\n\n    const [inputIndex, outputIndex] = this.tokenAccounts[0].mint.equals(sourceMint) ? [0, 1] : [1, 0];\n\n    this.calculator.setAmp(calculateAmpFactor(this.stableSwap.state));\n    const result = this.calculator.exchange(tokenAccountsToJSBIs(this.tokenAccounts), amount, inputIndex, outputIndex);\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: result.expectedOutputAmount,\n      feeAmount: result.fees,\n      feeMint: destinationMint.toBase58(),\n      feePct: feePct.toNumber(),\n      priceImpactPct: result.priceImpact.toNumber(),\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams) {\n    return [\n      createSaberSwapInstruction({\n        stableSwap: this.stableSwap,\n        ...swapParams,\n        inAmount: swapParams.amount,\n        minimumOutAmount: swapParams.otherAmountThreshold,\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.stableSwap.state.tokenA.mint, this.stableSwap.state.tokenB.mint];\n  }\n}\n","import { u64 } from '@solana/spl-token';\nimport Decimal from 'decimal.js';\n\nconst ZERO = new u64(0);\n\nexport class Percentage {\n  readonly numerator: u64;\n  readonly denominator: u64;\n\n  constructor(numerator: u64, denominator: u64) {\n    this.numerator = numerator;\n    this.denominator = denominator;\n  }\n\n  public static fromDecimal(number: Decimal): Percentage {\n    return Percentage.fromFraction(number.toDecimalPlaces(1).mul(10).toNumber(), 1000);\n  }\n\n  public static fromFraction(numerator: u64 | number, denominator: u64 | number): Percentage {\n    const num = typeof numerator === 'number' ? new u64(numerator.toString()) : numerator;\n    const denom = typeof denominator === 'number' ? new u64(denominator.toString()) : denominator;\n    return new Percentage(num, denom);\n  }\n\n  public toString = (): string => {\n    return `${this.numerator.toString()}/${this.denominator.toString()}`;\n  };\n\n  public toDecimal() {\n    if (this.denominator.eq(ZERO)) {\n      return new Decimal(0);\n    }\n    return new Decimal(this.numerator.toString()).div(new Decimal(this.denominator.toString()));\n  }\n\n  public add(p2: Percentage): Percentage {\n    const denomGcd = this.denominator.gcd(p2.denominator);\n    const denomLcm = this.denominator.div(denomGcd).mul(p2.denominator);\n\n    const p1DenomAdjustment = denomLcm.div(this.denominator);\n    const p2DenomAdjustment = denomLcm.div(p2.denominator);\n\n    const p1NumeratorAdjusted = this.numerator.mul(p1DenomAdjustment);\n    const p2NumeratorAdjusted = p2.numerator.mul(p2DenomAdjustment);\n\n    const newNumerator = p1NumeratorAdjusted.add(p2NumeratorAdjusted);\n\n    return new Percentage(new u64(newNumerator.toString()), new u64(denomLcm.toString()));\n  }\n}\n","import { struct, blob, u8, Structure } from '@solana/buffer-layout';\nimport { u64 } from '@solana/spl-token';\nimport { AccountInfo, PublicKey } from '@solana/web3.js';\nimport { ALDRIN_SWAP_V2_PROGRAM_ID } from '../../constants';\nimport { publicKey, rustEnum, uint64 } from '../../utils/layout';\nimport { Percentage } from './percentage';\n\ntype FeeStructure = {\n  traderFee: Percentage;\n  ownerFee: Percentage;\n};\n\ninterface FeeLayout {\n  tradeFeeNumerator: u64;\n  tradeFeeDenominator: u64;\n  ownerTradeFeeNumerator: u64;\n  ownerTradeFeeDenominator: u64;\n  ownerWithdrawFeeNumerator: u64;\n  ownerWithdrawFeeDenominator: u64;\n}\n\n// https://github.com/aldrin-exchange/aldrin-sdk/blob/78527e3adfc02e186956f420b5083fa0950e7263/src/pools/layout.ts\nconst FEES_LAYOUT = struct<FeeLayout>(\n  [\n    uint64('tradeFeeNumerator'),\n    uint64('tradeFeeDenominator'),\n    uint64('ownerTradeFeeNumerator'),\n    uint64('ownerTradeFeeDenominator'),\n    uint64('ownerWithdrawFeeNumerator'),\n    uint64('ownerWithdrawFeeDenominator'),\n  ],\n  'fees',\n);\n\nconst POOL_FIELDS_COMMON = [\n  blob(8, 'padding'),\n  publicKey('lpTokenFreezeVault'),\n  publicKey('poolMint'),\n  publicKey('baseTokenVault'),\n  publicKey('baseTokenMint'),\n  publicKey('quoteTokenVault'),\n  publicKey('quoteTokenMint'),\n  publicKey('poolSigner'),\n  u8('poolSignerNonce'),\n  publicKey('authority'),\n  publicKey('initializerAccount'),\n  publicKey('feeBaseAccount'),\n  publicKey('feeQuoteAccount'),\n  publicKey('feePoolTokenAccount'),\n  FEES_LAYOUT,\n];\n\ninterface PoolLayout {\n  padding: any;\n  lpTokenFreezeVault: PublicKey;\n  poolMint: PublicKey;\n  baseTokenVault: PublicKey;\n  baseTokenMint: PublicKey;\n  quoteTokenVault: PublicKey;\n  quoteTokenMint: PublicKey;\n  poolSigner: PublicKey;\n  poolSignerNonce: number;\n  authority: PublicKey;\n  initializerAccount: PublicKey;\n  feeBaseAccount: PublicKey;\n  feeQuoteAccount: PublicKey;\n  feePoolTokenAccount: PublicKey;\n  fees: FeeLayout;\n}\n\nexport const POOL_LAYOUT = struct<PoolLayout>(POOL_FIELDS_COMMON);\n\ninterface PoolV2Layout extends PoolLayout {\n  curveType: number;\n  curve: PublicKey;\n}\n\nexport const POOL_V2_LAYOUT = struct<PoolV2Layout>([...POOL_FIELDS_COMMON, u8('curveType'), publicKey('curve')]);\n\ninterface StableCurveLayout {\n  padding: any;\n  amp: u64;\n}\n\nexport const STABLE_CURVE_LAYOUT = struct<StableCurveLayout>([blob(8, 'padding'), uint64('amp')]);\n\ninterface SwapInstructionLayout {\n  instruction: any;\n  tokens: u64;\n  minTokens: u64;\n  side: 'bid' | 'ask';\n}\n\nexport const SWAP_INSTRUCTION_LAYOUT = struct<SwapInstructionLayout>([\n  blob(8, 'instruction'),\n  uint64('tokens'),\n  uint64('minTokens'),\n  rustEnum([new Structure([], 'bid'), new Structure([], 'ask')], 'side'),\n]);\n\nexport function accountInfoToAldrinPoolState(address: PublicKey, accountInfo: AccountInfo<Buffer>): AldrinPoolState {\n  const isV2 = accountInfo.owner.equals(ALDRIN_SWAP_V2_PROGRAM_ID) ? true : false;\n\n  const decoded: PoolV2Layout | PoolLayout = (isV2 ? POOL_V2_LAYOUT : POOL_LAYOUT).decode(accountInfo.data) as\n    | PoolV2Layout\n    | PoolLayout;\n\n  const curveObject = 'curveType' in decoded ? { curveType: decoded.curveType, curve: decoded.curve } : {};\n\n  return {\n    isV2,\n    address,\n    poolMint: decoded.poolMint,\n    baseTokenVault: decoded.baseTokenVault,\n    baseTokenMint: decoded.baseTokenMint,\n    quoteTokenVault: decoded.quoteTokenVault,\n    quoteTokenMint: decoded.quoteTokenMint,\n    poolSigner: decoded.poolSigner,\n    feeBaseAccount: decoded.feeBaseAccount,\n    feeQuoteAccount: decoded.feeQuoteAccount,\n    feePoolTokenAccount: decoded.feePoolTokenAccount,\n    fees: {\n      traderFee: Percentage.fromFraction(decoded.fees.tradeFeeNumerator, decoded.fees.tradeFeeDenominator),\n      ownerFee: Percentage.fromFraction(decoded.fees.ownerTradeFeeNumerator, decoded.fees.ownerTradeFeeDenominator),\n    },\n    ...curveObject,\n  };\n}\n\nexport interface AldrinPoolState {\n  isV2: Boolean;\n  address: PublicKey;\n  poolMint: PublicKey;\n  baseTokenVault: PublicKey;\n  baseTokenMint: PublicKey;\n  quoteTokenVault: PublicKey;\n  quoteTokenMint: PublicKey;\n  poolSigner: PublicKey;\n  feeBaseAccount: PublicKey;\n  feeQuoteAccount: PublicKey;\n  feePoolTokenAccount: PublicKey;\n  fees: FeeStructure;\n  curveType?: number;\n  curve?: PublicKey;\n}\n","import { Fraction, TokenSwapConstantProduct, TokenSwapStable } from '@jup-ag/math';\nimport { AccountInfo, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport JSBI from 'jsbi';\nimport { deserializeAccount } from '@mercurial-finance/optimist';\nimport {\n  AccountInfoMap,\n  Amm,\n  mapAddressToAccountInfos,\n  Quote,\n  QuoteParams,\n  tokenAccountsToJSBIs,\n  SwapParams,\n} from '../amm';\nimport { createAldrinSwapInstruction, createAldrinV2SwapInstruction } from '../jupiterInstruction';\nimport { accountInfoToAldrinPoolState, AldrinPoolState, STABLE_CURVE_LAYOUT } from './poolState';\nimport { AccountInfo as TokenAccountInfo } from '@solana/spl-token';\nimport Decimal from 'decimal.js';\n\ninterface AldrinParams {\n  amp?: number;\n}\n\nexport class AldrinAmm implements Amm {\n  id: string;\n  label = 'Aldrin' as const;\n  shouldPrefetch = false;\n  exactOutputSupported = false;\n\n  poolState: AldrinPoolState;\n  private tokenAccounts: TokenAccountInfo[] = [];\n  calculator: TokenSwapConstantProduct | TokenSwapStable;\n\n  constructor(address: PublicKey, accountInfo: AccountInfo<Buffer>, private params: AldrinParams) {\n    this.poolState = accountInfoToAldrinPoolState(address, accountInfo);\n    this.id = address.toBase58();\n\n    if (this.poolState.curveType === 1) {\n      const { amp } = this.params;\n      if (!amp) {\n        throw new Error('Amp is required for a stable curve');\n      }\n\n      this.calculator = new TokenSwapStable(\n        JSBI.BigInt(amp),\n        new Fraction(\n          JSBI.BigInt(this.poolState.fees.traderFee.numerator.toString()),\n          JSBI.BigInt(this.poolState.fees.traderFee.denominator.toString()),\n        ),\n        new Fraction(\n          JSBI.BigInt(this.poolState.fees.ownerFee.numerator.toString()),\n          JSBI.BigInt(this.poolState.fees.ownerFee.denominator.toString()),\n        ),\n      );\n    } else {\n      this.calculator = new TokenSwapConstantProduct(\n        new Fraction(\n          JSBI.BigInt(this.poolState.fees.traderFee.numerator.toString()),\n          JSBI.BigInt(this.poolState.fees.traderFee.denominator.toString()),\n        ),\n        new Fraction(\n          JSBI.BigInt(this.poolState.fees.ownerFee.numerator.toString()),\n          JSBI.BigInt(this.poolState.fees.ownerFee.denominator.toString()),\n        ),\n      );\n    }\n  }\n\n  static accountInfoToAldrinPoolState = accountInfoToAldrinPoolState;\n\n  static decodeStableCurveAmp(accountInfo: AccountInfo<Buffer>) {\n    const { amp } = STABLE_CURVE_LAYOUT.decode(accountInfo.data);\n\n    return amp.toNumber() * 2; // times two for their AMP, dont ask me why, it is what it is\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [this.poolState.quoteTokenVault, this.poolState.baseTokenVault];\n  }\n\n  update(accountInfoMap: AccountInfoMap): void {\n    const tokenAccountInfos = mapAddressToAccountInfos(accountInfoMap, this.getAccountsForUpdate());\n\n    this.tokenAccounts = tokenAccountInfos.map((info) => {\n      const tokenAccount = deserializeAccount(info.data);\n      if (!tokenAccount) throw new Error('Invalid token account');\n      return tokenAccount;\n    });\n  }\n\n  getQuote({ sourceMint, amount }: QuoteParams): Quote {\n    if (this.tokenAccounts.length === 0) {\n      throw new Error('Unable to fetch accounts for specified tokens.');\n    }\n\n    let feePct = new Decimal(this.poolState.fees.traderFee.numerator.toString())\n      .div(this.poolState.fees.traderFee.denominator.toString())\n      .add(\n        new Decimal(this.poolState.fees.ownerFee.numerator.toString()).div(\n          this.poolState.fees.ownerFee.denominator.toString(),\n        ),\n      );\n\n    const outputIndex = this.tokenAccounts[0].mint.equals(sourceMint) ? 1 : 0;\n    let result = this.calculator.exchange(tokenAccountsToJSBIs(this.tokenAccounts), amount, outputIndex);\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: result.expectedOutputAmount,\n      feeAmount: result.fees,\n      feeMint: sourceMint.toBase58(),\n      feePct: feePct.toNumber(),\n      priceImpactPct: result.priceImpact.toNumber(),\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams): TransactionInstruction[] {\n    if (this.poolState.isV2) {\n      if (!this.poolState.curve) {\n        throw new Error('Unable to fetch curve account.');\n      }\n\n      const curve = this.poolState.curve;\n      return [\n        createAldrinV2SwapInstruction({\n          poolState: this.poolState,\n          curve,\n          ...swapParams,\n          inAmount: swapParams.amount,\n          minimumOutAmount: swapParams.otherAmountThreshold,\n        }),\n      ];\n    }\n\n    return [\n      createAldrinSwapInstruction({\n        poolState: this.poolState,\n        ...swapParams,\n        inAmount: swapParams.amount,\n        minimumOutAmount: swapParams.otherAmountThreshold,\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.poolState.baseTokenMint, this.poolState.quoteTokenMint];\n  }\n}\n","import {\n  ORCA_PROGRAM_ID,\n  PENGUIN_PROGRAM_ID,\n  SAROS_PROGRAM_ID,\n  STEPN_PROGRAM_ID,\n  STEP_TOKEN_SWAP_PROGRAM_ID,\n} from '../../constants';\n\nexport const PROGRAM_ID_TO_LABEL = new Map<string, string>([\n  [ORCA_PROGRAM_ID.toString(), 'Orca'],\n  [STEP_TOKEN_SWAP_PROGRAM_ID.toString(), 'Step'],\n  [PENGUIN_PROGRAM_ID.toString(), 'Penguin'],\n  [SAROS_PROGRAM_ID.toString(), 'Saros'],\n  [STEPN_PROGRAM_ID.toString(), 'Stepn'],\n]);\n","import { struct, u8, blob } from '@solana/buffer-layout';\nimport { u64 } from '@solana/spl-token';\nimport { AccountInfo, PublicKey } from '@solana/web3.js';\nimport { STEP_TOKEN_SWAP_PROGRAM_ID } from '../../constants';\nimport { publicKey, uint64 } from '../../utils/layout';\nimport { createProgramAddressSyncUnsafe } from '../../utils/pda';\n\ninterface TokenSwapLayout {\n  version: number;\n  isInitialized: number;\n  bumpSeed: number;\n  tokenProgramId: PublicKey;\n  tokenAccountA: PublicKey;\n  tokenAccountB: PublicKey;\n  tokenPool: PublicKey;\n  mintA: PublicKey;\n  mintB: PublicKey;\n  feeAccount: PublicKey;\n  tradeFeeNumerator: u64;\n  tradeFeeDenominator: u64;\n  ownerTradeFeeNumerator: u64;\n  ownerTradeFeeDenominator: u64;\n  ownerWithdrawFeeNumerator: u64;\n  ownerWithdrawFeeDenominator: u64;\n  hostFeeNumerator: u64;\n  hostFeeDenominator: u64;\n  curveType: number;\n  curveParameters: Uint8Array;\n}\n\nconst TokenSwapLayout = struct<TokenSwapLayout>([\n  u8('version'),\n  u8('isInitialized'),\n  u8('bumpSeed'),\n  publicKey('tokenProgramId'),\n  publicKey('tokenAccountA'),\n  publicKey('tokenAccountB'),\n  publicKey('tokenPool'),\n  publicKey('mintA'),\n  publicKey('mintB'),\n  publicKey('feeAccount'),\n  uint64('tradeFeeNumerator'),\n  uint64('tradeFeeDenominator'),\n  uint64('ownerTradeFeeNumerator'),\n  uint64('ownerTradeFeeDenominator'),\n  uint64('ownerWithdrawFeeNumerator'),\n  uint64('ownerWithdrawFeeDenominator'),\n  uint64('hostFeeNumerator'),\n  uint64('hostFeeDenominator'),\n  u8('curveType'),\n  blob(32, 'curveParameters'),\n]);\n\ninterface StepTokenSwapLayout extends TokenSwapLayout {\n  poolNonce: u64;\n}\n\nconst StepTokenSwapLayout = struct<StepTokenSwapLayout>([\n  u8('version'),\n  u8('isInitialized'),\n  u8('bumpSeed'),\n  publicKey('tokenProgramId'),\n  publicKey('tokenAccountA'),\n  publicKey('tokenAccountB'),\n  publicKey('tokenPool'),\n  publicKey('mintA'),\n  publicKey('mintB'),\n  publicKey('feeAccount'),\n  uint64('tradeFeeNumerator'),\n  uint64('tradeFeeDenominator'),\n  uint64('ownerTradeFeeNumerator'),\n  uint64('ownerTradeFeeDenominator'),\n  uint64('ownerWithdrawFeeNumerator'),\n  uint64('ownerWithdrawFeeDenominator'),\n  u8('curveType'),\n  blob(32, 'curveParameters'),\n  u8('poolNonce'),\n]);\n\nexport interface TokenSwapState {\n  address: PublicKey;\n  programId: PublicKey;\n  tokenProgramId: PublicKey;\n  poolToken: PublicKey;\n  feeAccount: PublicKey;\n  authority: PublicKey;\n  tokenAccountA: PublicKey;\n  tokenAccountB: PublicKey;\n  mintA: PublicKey;\n  mintB: PublicKey;\n  tradeFeeNumerator: u64;\n  tradeFeeDenominator: u64;\n  ownerTradeFeeNumerator: u64;\n  ownerTradeFeeDenominator: u64;\n  ownerWithdrawFeeNumerator: u64;\n  ownerWithdrawFeeDenominator: u64;\n  curveType: number;\n  curveParameters: Uint8Array;\n  poolNonce?: u64;\n}\n\nexport function accountInfoToTokenSwapState(\n  address: PublicKey,\n  tokenSwapAccountInfo: AccountInfo<Buffer>,\n): TokenSwapState {\n  const programId = tokenSwapAccountInfo.owner;\n\n  // The layout difference only affects fields we do not actively use\n  const tokenSwapData = (\n    programId.equals(STEP_TOKEN_SWAP_PROGRAM_ID)\n      ? StepTokenSwapLayout.decode(tokenSwapAccountInfo.data)\n      : TokenSwapLayout.decode(tokenSwapAccountInfo.data)\n  ) as TokenSwapLayout | StepTokenSwapLayout;\n\n  if (!tokenSwapData.isInitialized) {\n    throw new Error(`Invalid token swap state`);\n  }\n\n  const authority = createProgramAddressSyncUnsafe(\n    [address.toBuffer(), Buffer.from([tokenSwapData.bumpSeed])],\n    programId,\n  );\n\n  const poolToken = new PublicKey(tokenSwapData.tokenPool);\n  const feeAccount = new PublicKey(tokenSwapData.feeAccount);\n  const tokenAccountA = new PublicKey(tokenSwapData.tokenAccountA);\n  const tokenAccountB = new PublicKey(tokenSwapData.tokenAccountB);\n  const mintA = new PublicKey(tokenSwapData.mintA);\n  const mintB = new PublicKey(tokenSwapData.mintB);\n  const tokenProgramId = new PublicKey(tokenSwapData.tokenProgramId);\n\n  const tradeFeeNumerator = tokenSwapData.tradeFeeNumerator;\n  const tradeFeeDenominator = tokenSwapData.tradeFeeDenominator;\n  const ownerTradeFeeNumerator = tokenSwapData.ownerTradeFeeNumerator;\n  const ownerTradeFeeDenominator = tokenSwapData.ownerTradeFeeDenominator;\n  const ownerWithdrawFeeNumerator = tokenSwapData.ownerWithdrawFeeNumerator;\n  const ownerWithdrawFeeDenominator = tokenSwapData.ownerWithdrawFeeDenominator;\n\n  const curveType = tokenSwapData.curveType;\n  const curveParameters = tokenSwapData.curveParameters;\n\n  const poolNonce = 'poolNonce' in tokenSwapData ? tokenSwapData.poolNonce : undefined;\n\n  return {\n    address,\n    programId,\n    tokenProgramId,\n    poolToken,\n    feeAccount,\n    authority,\n    tokenAccountA,\n    tokenAccountB,\n    mintA,\n    mintB,\n    tradeFeeNumerator,\n    tradeFeeDenominator,\n    ownerTradeFeeNumerator,\n    ownerTradeFeeDenominator,\n    ownerWithdrawFeeNumerator,\n    ownerWithdrawFeeDenominator,\n    curveType,\n    curveParameters,\n    poolNonce,\n  };\n}\n","import { AccountInfo, PublicKey } from '@solana/web3.js';\nimport Decimal from 'decimal.js';\nimport {\n  AccountInfoMap,\n  Amm,\n  mapAddressToAccountInfos,\n  Quote,\n  QuoteParams,\n  SwapParams,\n  tokenAccountsToJSBIs,\n} from '../amm';\nimport { createTokenSwapInstruction } from '../jupiterInstruction';\nimport { accountInfoToTokenSwapState, TokenSwapState } from './tokenSwapLayout';\nimport { deserializeAccount } from '@mercurial-finance/optimist';\nimport { Fraction, TokenSwapConstantProduct, TokenSwapStable } from '@jup-ag/math';\nimport JSBI from 'jsbi';\nimport { AccountInfo as TokenAccountInfo } from '@solana/spl-token';\nimport { STEP_TOKEN_SWAP_PROGRAM_ID } from '../../constants';\n\nenum CurveType {\n  ConstantProduct = 0,\n  Stable = 2,\n}\n\n// Abstract any SPL token swap based AMM\nexport class SplTokenSwapAmm implements Amm {\n  id: string;\n  shouldPrefetch = false;\n  exactOutputSupported = false;\n\n  private tokenSwapState: TokenSwapState;\n  private curveType: CurveType;\n\n  private tokenAccounts: TokenAccountInfo[] = [];\n  calculator: TokenSwapConstantProduct | TokenSwapStable;\n\n  constructor(address: PublicKey, swapStateAccountInfo: AccountInfo<Buffer>, public label: string) {\n    this.id = address.toBase58();\n    this.tokenSwapState = accountInfoToTokenSwapState(address, swapStateAccountInfo);\n\n    this.curveType = this.tokenSwapState.curveType;\n\n    if (!(this.curveType in CurveType)) {\n      throw new Error(`curveType ${this.tokenSwapState.curveType} is not supported`);\n    }\n\n    if (this.tokenSwapState.curveType === CurveType.ConstantProduct) {\n      this.calculator = new TokenSwapConstantProduct(\n        new Fraction(\n          JSBI.BigInt(this.tokenSwapState.tradeFeeNumerator.toString()),\n          JSBI.BigInt(this.tokenSwapState.tradeFeeDenominator.toString()),\n        ),\n        new Fraction(\n          JSBI.BigInt(this.tokenSwapState.ownerTradeFeeNumerator.toString()),\n          JSBI.BigInt(this.tokenSwapState.ownerTradeFeeDenominator.toString()),\n        ),\n      );\n    } else {\n      this.calculator = new TokenSwapStable(\n        JSBI.BigInt(this.tokenSwapState.curveParameters[0]),\n        new Fraction(\n          JSBI.BigInt(this.tokenSwapState.tradeFeeNumerator.toString()),\n          JSBI.BigInt(this.tokenSwapState.tradeFeeDenominator.toString()),\n        ),\n        new Fraction(\n          JSBI.BigInt(this.tokenSwapState.ownerTradeFeeNumerator.toString()),\n          JSBI.BigInt(this.tokenSwapState.ownerTradeFeeDenominator.toString()),\n        ),\n      );\n    }\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [this.tokenSwapState.tokenAccountA, this.tokenSwapState.tokenAccountB];\n  }\n\n  update(accountInfoMap: AccountInfoMap): void {\n    const tokenAccountInfos = mapAddressToAccountInfos(accountInfoMap, this.getAccountsForUpdate());\n\n    this.tokenAccounts = tokenAccountInfos.map((info) => {\n      const tokenAccount = deserializeAccount(info.data);\n      if (!tokenAccount) {\n        throw new Error('Invalid token account');\n      }\n      return tokenAccount;\n    });\n  }\n\n  getQuote({ sourceMint, amount }: QuoteParams): Quote {\n    if (this.tokenAccounts.length === 0) {\n      throw new Error('Unable to fetch accounts for specified tokens.');\n    }\n\n    let feePct = new Decimal(this.tokenSwapState.tradeFeeNumerator.toString())\n      .div(this.tokenSwapState.tradeFeeDenominator.toString())\n      .add(\n        new Decimal(this.tokenSwapState.ownerTradeFeeNumerator.toString()).div(\n          this.tokenSwapState.ownerTradeFeeDenominator.toString(),\n        ),\n      );\n\n    const outputIndex = this.tokenAccounts[0].mint.equals(sourceMint) ? 1 : 0;\n    let result = this.calculator.exchange(tokenAccountsToJSBIs(this.tokenAccounts), amount, outputIndex);\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: result.expectedOutputAmount,\n      feeAmount: result.fees,\n      feeMint: sourceMint.toBase58(),\n      feePct: feePct.toNumber(),\n      priceImpactPct: result.priceImpact.toNumber(),\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams) {\n    return [\n      createTokenSwapInstruction({\n        tokenSwapState: this.tokenSwapState,\n        ...swapParams,\n        inAmount: swapParams.amount,\n        minimumOutAmount: swapParams.otherAmountThreshold,\n        isStep: this.tokenSwapState.programId.equals(STEP_TOKEN_SWAP_PROGRAM_ID),\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.tokenSwapState.mintA, this.tokenSwapState.mintB];\n  }\n}\n","import { struct, u8, u32 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/spl-token';\nimport { AccountInfo, PublicKey } from '@solana/web3.js';\nimport { uint64, publicKey } from '../../utils/layout';\nimport { createProgramAddressSyncUnsafe } from '../../utils/pda';\n\nexport const FEE_DENOMINATOR = Math.pow(10, 10);\n\ninterface MercurialSwapLayout {\n  version: number;\n  isInitialized: number;\n  nonce: number;\n  amplificationCoefficient: u64;\n  feeNumerator: u64;\n  adminFeeNumerator: u64;\n  tokenAccountsLength: number;\n  precisionFactor: u64;\n  precisionMultiplierA: u64;\n  precisionMultiplierB: u64;\n  precisionMultiplierC: u64;\n  precisionMultiplierD: u64;\n  tokenAccountA: PublicKey;\n  tokenAccountB: PublicKey;\n  tokenAccountC: PublicKey;\n  tokenAccountD: PublicKey;\n}\n\nexport const MercurialSwapLayout = struct<MercurialSwapLayout>([\n  u8('version'),\n  u8('isInitialized'),\n  u8('nonce'),\n  uint64('amplificationCoefficient'),\n  uint64('feeNumerator'),\n  uint64('adminFeeNumerator'),\n  u32('tokenAccountsLength'),\n  uint64('precisionFactor'),\n  uint64('precisionMultiplierA'),\n  uint64('precisionMultiplierB'),\n  uint64('precisionMultiplierC'),\n  uint64('precisionMultiplierD'),\n  publicKey('tokenAccountA'),\n  publicKey('tokenAccountB'),\n  publicKey('tokenAccountC'),\n  publicKey('tokenAccountD'),\n]);\n\nexport interface MercurialSwapLayoutState {\n  programId: PublicKey;\n  authority: PublicKey;\n  isInitialized: boolean;\n  nonce: number;\n  ammId: PublicKey;\n  amplificationCoefficient: number;\n  feeNumerator: number;\n  tokenAccountsLength: number;\n  precisionFactor: number;\n  precisionMultipliers: number[];\n  tokenAccounts: PublicKey[];\n}\n\nexport const accountInfoToMercurialSwapLayout = (\n  address: PublicKey,\n  accountInfo: AccountInfo<Buffer>,\n): MercurialSwapLayoutState => {\n  const programId = accountInfo.owner;\n  const decoded = MercurialSwapLayout.decode(accountInfo.data);\n  const tokenAccountsLength = decoded.tokenAccountsLength;\n  const authority = createProgramAddressSyncUnsafe([address.toBuffer(), Buffer.from([decoded.nonce])], programId);\n\n  const precisionMultipliers = [\n    decoded.precisionMultiplierA.toNumber(),\n    decoded.precisionMultiplierB.toNumber(),\n    decoded.precisionMultiplierC.toNumber(),\n    decoded.precisionMultiplierD.toNumber(),\n  ].slice(0, tokenAccountsLength);\n\n  const tokenAccounts = [\n    decoded.tokenAccountA,\n    decoded.tokenAccountB,\n    decoded.tokenAccountC,\n    decoded.tokenAccountD,\n  ].slice(0, tokenAccountsLength);\n\n  return {\n    programId,\n    authority,\n    isInitialized: Boolean(decoded.isInitialized),\n    nonce: decoded.nonce,\n    ammId: address,\n    amplificationCoefficient: decoded.amplificationCoefficient.toNumber(),\n    feeNumerator: decoded.feeNumerator.toNumber(),\n    tokenAccountsLength,\n    precisionFactor: decoded.precisionFactor.toNumber(),\n    precisionMultipliers,\n    tokenAccounts,\n  };\n};\n","import { Fraction, Stable } from '@jup-ag/math';\nimport { AccountInfo, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport JSBI from 'jsbi';\nimport {\n  AccountInfoMap,\n  Amm,\n  mapAddressToAccountInfos,\n  Quote,\n  QuoteParams,\n  tokenAccountsToJSBIs,\n  SwapParams,\n} from '../amm';\nimport { createMercurialExchangeInstruction } from '../jupiterInstruction';\nimport { deserializeAccount } from '@mercurial-finance/optimist';\nimport { AccountInfo as TokenAccountInfo } from '@solana/spl-token';\nimport { accountInfoToMercurialSwapLayout, FEE_DENOMINATOR, MercurialSwapLayoutState } from './swapLayout';\n\ninterface MercurialParams {\n  tokenMints: string[];\n}\n\nexport class MercurialAmm implements Amm {\n  id: string;\n  label = 'Mercurial';\n  shouldPrefetch = false;\n  exactOutputSupported = false;\n\n  swapLayout: MercurialSwapLayoutState;\n  private tokenAccounts: TokenAccountInfo[] = [];\n  private calculator: Stable;\n\n  static decodeSwapLayout = accountInfoToMercurialSwapLayout;\n\n  constructor(address: PublicKey, accountInfo: AccountInfo<Buffer>, private params: MercurialParams) {\n    this.id = address.toBase58();\n    this.swapLayout = accountInfoToMercurialSwapLayout(address, accountInfo);\n    this.calculator = new Stable(\n      JSBI.BigInt(this.swapLayout.tokenAccountsLength),\n      JSBI.BigInt(this.swapLayout.amplificationCoefficient),\n      this.swapLayout.precisionMultipliers.map((precisionMultiplier) => JSBI.BigInt(precisionMultiplier)),\n      new Fraction(JSBI.BigInt(this.swapLayout.feeNumerator), JSBI.BigInt(FEE_DENOMINATOR)),\n    );\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return this.swapLayout.tokenAccounts;\n  }\n\n  update(accountInfoMap: AccountInfoMap) {\n    let tokenAccountInfos = mapAddressToAccountInfos(accountInfoMap, this.getAccountsForUpdate());\n\n    this.tokenAccounts = tokenAccountInfos\n      .map((info) => deserializeAccount(info.data))\n      .filter((x): x is TokenAccountInfo => x !== null);\n  }\n\n  getQuote({ sourceMint, destinationMint, amount }: QuoteParams): Quote {\n    if (this.tokenAccounts.length === 0) {\n      throw new Error('Unable to fetch accounts for specified tokens.');\n    }\n\n    const inputIndex = this.tokenAccounts.findIndex((tokenAccount) => tokenAccount.mint.equals(sourceMint));\n    const outputIndex = this.tokenAccounts.findIndex((tokenAccount) => tokenAccount.mint.equals(destinationMint));\n    const result = this.calculator.exchange(tokenAccountsToJSBIs(this.tokenAccounts), amount, inputIndex, outputIndex);\n\n    const feePct = this.swapLayout.feeNumerator / FEE_DENOMINATOR;\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: result.expectedOutputAmount,\n      feeAmount: result.fees,\n      feeMint: destinationMint.toBase58(),\n      feePct: feePct,\n      priceImpactPct: result.priceImpact.toNumber(),\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams): TransactionInstruction[] {\n    return [\n      createMercurialExchangeInstruction({\n        swapLayout: this.swapLayout,\n        ...swapParams,\n        inAmount: swapParams.amount,\n        minimumOutAmount: swapParams.otherAmountThreshold,\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return this.params.tokenMints.map((tokenMint) => new PublicKey(tokenMint));\n  }\n}\n","import { Fraction, TokenSwapConstantProduct } from '@jup-ag/math';\nimport { AccountInfo, Connection, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport JSBI from 'jsbi';\nimport { deserializeAccount } from '@mercurial-finance/optimist';\nimport {\n  AccountInfoMap,\n  Amm,\n  mapAddressToAccountInfos,\n  Quote,\n  QuoteParams,\n  tokenAccountsToJSBIs,\n  SwapParams,\n} from '../amm';\nimport { createCropperSwapInstruction } from '../jupiterInstruction';\n\nimport { AccountInfo as TokenAccountInfo } from '@solana/spl-token';\nimport {\n  accountInfoToCropperPoolState,\n  CropperPoolState,\n  stateAccountInfoToCropperState,\n  CROPPER_STATE_ADDRESS,\n} from './swapLayout';\nimport Decimal from 'decimal.js';\n\ninterface CropperParams {\n  tokenAFeeAccount: string;\n  tokenBFeeAccount: string;\n  returnFeeNumerator: number;\n  fixedFeeNumerator: number;\n  feeDenominator: number;\n}\n\ninterface CropperParamsWithPublicKey extends Omit<CropperParams, 'tokenAFeeAccount' | 'tokenBFeeAccount'> {\n  tokenAFeeAccount: PublicKey;\n  tokenBFeeAccount: PublicKey;\n}\n\nexport class CropperAmm implements Amm {\n  id: string;\n  label = 'Cropper' as const;\n  shouldPrefetch = false;\n  exactOutputSupported = false;\n\n  poolState: CropperPoolState;\n  private tokenAccounts: TokenAccountInfo[] = [];\n  private calculator: TokenSwapConstantProduct;\n  private feePct: Decimal;\n  private params: CropperParamsWithPublicKey;\n\n  // Hardcoded because no where to query this\n  static async getStateFromStateAccount(connection: Connection) {\n    const accountInfo = await connection.getAccountInfo(CROPPER_STATE_ADDRESS);\n\n    if (!accountInfo) {\n      throw new Error('State account not found');\n    }\n\n    return stateAccountInfoToCropperState(accountInfo);\n  }\n\n  static decodePoolState = accountInfoToCropperPoolState;\n\n  constructor(address: PublicKey, accountInfo: AccountInfo<Buffer>, params: CropperParams) {\n    this.id = address.toBase58();\n    this.poolState = accountInfoToCropperPoolState(address, accountInfo);\n\n    this.params = {\n      ...params,\n      tokenAFeeAccount: new PublicKey(params.tokenAFeeAccount),\n      tokenBFeeAccount: new PublicKey(params.tokenBFeeAccount),\n    };\n\n    this.feePct = new Decimal(this.params.fixedFeeNumerator)\n      .div(this.params.feeDenominator)\n      .add(new Decimal(this.params.returnFeeNumerator).div(this.params.feeDenominator));\n\n    this.calculator = new TokenSwapConstantProduct(\n      new Fraction(JSBI.BigInt(this.params.fixedFeeNumerator), JSBI.BigInt(this.params.feeDenominator)),\n      new Fraction(JSBI.BigInt(this.params.returnFeeNumerator), JSBI.BigInt(this.params.feeDenominator)),\n    );\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [this.poolState.tokenAAccount, this.poolState.tokenBAccount];\n  }\n\n  update(accountInfoMap: AccountInfoMap): void {\n    const tokenAccountInfos = mapAddressToAccountInfos(accountInfoMap, this.getAccountsForUpdate());\n\n    this.tokenAccounts = tokenAccountInfos.map((info) => {\n      const tokenAccount = deserializeAccount(info.data);\n      if (!tokenAccount) {\n        throw new Error('Invalid token account');\n      }\n      return tokenAccount;\n    });\n  }\n\n  getQuote({ sourceMint, amount }: QuoteParams): Quote {\n    if (this.tokenAccounts.length === 0) {\n      throw new Error('Unable to fetch accounts for specified tokens.');\n    }\n\n    const outputIndex = this.tokenAccounts[0].mint.equals(sourceMint) ? 1 : 0;\n    const result = this.calculator.exchange(tokenAccountsToJSBIs(this.tokenAccounts), amount, outputIndex);\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: result.expectedOutputAmount,\n      feeAmount: result.fees,\n      feeMint: sourceMint.toBase58(),\n      feePct: this.feePct.toNumber(),\n      priceImpactPct: result.priceImpact.toNumber(),\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams): TransactionInstruction[] {\n    const feeAccount = swapParams.sourceMint.equals(this.poolState.mintA)\n      ? this.params.tokenAFeeAccount\n      : this.params.tokenBFeeAccount;\n\n    return [\n      createCropperSwapInstruction({\n        poolState: this.poolState,\n        feeAccount,\n        ...swapParams,\n        inAmount: swapParams.amount,\n        minimumOutAmount: swapParams.otherAmountThreshold,\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.poolState.mintA, this.poolState.mintB];\n  }\n}\n","import { TokenSwapAccountLayout } from '@jup-ag/crema-sdk';\nimport { AccountInfo, PublicKey } from '@solana/web3.js';\nimport Decimal from 'decimal.js';\nimport { createProgramAddressSyncUnsafe } from '../../utils/pda';\n\nexport interface CremaPoolState {\n  programId: PublicKey;\n  authority: PublicKey;\n  version: number;\n  isInitialized: boolean;\n  nonce: number;\n  ammId: PublicKey;\n  tokenProgramId: PublicKey;\n  tokenAAccount: PublicKey;\n  tokenBAccount: PublicKey;\n  ticksKey: PublicKey;\n  mintA: PublicKey;\n  mintB: PublicKey;\n  fee: Decimal;\n  currentSqrtPrice: Decimal;\n  currentLiquity: Decimal;\n}\n\nexport const accountInfoToCremaPoolState = (address: PublicKey, accountInfo: AccountInfo<Buffer>): CremaPoolState => {\n  const programId = accountInfo.owner;\n\n  const decoded = TokenSwapAccountLayout.decode(accountInfo.data);\n  const authority = createProgramAddressSyncUnsafe([address.toBuffer(), Buffer.from([decoded.nonce])], programId);\n\n  return {\n    programId,\n    authority,\n    version: decoded.version,\n    isInitialized: Boolean(decoded.isInitialized),\n    nonce: decoded.nonce,\n    ammId: address,\n    tokenProgramId: decoded.tokenProgramId,\n    tokenAAccount: decoded.swapTokenA,\n    tokenBAccount: decoded.swapTokenB,\n    ticksKey: decoded.ticksKey,\n    mintA: decoded.tokenAMint,\n    mintB: decoded.tokenBMint,\n    fee: decoded.fee,\n    currentSqrtPrice: decoded.currentSqrtPrice,\n    currentLiquity: decoded.currentLiquity,\n  };\n};\n","import { AccountInfoMap, Amm, mapAddressToAccountInfos, Quote, QuoteParams, SwapParams } from '../amm';\nimport { AccountInfo, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { accountInfoToCremaPoolState, CremaPoolState } from './swapLayout';\nimport { createCremaSwapInstruction } from '../jupiterInstruction';\nimport { calculateSwapA2B, calculateSwapB2A, parseTicksAccount, Tick } from '@jup-ag/crema-sdk';\nimport Decimal from 'decimal.js';\nimport { ZERO } from '@jup-ag/math';\nimport JSBI from 'jsbi';\n\nexport class CremaAmm implements Amm {\n  id: string;\n  label = 'Crema';\n  shouldPrefetch = false;\n  exactOutputSupported = false;\n\n  private ticks: Tick[] | undefined;\n  private poolState: CremaPoolState;\n\n  constructor(address: PublicKey, accountInfo: AccountInfo<Buffer>) {\n    this.poolState = accountInfoToCremaPoolState(address, accountInfo);\n    this.id = address.toBase58();\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [this.poolState.ammId, this.poolState.ticksKey];\n  }\n\n  update(accountInfoMap: AccountInfoMap): void {\n    const [tokenSwapAccountInfo, ticksAccountInfo] = mapAddressToAccountInfos(\n      accountInfoMap,\n      this.getAccountsForUpdate(),\n    );\n\n    this.poolState = accountInfoToCremaPoolState(this.poolState.ammId, tokenSwapAccountInfo);\n\n    const ticksInfo = parseTicksAccount(this.poolState.ticksKey, ticksAccountInfo);\n    if (!ticksInfo) throw new Error(`Ticks account invalid: ${this.poolState.ticksKey.toBase58()}`);\n    this.ticks = ticksInfo.data.ticks;\n  }\n\n  getQuote({ sourceMint, amount }: QuoteParams): Quote {\n    if (!this.ticks) {\n      throw new Error('Unable to fetch accounts for ticks.');\n    }\n\n    // Crema SDK doesn't support 0 amount input\n    if (JSBI.equal(amount, ZERO)) {\n      return {\n        notEnoughLiquidity: false,\n        inAmount: amount,\n        outAmount: ZERO,\n        feeAmount: ZERO,\n        feeMint: sourceMint.toBase58(),\n        feePct: this.poolState.fee.toNumber(),\n        priceImpactPct: 0,\n      };\n    }\n\n    const result = this.poolState.mintA.equals(sourceMint)\n      ? this.preSwapA(new Decimal(amount.toString()))\n      : this.preSwapB(new Decimal(amount.toString()));\n\n    if (result.revert) {\n      throw new Error('Crema error: insufficient liquidity');\n    }\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: JSBI.BigInt(result.amountOut.toString()),\n      feeAmount: JSBI.BigInt(result.feeUsed.toString()),\n      feeMint: sourceMint.toBase58(),\n      feePct: this.poolState.fee.toNumber(),\n      priceImpactPct: result.impact.toNumber(),\n    };\n  }\n\n  preSwapA(amountIn: Decimal): {\n    amountOut: Decimal;\n    amountUsed: Decimal;\n    feeUsed: Decimal;\n    afterPrice: Decimal;\n    afterLiquity: Decimal;\n    impact: Decimal;\n    revert: boolean;\n  } {\n    if (!this.ticks) {\n      throw new Error('Unable to fetch accounts for ticks.');\n    }\n\n    const result = calculateSwapA2B(\n      this.ticks,\n      this.poolState.currentSqrtPrice,\n      this.poolState.fee,\n      this.poolState.currentLiquity,\n      amountIn,\n    );\n\n    const currentPriceA = this.poolState.currentSqrtPrice.pow(2);\n    const transactionPriceA = result.amountOut.div(result.amountUsed);\n    const impact = transactionPriceA.sub(currentPriceA).div(currentPriceA).abs();\n    const revert = result.amountUsed.lessThan(amountIn);\n\n    return {\n      ...result,\n      impact,\n      revert,\n    };\n  }\n\n  preSwapB(amountIn: Decimal): {\n    amountOut: Decimal;\n    amountUsed: Decimal;\n    feeUsed: Decimal;\n    afterPrice: Decimal;\n    afterLiquity: Decimal;\n    impact: Decimal;\n    revert: boolean;\n  } {\n    if (!this.ticks) {\n      throw new Error('Unable to fetch accounts for ticks.');\n    }\n\n    const result = calculateSwapB2A(\n      this.ticks,\n      this.poolState.currentSqrtPrice,\n      this.poolState.fee,\n      this.poolState.currentLiquity,\n      amountIn,\n    );\n\n    const currentPriceA = this.poolState.currentSqrtPrice.pow(2);\n    const currentPriceB = new Decimal(1).div(currentPriceA);\n    const transactionPriceB = result.amountOut.div(result.amountUsed);\n    const impact = transactionPriceB.sub(currentPriceB).div(currentPriceB).abs();\n    const revert = result.amountUsed.lessThan(amountIn);\n\n    return {\n      ...result,\n      impact,\n      revert,\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams): TransactionInstruction[] {\n    return [\n      createCremaSwapInstruction({\n        poolState: this.poolState,\n        ...swapParams,\n        inAmount: swapParams.amount,\n        minimumOutAmount: swapParams.otherAmountThreshold,\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.poolState.mintA, this.poolState.mintB];\n  }\n}\n","import { struct, u8, Layout, blob } from '@solana/buffer-layout';\nimport { PublicKey, AccountInfo } from '@solana/web3.js';\nimport { u64 } from '@solana/spl-token';\nimport { publicKey, uint64 } from '../../utils/layout';\n\ninterface SenchaSwapLayout {\n  discriminator: any;\n  factory: PublicKey;\n  bump: number;\n  index: u64;\n  admin: PublicKey;\n  token0Reserves: PublicKey;\n  token0Mint: PublicKey;\n  token0Fees: PublicKey;\n  token1Reserves: PublicKey;\n  token1Mint: PublicKey;\n  token1Fees: PublicKey;\n  isPaused: number;\n  poolMint: PublicKey;\n  tradeFeeKbps: u64;\n  withdrawFeeKbps: u64;\n  adminTradeFeeKbps: u64;\n  adminWithdrawFeeKbps: u64;\n}\n\nexport const SenchaSwapLayout = struct<SenchaSwapLayout>([\n  blob(8, 'discriminator'),\n  publicKey('factory'),\n  u8('bump'),\n  uint64('index'),\n  publicKey('admin'),\n  publicKey('token0Reserves'),\n  publicKey('token0Mint'),\n  publicKey('token0Fees'),\n  publicKey('token1Reserves'),\n  publicKey('token1Mint'),\n  publicKey('token1Fees'),\n  u8('isPaused'),\n  publicKey('poolMint'),\n  uint64('tradeFeeKbps'),\n  uint64('withdrawFeeKbps'),\n  uint64('adminTradeFeeKbps'),\n  uint64('adminWithdrawFeeKbps'),\n]);\n\nexport interface SenchaPoolState {\n  programId: PublicKey;\n  isPaused: boolean;\n  bump: number;\n  ammId: PublicKey;\n  token0Reserves: PublicKey;\n  token1Reserves: PublicKey;\n  token0Mint: PublicKey;\n  token1Mint: PublicKey;\n  token0Fees: PublicKey;\n  token1Fees: PublicKey;\n  poolMint: PublicKey;\n  tradeFeeKbps: number;\n}\n\nexport const accountInfoToSenchaPoolState = (address: PublicKey, accountInfo: AccountInfo<Buffer>): SenchaPoolState => {\n  const programId = accountInfo.owner;\n  const decoded = SenchaSwapLayout.decode(accountInfo.data);\n\n  return {\n    programId,\n    isPaused: Boolean(decoded.isPaused),\n    bump: decoded.bump,\n    ammId: address,\n    token0Reserves: decoded.token0Reserves,\n    token1Reserves: decoded.token1Reserves,\n    token0Mint: decoded.token0Mint,\n    token1Mint: decoded.token1Mint,\n    token0Fees: decoded.token0Fees,\n    token1Fees: decoded.token1Fees,\n    poolMint: decoded.poolMint,\n    tradeFeeKbps: decoded.tradeFeeKbps.toNumber(),\n  };\n};\n","import { AccountInfo, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport {\n  AccountInfoMap,\n  Amm,\n  mapAddressToAccountInfos,\n  Quote,\n  QuoteParams,\n  tokenAccountsToJSBIs,\n  SwapParams,\n} from '../amm';\nimport { accountInfoToSenchaPoolState, SenchaPoolState } from './swapLayout';\nimport { AccountInfo as TokenAccountInfo } from '@solana/spl-token';\nimport { deserializeAccount } from '@mercurial-finance/optimist';\nimport { createSenchaSwapInstruction } from '../jupiterInstruction';\nimport { Fraction, TokenSwapConstantProduct, ZERO } from '@jup-ag/math';\nimport JSBI from 'jsbi';\n\nexport class SenchaAmm implements Amm {\n  id: string;\n  label = 'Sencha' as const;\n  shouldPrefetch = false;\n  exactOutputSupported = false;\n\n  poolState: SenchaPoolState;\n  private calculator: TokenSwapConstantProduct;\n  private tokenAccounts: TokenAccountInfo[] = [];\n\n  constructor(address: PublicKey, accountInfo: AccountInfo<Buffer>) {\n    this.id = address.toBase58();\n    this.poolState = accountInfoToSenchaPoolState(address, accountInfo);\n    this.calculator = new TokenSwapConstantProduct(\n      new Fraction(\n        JSBI.BigInt(this.poolState.tradeFeeKbps),\n        JSBI.BigInt(10000000), // 100% = 10000000kbps\n      ),\n      new Fraction(ZERO, ZERO),\n      false,\n    );\n  }\n\n  get isPaused() {\n    return this.poolState.isPaused;\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [this.poolState.token0Reserves, this.poolState.token1Reserves];\n  }\n\n  update(accountInfoMap: AccountInfoMap): void {\n    const tokenAccountInfos = mapAddressToAccountInfos(accountInfoMap, this.getAccountsForUpdate());\n\n    this.tokenAccounts = tokenAccountInfos.map((info) => {\n      const tokenAccount = deserializeAccount(info.data);\n      if (!tokenAccount) {\n        throw new Error('Invalid token account');\n      }\n      return tokenAccount;\n    });\n  }\n\n  getQuote({ sourceMint, amount }: QuoteParams): Quote {\n    if (this.tokenAccounts.length === 0) {\n      throw new Error('Unable to fetch accounts for specified tokens.');\n    }\n\n    const outputIndex = this.tokenAccounts[0].mint.equals(sourceMint) ? 1 : 0;\n    let result = this.calculator.exchange(tokenAccountsToJSBIs(this.tokenAccounts), amount, outputIndex);\n\n    let feePct = this.poolState.tradeFeeKbps / 10000000; // 100% kbps\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: result.expectedOutputAmount,\n      feeAmount: result.fees,\n      feeMint: sourceMint.toBase58(),\n      feePct,\n      priceImpactPct: result.priceImpact.toNumber(),\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams): TransactionInstruction[] {\n    return [\n      createSenchaSwapInstruction({\n        poolState: this.poolState,\n        ...swapParams,\n        inAmount: swapParams.amount,\n        minimumOutAmount: swapParams.otherAmountThreshold,\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.poolState.token0Mint, this.poolState.token1Mint];\n  }\n}\n","import { getCurveAmount, getParsedData, IAmmData, ICurveAmount, IPoolInfo, TradeDirection } from '@jup-ag/lifinity-sdk';\nimport { AccountInfo, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { AccountInfoMap, Amm, Quote, QuoteParams, SwapParams } from '../amm';\nimport { accountInfoLifinitySwapLayout, LifinitySwapLayoutState, swapStateToPoolInfo } from './swapLayout';\nimport { createLifinitySwapInstruction } from '../jupiterInstruction';\nimport Decimal from 'decimal.js';\nimport JSBI from 'jsbi';\n\nexport class LifinityAmm implements Amm {\n  id: string;\n  label = 'Lifinity' as const;\n  shouldPrefetch = false;\n  exactOutputSupported = false;\n\n  private swapState: LifinitySwapLayoutState;\n  private poolInfo: IPoolInfo;\n  private accountInfos: Array<{ publicKey: PublicKey; account: AccountInfo<Buffer> }> = [];\n\n  constructor(address: PublicKey, private ammAccountInfo: AccountInfo<Buffer>) {\n    this.id = address.toBase58();\n    this.swapState = accountInfoLifinitySwapLayout(address, ammAccountInfo);\n    this.poolInfo = swapStateToPoolInfo(this.swapState);\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [\n      this.swapState.poolCoinTokenAccount,\n      this.swapState.poolPcTokenAccount,\n      this.swapState.configAccount,\n      this.swapState.pythAccount,\n      this.swapState.pythPcAccount,\n    ];\n  }\n\n  update(accountInfoMap: AccountInfoMap): void {\n    this.getAccountsForUpdate().forEach((publicKey, idx) => {\n      const account = accountInfoMap.get(publicKey.toBase58());\n      if (account) {\n        this.accountInfos[idx] = {\n          publicKey,\n          account,\n        };\n      }\n    });\n  }\n\n  getQuote({ sourceMint, amount }: QuoteParams): Quote {\n    if (this.accountInfos.length !== this.getAccountsForUpdate().length) {\n      throw new Error('Accounts not loaded');\n    }\n\n    const tradeDirection = this.swapState.poolCoinMint.equals(sourceMint) ? TradeDirection.AtoB : TradeDirection.BtoA;\n    const { amm, pyth, pythPc, fees, coinBalance, pcBalance, config }: IAmmData = getParsedData(\n      [{ publicKey: this.swapState.amm, account: this.ammAccountInfo }, ...this.accountInfos],\n      this.poolInfo,\n    );\n\n    if (\n      !pyth.status.equals(1) ||\n      // pythPc can be undefined from the lifinity SDK\n      (pythPc && !pythPc.status.equals(1))\n    ) {\n      throw new Error('Pyth accounts are outdated');\n    }\n\n    const amountIn = new Decimal(amount.toString());\n    const result: ICurveAmount = getCurveAmount(\n      amountIn,\n      pyth.publishSlot.toNumber(), // Use pyth publish slot to not throw error\n      amm,\n      fees,\n      coinBalance,\n      pcBalance,\n      config,\n      pyth,\n      pythPc,\n      tradeDirection,\n    );\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: JSBI.BigInt(result.amountSwapped.toString()),\n      feeAmount: JSBI.BigInt(result.fee.ceil().toString()),\n      feeMint: sourceMint.toBase58(),\n      feePct: result.feePercent.toNumber(),\n      priceImpactPct: result.priceImpact.toNumber(),\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams): TransactionInstruction[] {\n    return [\n      createLifinitySwapInstruction({\n        swapState: this.swapState,\n        ...swapParams,\n        inAmount: swapParams.amount,\n        minimumOutAmount: swapParams.otherAmountThreshold,\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.swapState.poolCoinMint, this.swapState.poolPcMint];\n  }\n}\n","import { AccountInfo, PublicKey } from '@solana/web3.js';\nimport { findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { LIFINITY_AMM_LAYOUT, IPoolInfo } from '@jup-ag/lifinity-sdk';\n\nexport interface LifinitySwapLayoutState {\n  programId: PublicKey;\n  authority: PublicKey;\n  amm: PublicKey;\n  tokenAMint: PublicKey;\n  tokenBMint: PublicKey;\n  poolMint: PublicKey;\n  feeAccount: PublicKey;\n  pythAccount: PublicKey;\n  pythPcAccount: PublicKey;\n  configAccount: PublicKey;\n  poolCoinTokenAccount: PublicKey;\n  poolCoinMint: PublicKey;\n  poolPcTokenAccount: PublicKey;\n  poolPcMint: PublicKey;\n}\n\nexport const swapStateToPoolInfo = (state: LifinitySwapLayoutState): IPoolInfo => {\n  return {\n    amm: state.amm.toBase58(),\n    configAccount: state.configAccount.toBase58(),\n    feeAccount: state.feeAccount.toBase58(),\n    pythAccount: state.pythAccount.toBase58(),\n    pythPcAccount: state.pythPcAccount.toBase58(),\n    poolCoinMint: state.poolCoinMint.toBase58(),\n    poolCoinTokenAccount: state.poolCoinTokenAccount.toBase58(),\n    poolMint: state.poolMint.toBase58(),\n    poolPcTokenAccount: state.poolPcTokenAccount.toBase58(),\n    poolPcMint: state.poolPcMint.toBase58(),\n    // We don't use decimals at the moment, so default to 0, if we need to use it later, we can add it from API\n    poolCoinDecimal: 0,\n    poolPcDecimal: 0,\n    poolMintDecimal: 0,\n    pythBaseDecimal: 0,\n  };\n};\n\nexport const accountInfoLifinitySwapLayout = (\n  address: PublicKey,\n  accountInfo: AccountInfo<Buffer>,\n): LifinitySwapLayoutState => {\n  const programId = accountInfo.owner;\n  const decoded = LIFINITY_AMM_LAYOUT.decode(accountInfo.data);\n  const [authority] = findProgramAddressSync([address.toBuffer()], programId);\n\n  return {\n    programId,\n    authority,\n    amm: address,\n    tokenAMint: decoded.tokenAMint,\n    tokenBMint: decoded.tokenBMint,\n    poolMint: decoded.poolMint,\n    feeAccount: decoded.poolFeeAccount,\n    pythAccount: decoded.pythAccount,\n    pythPcAccount: decoded.pythPcAccount,\n    configAccount: decoded.configAccount,\n    poolCoinTokenAccount: decoded.tokenAAccount,\n    poolCoinMint: decoded.tokenAMint,\n    poolPcTokenAccount: decoded.tokenBAccount,\n    poolPcMint: decoded.tokenBMint,\n  };\n};\n","import { AccountInfo, PublicKey } from '@solana/web3.js';\nimport Decimal from 'decimal.js';\nimport { AccountInfoMap, Amm, SwapMode, Quote, QuoteParams, SwapParams } from '../amm';\nimport { createWhirlpoolSwapInstruction, createWhirlpoolSwapExactOutputInstruction } from '../jupiterInstruction';\nimport { findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { WHIRLPOOL_PROGRAM_ID } from '../../constants';\nimport {\n  parseWhirlpool,\n  parseTickArray,\n  WhirlpoolData,\n  getSwapQuote,\n  getTickArrayPks,\n  TickArrayData,\n  getTickArrayPublicKeysForSwap,\n  getDefaultSqrtPriceLimit,\n} from '@jup-ag/whirlpool-sdk';\nimport BN from 'bn.js';\nimport JSBI from 'jsbi';\n\nconst FEE_RATE_MUL_VALUE = 1_000_000;\n\nfunction fromX64(num: BN): Decimal {\n  return new Decimal(num.toString()).mul(Decimal.pow(2, -64));\n}\n\nfunction parseWhirlpoolSafe(address: PublicKey, data: Buffer) {\n  const whirlpoolData = parseWhirlpool(data);\n  if (!whirlpoolData) throw new Error(`Failed to parse whirlpool ${address.toBase58()}`);\n  return whirlpoolData;\n}\n\nexport class WhirlpoolAmm implements Amm {\n  id: string;\n  label = 'Orca (Whirlpools)';\n  shouldPrefetch = true;\n  exactOutputSupported = true;\n\n  private whirlpoolData: WhirlpoolData;\n  private tickArrays: Map<string, TickArrayData> = new Map();\n  private tickPks: PublicKey[];\n  private oracle: PublicKey;\n  private feePct: Decimal;\n\n  constructor(private address: PublicKey, whirlpoolAccountInfo: AccountInfo<Buffer>) {\n    this.id = address.toBase58();\n    this.whirlpoolData = parseWhirlpoolSafe(address, whirlpoolAccountInfo.data);\n\n    this.oracle = findProgramAddressSync([Buffer.from('oracle'), address.toBuffer()], WHIRLPOOL_PROGRAM_ID)[0];\n    this.feePct = new Decimal(this.whirlpoolData.feeRate).div(FEE_RATE_MUL_VALUE);\n    this.tickPks = getTickArrayPks(address, this.whirlpoolData);\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    // The tickCurrentIndex is technically behind here, belonging to the last refresh\n    return [this.address, ...this.tickPks];\n  }\n\n  update(accountInfoMap: AccountInfoMap): void {\n    const whirlpoolAccountInfo = accountInfoMap.get(this.address.toBase58());\n    if (!whirlpoolAccountInfo) throw new Error(`Missing ${this.address.toBase58()}`);\n    this.whirlpoolData = parseWhirlpoolSafe(this.address, whirlpoolAccountInfo.data);\n    this.tickPks = getTickArrayPks(this.address, this.whirlpoolData);\n\n    this.tickArrays.clear();\n    for (const tickArrayPk of this.tickPks) {\n      const tickArrayAddress = tickArrayPk.toBase58();\n      const tickArrayAccountInfo = accountInfoMap.get(tickArrayAddress);\n      if (!tickArrayAccountInfo) {\n        // This can happen if we reach an uninitialized tick, and it is likely to occur right now\n        continue;\n      }\n      const tickArray = parseTickArray(tickArrayAccountInfo.data);\n      if (!tickArray) throw new Error(`Could not parse tick array ${tickArrayAddress}`);\n      this.tickArrays.set(tickArrayAddress, tickArray);\n    }\n  }\n\n  getQuote({ sourceMint, destinationMint, amount, swapMode }: QuoteParams): Quote {\n    const swapQuote = getSwapQuote({\n      poolAddress: this.address,\n      whirlpool: this.whirlpoolData,\n      tickArrays: this.tickArrays,\n      tokenMint: swapMode === SwapMode.ExactIn ? sourceMint : destinationMint,\n      tokenAmount: new BN(amount.toString()),\n      isInput: swapMode === SwapMode.ExactIn,\n    });\n\n    const inAmount = JSBI.BigInt(swapQuote.amountIn.toString());\n    const outAmount = JSBI.BigInt(swapQuote.amountOut.toString());\n    const feeAmount = JSBI.BigInt(this.feePct.mul(inAmount.toString()).floor().toString());\n    const quotePrice = swapQuote.aToB\n      ? new Decimal(swapQuote.amountOut.toString()).div(swapQuote.amountIn.toString())\n      : new Decimal(swapQuote.amountIn.toString()).div(swapQuote.amountOut.toString());\n\n    const currentPrice = fromX64(this.whirlpoolData.sqrtPrice).pow(2);\n    const priceImpactPct = currentPrice.minus(quotePrice).div(currentPrice).abs().toNumber();\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount,\n      outAmount,\n      feeAmount,\n      feeMint: sourceMint.toBase58(),\n      feePct: this.feePct.toNumber(),\n      priceImpactPct: Number(priceImpactPct),\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams) {\n    const aToB = swapParams.sourceMint.equals(this.whirlpoolData.tokenMintA);\n    const targetSqrtPrice = getDefaultSqrtPriceLimit(aToB);\n    const [tickArray0, tickArray1, tickArray2] = getTickArrayPublicKeysForSwap(\n      this.whirlpoolData.tickCurrentIndex,\n      targetSqrtPrice,\n      this.whirlpoolData.tickSpacing,\n      this.address,\n      this.tickArrays,\n      WHIRLPOOL_PROGRAM_ID,\n      aToB,\n    );\n\n    const ix =\n      swapParams.swapMode === SwapMode.ExactIn\n        ? createWhirlpoolSwapInstruction({\n            additionalArgs: {\n              aToB,\n              whirlpool: this.address,\n              tickArray0,\n              tickArray1,\n              tickArray2,\n              oracle: this.oracle,\n              ...this.whirlpoolData,\n            },\n            ...swapParams,\n            inAmount: swapParams.amount,\n            minimumOutAmount: swapParams.otherAmountThreshold,\n          })\n        : (() => {\n            if (swapParams.amount === null) throw Error('amount cannot be null with exact output');\n\n            return createWhirlpoolSwapExactOutputInstruction({\n              additionalArgs: {\n                aToB,\n                whirlpool: this.address,\n                tickArray0,\n                tickArray1,\n                tickArray2,\n                oracle: this.oracle,\n                ...this.whirlpoolData,\n              },\n              ...swapParams,\n              outAmount: swapParams.amount,\n              maximumInAmount: swapParams.otherAmountThreshold,\n            });\n          })();\n\n    return [ix];\n  }\n\n  get reserveTokenMints() {\n    return [this.whirlpoolData.tokenMintA, this.whirlpoolData.tokenMintB];\n  }\n}\n","// TODO: Move this to SDK rather than being maintained by us\nimport {\n  CyclosCore,\n  buildTick,\n  generateBitmapWord,\n  nextInitializedBit,\n  tickPosition,\n  TickDataProvider,\n  PoolVars,\n  TICK_SEED,\n  u32ToSeed,\n  BITMAP_SEED,\n  TickMath,\n  u16ToSeed,\n} from '@jup-ag/cykura-sdk';\nimport * as anchor from '@project-serum/anchor';\nimport { BN, IdlAccounts } from '@project-serum/anchor';\nimport { findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { AccountInfo, PublicKey } from '@solana/web3.js';\nimport JSBI from 'jsbi';\n\nexport type TickBitmapState = IdlAccounts<CyclosCore>['tickBitmapState'];\nexport type TickState = IdlAccounts<CyclosCore>['tickState'];\n\nexport class SolanaTickDataProvider implements TickDataProvider {\n  program: anchor.Program<CyclosCore>;\n  pool: PoolVars;\n\n  bitmapCache: Map<\n    number,\n    {\n      address: PublicKey;\n      word: anchor.BN;\n    }\n  >;\n\n  tickCache: Map<\n    number,\n    {\n      address: PublicKey;\n      liquidityNet: JSBI;\n    }\n  >;\n\n  accountsToFetch: { bitmaps: PublicKey[]; ticks: PublicKey[] } = { bitmaps: [], ticks: [] };\n\n  constructor(program: anchor.Program<CyclosCore>, pool: PoolVars) {\n    this.program = program;\n    this.pool = pool;\n    this.bitmapCache = new Map();\n    this.tickCache = new Map();\n  }\n\n  /**\n   * Caches ticks and bitmap accounts near the current price\n   * @param tickCurrent The current pool tick\n   * @param tickSpacing The pool tick spacing\n   */\n  async eagerLoadCache(tickCurrent: number, tickSpacing: number) {\n    // fetch 10 bitmaps on each side in a single fetch. Find active ticks and read them together\n    const compressed = JSBI.toNumber(JSBI.divide(JSBI.BigInt(tickCurrent), JSBI.BigInt(tickSpacing)));\n    const { wordPos } = tickPosition(compressed);\n\n    try {\n      const bitmapsToFetch = [];\n      const { wordPos: WORD_POS_MIN } = tickPosition(Math.floor(TickMath.MIN_TICK / tickSpacing));\n      const { wordPos: WORD_POS_MAX } = tickPosition(Math.floor(TickMath.MAX_TICK / tickSpacing));\n      const minWord = Math.max(wordPos - 10, WORD_POS_MIN);\n      const maxWord = Math.min(wordPos + 10, WORD_POS_MAX);\n      for (let i = minWord; i < maxWord; i++) {\n        bitmapsToFetch.push(this.getBitmapAddressSync(i));\n      }\n\n      const fetchedBitmaps = (await this.program.account.tickBitmapState.fetchMultiple(\n        bitmapsToFetch,\n      )) as (TickBitmapState | null)[];\n\n      const tickAddresses = [];\n      for (let i = 0; i < maxWord - minWord; i++) {\n        const currentWordPos = i + minWord;\n        const wordArray = fetchedBitmaps[i]?.word;\n        const word = wordArray ? generateBitmapWord(wordArray) : new BN(0);\n        this.bitmapCache.set(currentWordPos, {\n          address: bitmapsToFetch[i],\n          word,\n        });\n        if (word && !word.eqn(0)) {\n          for (let j = 0; j < 256; j++) {\n            if (word.shrn(j).and(new BN(1)).eqn(1)) {\n              const tick = ((currentWordPos << 8) + j) * tickSpacing;\n              const tickAddress = this.getTickAddressSync(tick);\n              tickAddresses.push(tickAddress);\n            }\n          }\n        }\n      }\n\n      const fetchedTicks = (await this.program.account.tickState.fetchMultiple(tickAddresses)) as (TickState | null)[];\n      for (const i in tickAddresses) {\n        const fetchedTick = fetchedTicks[i];\n        if (!fetchedTick) continue;\n\n        const { tick, liquidityNet } = fetchedTick;\n        this.tickCache.set(tick, {\n          address: tickAddresses[i],\n          liquidityNet: JSBI.BigInt(liquidityNet),\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  /**\n   * Return accounts to cache and returns early if there is insufficient data\n   * @param tickCurrent The current pool tick\n   * @param tickSpacing The pool tick spacing\n   */\n  lazyLoadAccountsToCache(tickCurrent: number, tickSpacing: number): PublicKey[] {\n    // fetch 10 bitmaps on each side in a single fetch. Find active ticks and read them together\n    const compressed = JSBI.toNumber(JSBI.divide(JSBI.BigInt(tickCurrent), JSBI.BigInt(tickSpacing)));\n    const { wordPos } = tickPosition(compressed);\n\n    const bitmapsToFetch: PublicKey[] = [];\n    const bitmaps: ({ address: PublicKey; word: anchor.BN } | undefined)[] = [];\n    const { wordPos: WORD_POS_MIN } = tickPosition(Math.floor(TickMath.MIN_TICK / tickSpacing));\n    const { wordPos: WORD_POS_MAX } = tickPosition(Math.floor(TickMath.MAX_TICK / tickSpacing));\n    const minWord = Math.max(wordPos - 10, WORD_POS_MIN);\n    const maxWord = Math.min(wordPos + 10, WORD_POS_MAX);\n    for (let i = minWord; i < maxWord; i++) {\n      bitmapsToFetch.push(this.getBitmapAddressSync(i));\n      const bitmap = this.bitmapCache.get(i);\n      bitmaps.push(bitmap);\n    }\n\n    const tickAddressesToFetch = [];\n    for (let i = 0; i < maxWord - minWord; i++) {\n      const currentWordPos = i + minWord;\n      // We might not have the bitmap yet in the first iteration\n      const word = bitmaps[i]?.word ?? new BN(0);\n      this.bitmapCache.set(currentWordPos, {\n        address: bitmapsToFetch[i],\n        word,\n      });\n      if (word && !word.eqn(0)) {\n        for (let j = 0; j < 256; j++) {\n          if (word.shrn(j).and(new BN(1)).eqn(1)) {\n            const tick = ((currentWordPos << 8) + j) * tickSpacing;\n            const tickAddress = this.getTickAddressSync(tick);\n            tickAddressesToFetch.push(tickAddress);\n          }\n        }\n      }\n    }\n\n    this.accountsToFetch = { bitmaps: bitmapsToFetch, ticks: tickAddressesToFetch };\n    return [...bitmapsToFetch, ...tickAddressesToFetch];\n  }\n\n  getTick(tick: number): {\n    address: anchor.web3.PublicKey;\n    liquidityNet: JSBI;\n  } {\n    let savedTick = this.tickCache.get(tick);\n    if (!savedTick) {\n      throw new Error('Tick not cached');\n    }\n\n    return {\n      address: savedTick.address,\n      liquidityNet: savedTick.liquidityNet,\n    };\n  }\n\n  async getTickAddress(tick: number): Promise<anchor.web3.PublicKey> {\n    return this.getTickAddressSync(tick);\n  }\n\n  getTickAddressSync(tick: number): anchor.web3.PublicKey {\n    return findProgramAddressSync(\n      [TICK_SEED, this.pool.token0.toBuffer(), this.pool.token1.toBuffer(), u32ToSeed(this.pool.fee), u32ToSeed(tick)],\n      this.program.programId,\n    )[0];\n  }\n\n  async getBitmapAddress(wordPos: number): Promise<anchor.web3.PublicKey> {\n    return this.getBitmapAddressSync(wordPos);\n  }\n\n  getBitmapAddressSync(wordPos: number): anchor.web3.PublicKey {\n    return findProgramAddressSync(\n      [\n        BITMAP_SEED,\n        this.pool.token0.toBuffer(),\n        this.pool.token1.toBuffer(),\n        u32ToSeed(this.pool.fee),\n        u16ToSeed(wordPos),\n      ],\n      this.program.programId,\n    )[0];\n  }\n\n  /**\n   * Fetches the cached bitmap for the word\n   * @param wordPos\n   */\n  getBitmap(wordPos: number): {\n    address: anchor.web3.PublicKey;\n    word: anchor.BN;\n  } {\n    let savedBitmap = this.bitmapCache.get(wordPos);\n    if (!savedBitmap) {\n      throw new Error('Bitmap not cached');\n    }\n\n    return savedBitmap;\n  }\n\n  /**\n   * Finds the next initialized tick in the given word. Fetched bitmaps are saved in a\n   * cache for quicker lookups in future.\n   * @param tick The current tick\n   * @param lte Whether to look for a tick less than or equal to the current one, or a tick greater than or equal to\n   * @param tickSpacing The tick spacing for the pool\n   * @returns\n   */\n  nextInitializedTickWithinOneWord(\n    tick: number,\n    lte: boolean,\n    tickSpacing: number,\n  ): [number, boolean, number, number, PublicKey] {\n    let compressed = JSBI.toNumber(JSBI.divide(JSBI.BigInt(tick), JSBI.BigInt(tickSpacing)));\n    if (tick < 0 && tick % tickSpacing !== 0) {\n      compressed -= 1;\n    }\n    if (!lte) {\n      compressed += 1;\n    }\n\n    const { wordPos, bitPos } = tickPosition(compressed);\n    const cachedBitmap = this.getBitmap(wordPos);\n\n    const { next: nextBit, initialized } = nextInitializedBit(cachedBitmap.word, bitPos, lte);\n    const nextTick = buildTick(wordPos, nextBit, tickSpacing);\n    return [nextTick, initialized, wordPos, bitPos, cachedBitmap.address];\n  }\n\n  // Change this to be a blind decoder rather than decode what we know\n  updateCachedAccountInfos(accountInfoMap: Map<string, AccountInfo<Buffer> | null>) {\n    for (const bitmapAddress of this.accountsToFetch.bitmaps) {\n      const bitmapAccountInfo = accountInfoMap.get(bitmapAddress.toBase58());\n      if (bitmapAccountInfo) {\n        const tickBitmapState = this.program.coder.accounts.decode<TickBitmapState>(\n          'tickBitmapState',\n          bitmapAccountInfo.data,\n        );\n\n        this.bitmapCache.set(tickBitmapState.wordPos, {\n          address: bitmapAddress,\n          word: generateBitmapWord(tickBitmapState.word),\n        });\n      }\n    }\n\n    for (const tickAddress of this.accountsToFetch.ticks) {\n      const tickStateAccountInfo = accountInfoMap.get(tickAddress.toBase58());\n      if (tickStateAccountInfo) {\n        const tickState = this.program.coder.accounts.decode<TickState>('tickState', tickStateAccountInfo.data);\n        this.tickCache.set(tickState.tick, {\n          address: tickAddress,\n          liquidityNet: JSBI.BigInt(tickState.liquidityNet),\n        });\n      }\n    }\n  }\n}\n","import { AccountInfo, AccountMeta, Connection, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport JSBI from 'jsbi';\nimport * as anchor from '@project-serum/anchor';\nimport { AccountInfoMap, Amm, Quote, QuoteParams, SwapParams } from '../amm';\nimport { Pool as CykuraPool, CyclosCore, IDL, OBSERVATION_SEED, u32ToSeed, u16ToSeed } from '@jup-ag/cykura-sdk';\nimport { CurrencyAmount, Token } from '@jup-ag/cykura-sdk-core';\nimport { IdlAccounts, Wallet } from '@project-serum/anchor';\nimport { SolanaTickDataProvider } from './solanaTickDataProvider';\nimport { CYKURA_PROGRAM_ID } from '../../constants';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { createCykuraSwapInstruction } from '../jupiterInstruction';\nimport { toDecimal } from '@jup-ag/math';\n\nexport type PoolState = IdlAccounts<CyclosCore>['poolState'];\n\nconst FEE_DENOMINATOR = JSBI.BigInt(1_000_000);\n\nconst provider = new anchor.AnchorProvider(null as unknown as Connection, null as unknown as Wallet, {\n  skipPreflight: false,\n});\nconst CYCLOS_CORE = new anchor.Program<CyclosCore>(IDL, CYKURA_PROGRAM_ID, provider);\n\nexport class CykuraAmm implements Amm {\n  label = 'Cykura' as const;\n  id: string;\n  shouldPrefetch = true;\n  exactOutputSupported = false;\n\n  private poolState: PoolState;\n  private pool: CykuraPool;\n  private tickDataProvider: SolanaTickDataProvider;\n  private tokens: { token0: Token; token1: Token };\n  public vaults: { vault0: PublicKey; vault1: PublicKey };\n  private feePct: number;\n  private fee: JSBI;\n\n  constructor(private address: PublicKey, accountInfoOrPoolState: AccountInfo<Buffer> | PoolState) {\n    this.id = address.toBase58();\n    let poolState: PoolState;\n    if ('data' in accountInfoOrPoolState) {\n      poolState = CYCLOS_CORE.coder.accounts.decode<PoolState>('poolState', accountInfoOrPoolState.data);\n    } else {\n      poolState = accountInfoOrPoolState;\n    }\n\n    this.poolState = poolState;\n\n    const { token0, token1, fee, sqrtPriceX32, liquidity, tick } = this.poolState;\n\n    this.tickDataProvider = new SolanaTickDataProvider(CYCLOS_CORE, {\n      token0,\n      token1,\n      fee,\n    });\n\n    this.tokens = {\n      token0: new Token(101, token0, 0, '', ''),\n      token1: new Token(101, token1, 0, '', ''),\n    };\n\n    this.pool = new CykuraPool(\n      this.tokens.token0,\n      this.tokens.token1,\n      fee,\n      JSBI.BigInt(sqrtPriceX32.toString()),\n      JSBI.BigInt(liquidity.toString()),\n      tick,\n      this.tickDataProvider,\n    );\n\n    this.vaults = {\n      vault0: findProgramAddressSync(\n        [this.address.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), token0.toBuffer()],\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n      )[0],\n      vault1: findProgramAddressSync(\n        [this.address.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), token1.toBuffer()],\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n      )[0],\n    };\n\n    this.fee = JSBI.BigInt(this.poolState.fee);\n    this.feePct = this.poolState.fee / JSBI.toNumber(FEE_DENOMINATOR);\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [\n      this.address,\n      ...this.tickDataProvider.lazyLoadAccountsToCache(this.pool.tickCurrent, this.pool.tickSpacing),\n    ];\n  }\n\n  update(accountInfoMap: AccountInfoMap) {\n    const poolAccountInfo = accountInfoMap.get(this.address.toBase58());\n    if (!poolAccountInfo) {\n      throw new Error(`Could not find poolAccountInfo ${this.address.toBase58()}`);\n    }\n    this.poolState = CYCLOS_CORE.coder.accounts.decode<PoolState>('poolState', poolAccountInfo.data);\n    const { fee, sqrtPriceX32, liquidity, tick } = this.poolState;\n    this.pool = new CykuraPool(\n      this.tokens.token0,\n      this.tokens.token1,\n      fee,\n      JSBI.BigInt(sqrtPriceX32.toString()),\n      JSBI.BigInt(liquidity.toString()),\n      tick,\n      this.tickDataProvider,\n    );\n\n    this.tickDataProvider.updateCachedAccountInfos(accountInfoMap);\n  }\n\n  getQuote({ sourceMint, amount }: QuoteParams): Quote {\n    const inputToken = sourceMint.equals(this.poolState.token0) ? this.tokens.token0 : this.tokens.token1;\n    const [currentOutAmount, newPool, swapAccountMetas] = this.pool.getOutputAmount(\n      CurrencyAmount.fromRawAmount(inputToken, amount),\n    );\n\n    const priceImpactDecimal = toDecimal(JSBI.subtract(this.pool.sqrtRatioX32, newPool.sqrtRatioX32)).div(\n      this.pool.sqrtRatioX32.toString(),\n    );\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: currentOutAmount.quotient,\n      // Might not be spot on but avoids many conversions\n      feeAmount: JSBI.divide(JSBI.multiply(amount, this.fee), FEE_DENOMINATOR),\n      feeMint: sourceMint.toBase58(),\n      feePct: this.feePct,\n      priceImpactPct: priceImpactDecimal.toNumber(),\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams): TransactionInstruction[] {\n    const [inputVault, outputVault] = swapParams.sourceMint.equals(this.poolState.token0)\n      ? [this.vaults.vault0, this.vaults.vault1]\n      : [this.vaults.vault1, this.vaults.vault0];\n\n    const lastObservationState = findProgramAddressSync(\n      [\n        OBSERVATION_SEED,\n        this.poolState.token0.toBuffer(),\n        this.poolState.token1.toBuffer(),\n        u32ToSeed(this.poolState.fee),\n        u16ToSeed(this.poolState.observationIndex),\n      ],\n      CYKURA_PROGRAM_ID,\n    )[0];\n\n    const inputToken = swapParams.sourceMint.equals(this.poolState.token0) ? this.tokens.token0 : this.tokens.token1;\n\n    const [, , swapAccountMetas] = this.pool.getOutputAmount(\n      CurrencyAmount.fromRawAmount(inputToken, swapParams.inAmount),\n    );\n\n    const nextObservationState = findProgramAddressSync(\n      [\n        OBSERVATION_SEED,\n        this.poolState.token0.toBuffer(),\n        this.poolState.token1.toBuffer(),\n        u32ToSeed(this.poolState.fee),\n        u16ToSeed((this.poolState.observationIndex + 1) % this.poolState.observationCardinalityNext),\n      ],\n      CYKURA_PROGRAM_ID,\n    )[0];\n\n    const additionalArgs = {\n      poolAddress: this.address,\n      inputVault,\n      outputVault,\n      nextObservationState,\n      lastObservationState,\n      swapAccountMetas: swapAccountMetas,\n    };\n    return [\n      createCykuraSwapInstruction({\n        ...swapParams,\n        inAmount: swapParams.amount,\n        minimumOutAmount: swapParams.otherAmountThreshold,\n        additionalArgs,\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.poolState.token0, this.poolState.token1];\n  }\n}\n","import BN from 'bn.js';\n\n/**\n * Compute a linear fee base on liquidity amount.\n * fee(0) = max fee -> fee(x >= target) = min fee\n *\n * @param {number} lpMinFeeBasisPoints\n * @param {number} lpMaxFeeBasisPoints\n * @param {BN} lpLiquidityTarget\n * @param {BN} lamportsAvailable\n * @param {BN} lamportsToObtain\n */\nexport function unstakeNowFeeBp(\n  lpMinFeeBasisPoints: number,\n  lpMaxFeeBasisPoints: number,\n  lpLiquidityTarget: BN,\n  lamportsAvailable: BN,\n  lamportsToObtain: BN,\n): number {\n  // if trying to get more than existing\n  if (lamportsToObtain.gte(lamportsAvailable)) {\n    return lpMaxFeeBasisPoints;\n  }\n  // result after operation\n  const lamportsAfter = lamportsAvailable.sub(lamportsToObtain);\n  // if GTE target => min fee\n  if (lamportsAfter.gte(lpLiquidityTarget)) {\n    return lpMinFeeBasisPoints;\n  } else {\n    const delta = lpMaxFeeBasisPoints - lpMinFeeBasisPoints;\n    return lpMaxFeeBasisPoints - proportionalBN(new BN(delta), lamportsAfter, lpLiquidityTarget).toNumber();\n  }\n}\n\n/**\n * Returns `amount` * `numerator` / `denominator`.\n * BN library we use does not handle fractions, so the value is `floored`\n *\n * @param {BN} amount\n * @param {BN} numerator\n * @param {BN} denominator\n */\nexport function proportionalBN(amount: BN, numerator: BN, denominator: BN): BN {\n  if (denominator.isZero()) {\n    return amount;\n  }\n  return amount.mul(numerator).div(denominator);\n}\n","import { AccountInfo, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { AccountInfoMap, Amm, mapAddressToAccountInfos, Quote, QuoteParams, SwapParams } from '../amm';\nimport {\n  createMarinadeFinanceDepositInstruction,\n  createMarinadeFinanceLiquidUnstakeInstruction,\n} from '../jupiterInstruction';\nimport { deserializeAccount } from '@mercurial-finance/optimist';\nimport { NATIVE_MINT } from '@solana/spl-token';\nimport BN from 'bn.js';\nimport { Idl, Program } from '@project-serum/anchor';\nimport * as marinadeFinanceIdlSchema from './idl/marinade-finance-idl.json';\nimport { MarinadeStateResponse, ProgramDerivedAddressSeed } from './marinade-state.types';\nimport { findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { proportionalBN, unstakeNowFeeBp } from './helpers';\nimport { MARINADE_PROGRAM_ID } from '../../constants';\nimport JSBI from 'jsbi';\n\nexport class MarinadeAmm implements Amm {\n  address: PublicKey;\n  id: string;\n  label = 'Marinade';\n  shouldPrefetch = true; // Pricing is very state dependent and using stale data will lead to a stale quote\n  exactOutputSupported = false;\n\n  marinadeFinanceProgram: Program;\n  marinadeStateResponse: MarinadeStateResponse;\n  liqPoolSolLegPdaAddress: PublicKey;\n  marinadeState: MarinadeState | undefined;\n\n  constructor(address: PublicKey, accountInfo: AccountInfo<Buffer>) {\n    this.id = address.toBase58();\n    this.marinadeFinanceProgram = new Program(marinadeFinanceIdlSchema as Idl, MARINADE_PROGRAM_ID, {} as any);\n    this.marinadeStateResponse = this.marinadeFinanceProgram.coder.accounts.decode('State', accountInfo.data);\n    this.address = address;\n\n    this.liqPoolSolLegPdaAddress = this.findProgramDerivedAddress(ProgramDerivedAddressSeed.LIQ_POOL_SOL_ACCOUNT);\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [this.address, this.liqPoolSolLegPdaAddress, this.marinadeStateResponse.liqPool.msolLeg];\n  }\n\n  update(accountInfoMap: AccountInfoMap) {\n    const [stateAccountInfo, liqPoolSolLegPda, liqPoolMSOLLegAccountInfo] = mapAddressToAccountInfos(\n      accountInfoMap,\n      this.getAccountsForUpdate(),\n    );\n\n    this.marinadeStateResponse = this.marinadeFinanceProgram.coder.accounts.decode('State', stateAccountInfo.data);\n    const liqPoolMSOLLeg = deserializeAccount(liqPoolMSOLLegAccountInfo.data);\n    if (!liqPoolMSOLLeg)\n      throw new Error(\n        `liqPoolMSOLLeg token account cannot be deserialized ${this.marinadeStateResponse.liqPool.msolLeg.toBase58()}`,\n      );\n\n    this.marinadeState = new MarinadeState(\n      this.marinadeStateResponse,\n      new BN(liqPoolSolLegPda.lamports),\n      liqPoolMSOLLeg.amount,\n    );\n  }\n\n  getQuote({ sourceMint, amount }: QuoteParams): Quote {\n    if (!this.marinadeState) throw new Error('Update was not run to create a complete marinadeState');\n\n    const amountBN = new BN(amount.toString());\n    const result = sourceMint.equals(NATIVE_MINT)\n      ? this.marinadeState.depositQuote(amountBN)\n      : this.marinadeState.liquidUnstakeQuote(amountBN);\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: JSBI.BigInt(result.outAmount.toString()),\n      feeAmount: JSBI.BigInt(result.feeAmount.toString()),\n      feeMint: this.marinadeStateResponse.msolMint.toBase58(),\n      feePct: result.feePct,\n      priceImpactPct: 0,\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams): TransactionInstruction[] {\n    return [\n      swapParams.sourceMint.equals(NATIVE_MINT)\n        ? createMarinadeFinanceDepositInstruction({\n            ...swapParams,\n            additionalArgs: {\n              address: this.address,\n              marinadeStateResponse: this.marinadeStateResponse,\n              liqPoolSolLegPda: this.liqPoolSolLegPdaAddress,\n              liqPoolMsolLegAuthority: this.findProgramDerivedAddress(\n                ProgramDerivedAddressSeed.LIQ_POOL_MSOL_AUTHORITY,\n              ),\n              reservePda: this.findProgramDerivedAddress(ProgramDerivedAddressSeed.RESERVE_ACCOUNT),\n              msolMintAuthority: this.findProgramDerivedAddress(ProgramDerivedAddressSeed.LIQ_POOL_MSOL_MINT_AUTHORITY),\n            },\n            inAmount: swapParams.amount,\n            minimumOutAmount: swapParams.otherAmountThreshold,\n          })\n        : createMarinadeFinanceLiquidUnstakeInstruction({\n            ...swapParams,\n            additionalArgs: {\n              address: this.address,\n              marinadeStateResponse: this.marinadeStateResponse,\n              liqPoolSolLegPda: this.liqPoolSolLegPdaAddress,\n            },\n            inAmount: swapParams.amount,\n            minimumOutAmount: swapParams.otherAmountThreshold,\n          }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [NATIVE_MINT, this.marinadeStateResponse.msolMint];\n  }\n\n  private findProgramDerivedAddress(seed: ProgramDerivedAddressSeed, extraSeeds: Buffer[] = []): PublicKey {\n    const seeds = [this.address.toBuffer(), Buffer.from(seed), ...extraSeeds];\n    const [result] = findProgramAddressSync(seeds, this.marinadeFinanceProgram.programId);\n    return result;\n  }\n}\n\nclass MarinadeState {\n  constructor(\n    private state: MarinadeStateResponse,\n    private liqPoolSolLegPdaLamports: BN,\n    private liqPoolMSOLLegAmount: BN,\n  ) {}\n\n  // https://github.com/marinade-finance/liquid-staking-program/blob/main/programs/marinade-finance/src/state/deposit.rs#L61-L170\n  depositQuote(lamports: BN) {\n    let userLamports = lamports;\n    const userMSOLBuyOrder = this.calcMSOLFromLamports(userLamports);\n    const swapMSOLMax = BN.min(userMSOLBuyOrder, this.liqPoolMSOLLegAmount);\n\n    let outAmountBN = new BN(0);\n\n    // if we can sell from the LiqPool\n    userLamports = (() => {\n      if (swapMSOLMax.gt(new BN(0))) {\n        const lamportsForTheLiqPool = userMSOLBuyOrder.eq(swapMSOLMax)\n          ? userLamports\n          : this.calcLamportsFromMSOLAmount(swapMSOLMax);\n\n        // transfered mSOL to the user\n        outAmountBN = outAmountBN.add(swapMSOLMax);\n\n        return saturatingSub(userLamports, lamportsForTheLiqPool);\n      } else {\n        return userLamports;\n      }\n    })();\n\n    // check if we have more lamports from the user\n    if (userLamports.gt(new BN(0))) {\n      this.checkStakingCap(userLamports);\n      const MSOLToMint = this.calcMSOLFromLamports(userLamports);\n      outAmountBN = outAmountBN.add(MSOLToMint);\n    }\n\n    return {\n      outAmount: outAmountBN,\n      feeAmount: 0,\n      feePct: 0,\n      priceImpactPct: 0,\n    };\n  }\n\n  private checkStakingCap(transferingLamports: BN) {\n    const resultAmount = this.totalLamportsUnderControl().add(transferingLamports);\n\n    if (resultAmount.gt(this.state.stakingSolCap)) throw new Error('Staking cap reached');\n  }\n\n  private calcMSOLFromLamports(stakeLamports: BN) {\n    return sharesFromValue(stakeLamports, this.totalVirtualStakedLamports(), this.state.msolSupply);\n  }\n\n  private calcLamportsFromMSOLAmount(msolAmount: BN) {\n    return valueFromShares(msolAmount, this.totalVirtualStakedLamports(), this.state.msolSupply);\n  }\n\n  private totalVirtualStakedLamports() {\n    return saturatingSub(this.totalLamportsUnderControl(), this.state.circulatingTicketBalance);\n  }\n\n  private totalLamportsUnderControl() {\n    return this.state.validatorSystem.totalActiveBalance\n      .add(this.totalCoolingDown())\n      .add(this.state.availableReserveBalance);\n  }\n\n  private totalCoolingDown() {\n    return this.state.stakeSystem.delayedUnstakeCoolingDown.add(this.state.emergencyCoolingDown);\n  }\n\n  // https://github.com/marinade-finance/liquid-staking-program/blob/main/programs/marinade-finance/src/state/liquid_unstake.rs#L68-L171\n  liquidUnstakeQuote(msolAmount: BN) {\n    const maxLamports = saturatingSub(this.liqPoolSolLegPdaLamports, this.state.rentExemptForTokenAcc);\n\n    const lamportsToObtain = this.calcLamportsFromMSOLAmount(msolAmount);\n    const liquidUnstakeFeeBp = unstakeNowFeeBp(\n      this.state.liqPool.lpMinFee.basisPoints,\n      this.state.liqPool.lpMaxFee.basisPoints,\n      this.state.liqPool.lpLiquidityTarget,\n      maxLamports,\n      lamportsToObtain,\n    );\n\n    const msolFee = msolAmount.mul(new BN(liquidUnstakeFeeBp)).div(new BN(10_000));\n    const workingLamportsValue = this.calcLamportsFromMSOLAmount(msolAmount.sub(msolFee));\n    if (workingLamportsValue.add(this.state.rentExemptForTokenAcc).gt(this.liqPoolSolLegPdaLamports))\n      throw new Error('Insufficient liquidity');\n\n    return {\n      outAmount: workingLamportsValue,\n      feeAmount: msolFee,\n      feePct: liquidUnstakeFeeBp / 10_000,\n      priceImpactPct: 0,\n    };\n  }\n}\nfunction valueFromShares(shares: BN, totalValue: BN, totalShares: BN) {\n  return proportionalBN(shares, totalValue, totalShares);\n}\n\nfunction sharesFromValue(value: BN, totalValue: BN, totalShares: BN) {\n  return totalShares.eq(new BN(0)) ? value : proportionalBN(value, totalShares, totalValue);\n}\n\nfunction saturatingSub(left: BN, right: BN): BN {\n  return left.gt(right) ? left.sub(right) : new BN(0);\n}\n","import { AccountInfo, Connection, PublicKey } from '@solana/web3.js';\nimport { isValidRoute, MarketInfo } from './market';\nimport { MIN_SEGMENT_SIZE_FOR_INTERMEDIATE_MINTS } from '../constants';\nimport { RaydiumAmm } from './raydium/raydiumAmm';\nimport fetch from 'cross-fetch';\nimport { TokenRouteSegments } from './types';\nimport { Amm, prefetchAmms, SwapMode } from './amm';\nimport { SerumAmm } from './serum/serumAmm';\nimport { ammFactory } from './ammFactory';\nimport { getSaberWrappedDecimalsAmms } from './saber/saberAddDecimalsAmm';\nimport { SplitTradeAmm } from './split-trade/splitTradeAmm';\nimport { getTwoPermutations } from '../utils/getTwoPermutations';\nimport { chunkedGetMultipleAccountInfos } from '../utils/chunkedGetMultipleAccountInfos';\nimport JSBI from 'jsbi';\n\nexport interface TransactionFeeInfo {\n  signatureFee: number;\n  openOrdersDeposits: number[];\n  ataDeposits: number[];\n  /* Overall amount that will be deducted from user wallet after the swap */\n  totalFeeAndDeposits: number;\n  /* Amount for fee, deposits and temporary token accounts */\n  minimumSOLForTransaction: number;\n}\n\nexport interface RouteInfo {\n  marketInfos: MarketInfo[];\n  inAmount: JSBI;\n  outAmount: JSBI;\n  amount: JSBI; // The target amount, expect input or expect output\n  otherAmountThreshold: JSBI;\n  swapMode: SwapMode;\n  priceImpactPct: number;\n  getDepositAndFee: () => Promise<TransactionFeeInfo | undefined>;\n}\n\ntype MarketsCache = Array<\n  Omit<AccountInfo<Buffer>, 'data' | 'owner'> & {\n    data: [string, 'base64'];\n    owner: string;\n    pubkey: string;\n  }\n>;\n\ntype KeyedAccountInfo = AccountInfo<Buffer> & {\n  pubkey: PublicKey;\n  // api can pass some extra params\n  params?: any;\n};\n\nexport const fetchMarketCache = async (url: string) => {\n  const marketsCache = (await (await fetch(url)).json()) as MarketsCache;\n  return marketsCache;\n};\n\n/** For testing purposes when api does not have the new pools */\nexport async function fetchExtraKeyedAccountInfos(connection: Connection, pks: PublicKey[]) {\n  const extraKeyedAccountInfos = (\n    await chunkedGetMultipleAccountInfos(\n      connection,\n      pks.map((item) => item.toBase58()),\n    )\n  ).map((item, index) => {\n    const pubkey = pks[index];\n    if (!item) throw new Error(`Failed to fetch pool ${pubkey.toBase58()}`);\n    return { pubkey, ...item };\n  });\n  return extraKeyedAccountInfos;\n}\n\nexport async function getAllAmms(connection: Connection, marketsCache: MarketsCache): Promise<Amm[]> {\n  const marketCacheToAccountInfo = (marketsCache: MarketsCache): Array<KeyedAccountInfo> => {\n    return marketsCache.map((market) => {\n      const {\n        data: [accountInfo, format],\n        pubkey,\n        ...rest\n      } = market;\n      return {\n        ...rest,\n        pubkey: new PublicKey(pubkey),\n        data: Buffer.from(accountInfo, format),\n        owner: new PublicKey(rest.owner),\n      };\n    });\n  };\n\n  const marketKeyedAccountInfos = marketCacheToAccountInfo(marketsCache);\n\n  // this is used for development\n  const extraKeys: Array<PublicKey> = [];\n\n  if (extraKeys.length) {\n    const extraKeyedAccountInfos = await fetchExtraKeyedAccountInfos(connection, extraKeys);\n    marketKeyedAccountInfos.push(...extraKeyedAccountInfos);\n  }\n\n  const amms = marketKeyedAccountInfos.reduce((acc, keyedAccountInfo) => {\n    const amm = ammFactory(keyedAccountInfo.pubkey, keyedAccountInfo, keyedAccountInfo.params);\n    // Amm might not be recognized by the current version of the frontend\n    // or be in a state we don't want\n    if (amm) {\n      acc.push(amm);\n    }\n    return acc;\n  }, new Array<Amm>());\n\n  await prefetchAmms(\n    amms.filter((amm) => amm.shouldPrefetch),\n    connection,\n  );\n\n  amms.push(...getSaberWrappedDecimalsAmms());\n\n  return amms;\n}\n\nexport function ammCrossProtocolPairs(arr: Amm[], callback: (a: Amm, b: Amm) => void) {\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      // Don't pair amm with same label\n      if (arr[i].label !== arr[j].label) {\n        callback(arr[i], arr[j]);\n      }\n    }\n  }\n}\n\nconst mintCache: Record<string, string> = {};\n\n// Since the mints are mostly repeated we want to avoid converting the same pk again\n// This seems to bring getTokenRouteSegments from 100ms => 50ms\nfunction getOrUpdatePublicKeyCache(pk: PublicKey) {\n  //@ts-ignore\n  const pkBase64 = pk._bn.toString();\n  const cached = mintCache[pkBase64];\n  if (cached) {\n    return cached;\n  } else {\n    const pkBase58 = pk.toBase58();\n    mintCache[pkBase64] = pkBase58;\n    return pkBase58;\n  }\n}\n\nexport function getTokenRouteSegments(amms: Amm[]): TokenRouteSegments {\n  const tokenRouteSegments = new Map<string, Map<string, Amm[]>>();\n\n  amms.forEach((amm) => {\n    const reserveTokenMintPermutations = getTwoPermutations(amm.reserveTokenMints);\n    reserveTokenMintPermutations.forEach(([firstReserveMint, secondReserveMint]) => {\n      const firstMintBase58 = getOrUpdatePublicKeyCache(firstReserveMint);\n      const secondMintBase58 = getOrUpdatePublicKeyCache(secondReserveMint);\n      addSegment(firstMintBase58, secondMintBase58, amm, tokenRouteSegments);\n    });\n  });\n\n  return tokenRouteSegments;\n}\n\nfunction addSegment(inMint: string, outMint: string, amm: Amm, tokenRouteSegments: TokenRouteSegments) {\n  let segments = tokenRouteSegments.get(inMint);\n\n  if (!segments) {\n    segments = new Map<string, Amm[]>([[outMint, []]]);\n    tokenRouteSegments.set(inMint, segments);\n  }\n\n  let amms = segments.get(outMint);\n  if (!amms) {\n    amms = [];\n    segments.set(outMint, amms);\n  }\n\n  amms.push(amm);\n}\n\nexport type Route = {\n  amms: Amm[];\n  mints: PublicKey[];\n};\n\n/*\n * Construct TokenRouteSegment that is only used for the selected inputMint and outputMint\n * Example:\n *   SOL => USDC, the map would consist of\n *     - SOL => USDC => Amm[]\n *     - SOL => USDT => Amm[]\n *     - USDT => SOL => Amm[]\n */\nexport function computeInputRouteSegments({\n  inputMint,\n  outputMint,\n  tokenRouteSegments,\n  intermediateTokens,\n  swapMode,\n  onlyDirectRoutes,\n}: {\n  inputMint: string;\n  outputMint: string;\n  tokenRouteSegments: TokenRouteSegments;\n  intermediateTokens?: string[];\n  swapMode: SwapMode;\n  onlyDirectRoutes?: boolean;\n}): TokenRouteSegments {\n  const inputRouteSegments: TokenRouteSegments = new Map();\n\n  const inputSegment = tokenRouteSegments.get(inputMint);\n  const outputSegment = tokenRouteSegments.get(outputMint);\n\n  if (inputSegment && outputSegment) {\n    const minSegmentSize = Math.min(inputSegment.size, outputSegment.size);\n    // this is used to minimize the looping part\n    // if SOL => MER, SOL has 100 keys but MER has 6 keys so only the first 6 loops are required always\n    const shouldStartWithInputSegment = inputSegment.size < outputSegment.size;\n\n    const inputInnerMap = new Map<string, Amm[]>();\n    const outputInnerMap = new Map<string, Amm[]>();\n    let [startSegment, endSegment, startMint, endMint] = shouldStartWithInputSegment\n      ? [inputSegment, outputSegment, inputMint, outputMint]\n      : [outputSegment, inputSegment, outputMint, inputMint];\n\n    for (let [mint, amms] of startSegment.entries()) {\n      let filteredAmms = swapMode === SwapMode.ExactIn ? amms : amms.filter((amm) => amm.exactOutputSupported);\n\n      if (mint === endMint) {\n        inputInnerMap.set(mint, filteredAmms);\n        outputInnerMap.set(startMint, filteredAmms);\n        continue;\n      }\n\n      if (\n        onlyDirectRoutes ||\n        swapMode === SwapMode.ExactOut ||\n        shouldSkipOutputMint(intermediateTokens, minSegmentSize, mint)\n      ) {\n        continue;\n      }\n\n      const intersectionAmms = endSegment.get(mint);\n      if (intersectionAmms) {\n        let filteredIntersectionAmms =\n          swapMode === SwapMode.ExactIn ? intersectionAmms : intersectionAmms.filter((amm) => amm.exactOutputSupported);\n\n        inputRouteSegments.set(\n          mint,\n          new Map([\n            [startMint, filteredAmms],\n            [endMint, filteredIntersectionAmms],\n          ]),\n        );\n        inputInnerMap.set(mint, filteredAmms);\n        outputInnerMap.set(mint, filteredIntersectionAmms);\n      }\n    }\n    inputRouteSegments.set(startMint, inputInnerMap);\n    inputRouteSegments.set(endMint, outputInnerMap);\n  }\n\n  return inputRouteSegments;\n}\n\nexport function computeRouteMap(\n  tokenRouteSegments: TokenRouteSegments,\n  intermediateTokens?: string[],\n  onlyDirectRoutes?: boolean,\n): Map<string, string[]> {\n  const routeMap = new Map<string, string[]>();\n\n  for (const [tokenMint, firstLevelOutputs] of tokenRouteSegments) {\n    const validOutputMints = new Set<string>();\n\n    for (const [firstLevelOutputMint, firstLevelAmms] of firstLevelOutputs) {\n      validOutputMints.add(firstLevelOutputMint);\n\n      if (onlyDirectRoutes) {\n        continue;\n      }\n      // add the single level output as possible valid mints as well\n      const secondLevelOutputs = tokenRouteSegments.get(firstLevelOutputMint) ?? new Map<string, Amm[]>();\n\n      for (const [secondLevelOutputMint, secondLevelAmms] of secondLevelOutputs) {\n        // Prevent output mint == input mint when routing\n        if (secondLevelOutputMint === tokenMint) {\n          continue;\n        }\n\n        const outputMintSize = tokenRouteSegments.get(secondLevelOutputMint)?.size ?? 0;\n        const minSegmentSize = Math.min(firstLevelOutputs.size, outputMintSize);\n\n        // if intermediateTokens is specified and it doesnt include in the intermediateTokens, skip it\n        if (shouldSkipOutputMint(intermediateTokens, minSegmentSize, firstLevelOutputMint)) {\n          continue;\n        }\n\n        let found = false;\n        for (const firstLevelAmm of firstLevelAmms) {\n          for (const secondLevelAmm of secondLevelAmms) {\n            if (isValidRoute(firstLevelAmm, secondLevelAmm)) {\n              validOutputMints.add(secondLevelOutputMint);\n              found = true;\n              break;\n            }\n          }\n          if (found) break;\n        }\n      }\n    }\n    routeMap.set(tokenMint, Array.from(validOutputMints));\n  }\n\n  return routeMap;\n}\n\ninterface SplitTradeRequiredParams {\n  hasSerumOpenOrderInstruction: boolean;\n}\n\nfunction shouldSkipOutputMint(\n  intermediateTokens: string[] | undefined,\n  minSegmentSize: number,\n  outputMint: string,\n): boolean {\n  return Boolean(\n    intermediateTokens &&\n      minSegmentSize > MIN_SEGMENT_SIZE_FOR_INTERMEDIATE_MINTS &&\n      !intermediateTokens.includes(outputMint),\n  );\n}\n\nexport function isSplitSetupRequired(\n  marketInfos: MarketInfo[],\n  { hasSerumOpenOrderInstruction }: SplitTradeRequiredParams,\n): { needSetup: boolean; needCleanup: boolean } {\n  let firstAmm: Amm;\n  let secondAmm: Amm;\n\n  if (marketInfos.length === 1) {\n    const amm = marketInfos[0].amm;\n    if (amm instanceof SplitTradeAmm) {\n      firstAmm = amm.firstAmm;\n      secondAmm = amm.secondAmm;\n    } else {\n      return { needSetup: false, needCleanup: false };\n    }\n  } else {\n    [firstAmm, secondAmm] = marketInfos.map((marketInfo) => marketInfo.amm);\n  }\n\n  if (firstAmm instanceof RaydiumAmm || secondAmm instanceof RaydiumAmm) {\n    return { needSetup: true, needCleanup: true };\n  } else if (firstAmm instanceof SerumAmm && secondAmm instanceof SerumAmm) {\n    return { needSetup: true, needCleanup: true };\n  } else if (hasSerumOpenOrderInstruction) {\n    return { needSetup: true, needCleanup: false };\n  }\n\n  return { needSetup: false, needCleanup: false };\n}\n\n// We cannot add platform fee to all possible routing due to transaction size limit\nexport function isPlatformFeeSupported(swapMode: SwapMode, amms: Amm[]): boolean {\n  if (swapMode === SwapMode.ExactOut) return false;\n\n  if (amms.length > 1) {\n    const [firstMarket, secondMarket] = amms;\n\n    if (firstMarket instanceof RaydiumAmm && secondMarket instanceof RaydiumAmm) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function getRouteInfoUniqueId(routeInfo: RouteInfo) {\n  return routeInfo.marketInfos.map((marketInfo) => `${marketInfo.amm.id}-${marketInfo.inputMint}`).join('-');\n}\n","import { deserializeAccount } from '@mercurial-finance/optimist';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, Token, TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { Connection, PublicKey, SystemProgram, TransactionInstruction } from '@solana/web3.js';\nimport JSBI from 'jsbi';\nimport { WRAPPED_SOL_MINT } from '../constants';\nimport { getEmptyInstruction, Instruction } from './instruction';\nimport { Owner } from './Owner';\n\n// Leverage the existing ATA when present\nexport async function createAndCloseWSOLAccount({\n  connection,\n  amount,\n  owner: { publicKey },\n}: {\n  connection: Connection;\n  owner: Owner;\n  amount: JSBI;\n}): Promise<Instruction & { address: PublicKey }> {\n  const result = getEmptyInstruction();\n  result.instructions = [];\n\n  const toAccount = await Token.getAssociatedTokenAddress(\n    ASSOCIATED_TOKEN_PROGRAM_ID,\n    TOKEN_PROGRAM_ID,\n    WRAPPED_SOL_MINT,\n    publicKey,\n    true,\n  );\n\n  const info = await connection.getAccountInfo(toAccount);\n\n  if (info === null) {\n    result.instructions.push(\n      createAssociatedTokenAccountInstruction(publicKey, toAccount, publicKey, WRAPPED_SOL_MINT),\n    );\n  }\n\n  // Fund account and sync\n  result.instructions.push(\n    SystemProgram.transfer({\n      fromPubkey: publicKey,\n      toPubkey: toAccount,\n      lamports: JSBI.toNumber(amount),\n    }),\n  );\n  result.instructions.push(\n    // This is not exposed by the types, but indeed it exists\n    (Token as any).createSyncNativeInstruction(TOKEN_PROGRAM_ID, toAccount),\n  );\n\n  result.cleanupInstructions = [\n    Token.createCloseAccountInstruction(TOKEN_PROGRAM_ID, toAccount, publicKey, publicKey, []),\n  ];\n\n  return {\n    address: toAccount,\n    ...result,\n  };\n}\n\nexport async function findOrCreateAssociatedAccountByMint({\n  connection,\n  payer,\n  owner: { publicKey },\n  mintAddress,\n  unwrapSOL,\n}: {\n  connection: Connection;\n  payer: PublicKey;\n  owner: Owner;\n  mintAddress: PublicKey | string;\n  unwrapSOL: boolean;\n}): Promise<Instruction & { address: PublicKey }> {\n  const mint = typeof mintAddress === 'string' ? new PublicKey(mintAddress) : mintAddress;\n  const toAccount = await Token.getAssociatedTokenAddress(\n    ASSOCIATED_TOKEN_PROGRAM_ID,\n    TOKEN_PROGRAM_ID,\n    mint,\n    publicKey,\n    true,\n  );\n  const cleanupInstructions: TransactionInstruction[] = [];\n  const instructions: TransactionInstruction[] = [];\n\n  const info = await connection.getAccountInfo(toAccount);\n\n  if (info === null) {\n    instructions.push(createAssociatedTokenAccountInstruction(payer, toAccount, publicKey, mint));\n  } else {\n    const tokenAccountInfo = deserializeAccount(info.data);\n\n    if (tokenAccountInfo && !tokenAccountInfo.owner.equals(publicKey)) {\n      // What to do at the top level in UIs and SDK?\n      throw new Error(`/!\\ ATA ${toAccount.toBase58()} is not owned by ${publicKey.toBase58()}`);\n    }\n  }\n\n  // We close it when wrapped SOL\n  if (mint.equals(WRAPPED_SOL_MINT) && unwrapSOL) {\n    cleanupInstructions.push(\n      Token.createCloseAccountInstruction(TOKEN_PROGRAM_ID, toAccount, publicKey, publicKey, []),\n    );\n  }\n\n  return {\n    address: toAccount,\n    instructions: instructions,\n    cleanupInstructions,\n    signers: [],\n  };\n}\n\n// 0.1.x @solana/spl-token does not have the version without the rent sysvar\n// Source: https://github.com/solana-labs/solana-program-library/blob/dc5684445f0b42ba36a0157f06c561d967a7cb34/associated-token-account/program/src/instruction.rs#L16-L25\nexport function createAssociatedTokenAccountInstruction(\n  payer: PublicKey,\n  associatedToken: PublicKey,\n  owner: PublicKey,\n  mint: PublicKey,\n  programId = TOKEN_PROGRAM_ID,\n  associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID,\n): TransactionInstruction {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedToken, isSigner: false, isWritable: true },\n    { pubkey: owner, isSigner: false, isWritable: false },\n    { pubkey: mint, isSigner: false, isWritable: false },\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n    { pubkey: programId, isSigner: false, isWritable: false },\n  ];\n\n  return new TransactionInstruction({\n    keys,\n    programId: associatedTokenProgramId,\n    data: Buffer.alloc(0),\n  });\n}\n","import { Signer, Transaction, TransactionInstruction, TransactionSignature } from '@solana/web3.js';\n\nexport const getEmptyInstruction: () => Instruction = () => ({\n  instructions: [],\n  cleanupInstructions: [],\n  signers: [],\n});\n\nexport type Instruction = {\n  instructions: TransactionInstruction[];\n  cleanupInstructions: TransactionInstruction[];\n  signers: Signer[];\n};\n\nexport type TransactionPayload = {\n  transaction: Transaction;\n  signers: Signer[];\n  execute: () => Promise<TransactionSignature>;\n};\n","import { Connection, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { isPlatformFeeSupported, RouteInfo } from './routes';\nimport { getEmptyInstruction, Instruction } from '../utils/instruction';\nimport { findOrCreateAssociatedAccountByMint } from '../utils/token';\nimport { createSetTokenLedgerInstruction } from './jupiterInstruction';\nimport { Owner } from '../utils/Owner';\nimport { PlatformFee } from './types';\nimport { QuoteMintToReferrer } from '..';\nimport { isSerumAndRaydium } from './market';\nimport { ZERO } from '@jup-ag/math';\nimport { BN } from 'bn.js';\n\ntype RouteToInstructionsParams = {\n  user: Owner;\n  tokenLedger: PublicKey;\n  openOrdersAddresses: (PublicKey | undefined)[];\n  userSourceTokenAccountAddress: PublicKey;\n  userIntermediaryTokenAccountAddress: PublicKey | undefined;\n  userDestinationTokenAccountAddress: PublicKey;\n  routeInfo: RouteInfo;\n  platformFee: PlatformFee | undefined;\n  quoteMintToReferrer: QuoteMintToReferrer;\n};\n\nasync function routeToInstructions({\n  user,\n  tokenLedger,\n  openOrdersAddresses,\n  userSourceTokenAccountAddress,\n  userIntermediaryTokenAccountAddress,\n  userDestinationTokenAccountAddress,\n  routeInfo,\n  platformFee,\n  quoteMintToReferrer,\n}: RouteToInstructionsParams): Promise<Instruction> {\n  const otherAmountThreshold = routeInfo.otherAmountThreshold;\n  const amount = routeInfo.amount;\n\n  const legs = routeInfo.marketInfos.length;\n  if (legs === 2 && !userIntermediaryTokenAccountAddress) {\n    throw new Error('Missing intermediary token account');\n  }\n\n  // Drop referrer if space is scarce\n  const effectiveQuoteMintToReferrer =\n    platformFee && isSerumAndRaydium(routeInfo.marketInfos) ? undefined : quoteMintToReferrer;\n\n  const userIntermediateTokenAccountAddresses = userIntermediaryTokenAccountAddress\n    ? [userIntermediaryTokenAccountAddress]\n    : [];\n  const userTokenAccountAddresses = [\n    userSourceTokenAccountAddress,\n    ...userIntermediateTokenAccountAddresses,\n    userDestinationTokenAccountAddress,\n  ];\n\n  const platformFeeSupported = isPlatformFeeSupported(\n    routeInfo.swapMode,\n    routeInfo.marketInfos.map((mi) => mi.amm),\n  );\n\n  const instructions: TransactionInstruction[] = [\n    createSetTokenLedgerInstruction(tokenLedger, userTokenAccountAddresses[1]),\n  ];\n\n  for (const [index, marketInfo] of routeInfo.marketInfos.entries()) {\n    const amm = marketInfo.amm;\n    const legAmount = index === 0 ? new BN(amount.toString()) : null;\n    const isLastLeg = index === legs - 1;\n    const legOtherAmountThreshold = new BN((isLastLeg ? otherAmountThreshold : ZERO).toString());\n    const legPlatformFee = isLastLeg && platformFeeSupported ? platformFee : undefined;\n\n    const [userSourceTokenAccount, userDestinationTokenAccount] = userTokenAccountAddresses.slice(index);\n\n    instructions.push(\n      ...amm.createSwapInstructions({\n        sourceMint: marketInfo.inputMint,\n        destinationMint: marketInfo.outputMint,\n        userSourceTokenAccount,\n        userDestinationTokenAccount,\n        userTransferAuthority: user.publicKey,\n        inAmount: marketInfo.inAmount,\n        amount: legAmount,\n        otherAmountThreshold: legOtherAmountThreshold,\n        swapMode: routeInfo.swapMode,\n        tokenLedger,\n        openOrdersAddress: openOrdersAddresses[index],\n        platformFee: legPlatformFee,\n        quoteMintToReferrer: effectiveQuoteMintToReferrer,\n      }),\n    );\n  }\n\n  const { signers, cleanupInstructions } = getEmptyInstruction();\n\n  if (user.isKeyPair && user.signer) {\n    signers.push(user.signer);\n  }\n  return {\n    signers,\n    cleanupInstructions,\n    instructions,\n  };\n}\n\nexport const routeAtaInstructions = async ({\n  connection,\n  marketInfos,\n  owner,\n  unwrapSOL,\n}: {\n  connection: Connection;\n  marketInfos: RouteInfo['marketInfos'];\n  owner: Owner;\n  unwrapSOL: boolean;\n}) => {\n  const getUserIntermediateTokenAccountAddress = async () => {\n    const userIntermediateTokenAccountAddress =\n      marketInfos.length === 2\n        ? await findOrCreateAssociatedAccountByMint({\n            connection,\n            owner: owner,\n            payer: owner.publicKey,\n            mintAddress: marketInfos[0].outputMint,\n            unwrapSOL,\n          })\n        : undefined;\n    return userIntermediateTokenAccountAddress;\n  };\n\n  const getUserDestinationTokenAccountAddress = () => {\n    return findOrCreateAssociatedAccountByMint({\n      connection,\n      owner: owner,\n      payer: owner.publicKey,\n      mintAddress: marketInfos.length === 2 ? marketInfos[1].outputMint : marketInfos[0].outputMint,\n      unwrapSOL,\n    });\n  };\n\n  const [userIntermediaryTokenAccountResult, userDestinationTokenAccountResult] = await Promise.all([\n    getUserIntermediateTokenAccountAddress(),\n    getUserDestinationTokenAccountAddress(),\n  ]);\n\n  return {\n    userIntermediaryTokenAccountResult,\n    userDestinationTokenAccountResult,\n  };\n};\n\nexport default routeToInstructions;\n","import { Connection, PublicKey } from '@solana/web3.js';\nimport { SerumMarket } from '../market';\nimport { getEmptyInstruction, Instruction } from '../../utils/instruction';\nimport { wait } from '../../utils/wait';\nimport { createOpenOrdersInstruction } from '../jupiterInstruction';\n\nexport type MarketToOpenOrdersAddress = Map<string, PublicKey>;\n\nexport async function getOrCreateOpenOrdersAddress(\n  connection: Connection,\n  user: PublicKey,\n  serumMarket: SerumMarket,\n  marketToOpenOrdersAddress?: MarketToOpenOrdersAddress,\n): Promise<(Instruction & { address: PublicKey }) | undefined> {\n  const result = getEmptyInstruction();\n\n  const marketAddress = serumMarket.address.toString();\n\n  if (marketToOpenOrdersAddress) {\n    // check existing map\n    let openOrdersAddress = marketToOpenOrdersAddress.get(marketAddress);\n\n    if (openOrdersAddress) {\n      let openOrdersAccountInfo = null;\n\n      // We verify if it indeed exists, with low commitment to pick it up, to address the unsafe behaviour below\n      openOrdersAccountInfo = await connection.getAccountInfo(openOrdersAddress, 'confirmed');\n\n      if (openOrdersAccountInfo) {\n        return {\n          ...result,\n          address: openOrdersAddress,\n        };\n      }\n    }\n  }\n\n  const [newOpenOrdersAddress, ix] = createOpenOrdersInstruction(serumMarket, user);\n\n  const newOpenOrdersAddressInfo = await connection.getAccountInfo(newOpenOrdersAddress);\n\n  if (!newOpenOrdersAddressInfo) {\n    result.instructions = [ix];\n  }\n\n  // This is unsafe, since we don't know yet if it has succeeded\n  marketToOpenOrdersAddress?.set(serumMarket.address.toString(), newOpenOrdersAddress);\n\n  return {\n    ...result,\n    address: newOpenOrdersAddress,\n  };\n}\n","import { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { Connection, FeeCalculator, PublicKey } from '@solana/web3.js';\nimport type { SerumOpenOrdersMap } from '..';\nimport { WRAPPED_SOL_MINT } from '../constants';\nimport { deserializeAccount } from '@mercurial-finance/optimist';\nimport { RouteInfo, TransactionFeeInfo } from './routes';\nimport { routeAtaInstructions } from './routeToInstructions';\nimport { getOrCreateOpenOrdersAddress } from './serum/openOrders';\nimport { SerumAmm } from './serum/serumAmm';\nimport { SplitTradeAmm } from './split-trade/splitTradeAmm';\nimport { PlatformFeeAndAccounts, SetupInstructions } from './types';\nimport { Owner } from '../utils/Owner';\n\nconst SERUM_OPEN_ACCOUNT_LAMPORTS = 23_352_760;\nconst OPEN_TOKEN_ACCOUNT_LAMPORTS = 2_039_280;\n\nfunction sum(values: number[]) {\n  return values.reduce((value, acc) => {\n    acc += value;\n    return acc;\n  }, 0);\n}\n\nconst calculateTransactionDepositAndFee = ({\n  intermediate,\n  destination,\n  openOrders,\n  hasWrapUnwrapSOL,\n  feeCalculator,\n}: SetupInstructions & {\n  hasWrapUnwrapSOL: boolean;\n  feeCalculator: FeeCalculator;\n}): TransactionFeeInfo => {\n  const openOrdersDeposits = openOrders\n    .filter((ooi) => ooi && ooi.instructions.length > 0)\n    .map(() => SERUM_OPEN_ACCOUNT_LAMPORTS);\n  const ataDeposits = [intermediate, destination]\n    .filter((item) => item?.instructions.length && item.cleanupInstructions.length === 0)\n    .map(() => OPEN_TOKEN_ACCOUNT_LAMPORTS);\n\n  const signatureFee =\n    ([...openOrders?.map((oo) => oo?.signers), intermediate?.signers, destination.signers].filter(Boolean).flat()\n      .length +\n      1) *\n    feeCalculator.lamportsPerSignature;\n\n  const totalFeeAndDeposits = sum([signatureFee, ...openOrdersDeposits, ...ataDeposits]);\n\n  // We need to account for temporary wrapped SOL token accounts as intermediary or output\n  const minimumSOLForTransaction = sum([\n    signatureFee,\n    ...openOrdersDeposits,\n    ...[intermediate, destination]\n      .filter((item) => (item?.instructions.length ?? 0) > 0)\n      .map(() => OPEN_TOKEN_ACCOUNT_LAMPORTS),\n    hasWrapUnwrapSOL ? OPEN_TOKEN_ACCOUNT_LAMPORTS : 0,\n  ]);\n\n  return {\n    signatureFee,\n    openOrdersDeposits,\n    ataDeposits,\n    totalFeeAndDeposits,\n    minimumSOLForTransaction,\n  };\n};\n\nexport const getDepositAndFeeFromInstructions = async ({\n  connection,\n  owner,\n  inputMint,\n  marketInfos,\n  feeCalculator,\n  serumOpenOrdersPromise,\n  wrapUnwrapSOL: unwrapSOL,\n}: {\n  connection: Connection;\n  owner: Owner;\n  inputMint: PublicKey;\n  marketInfos: RouteInfo['marketInfos'];\n  feeCalculator: FeeCalculator;\n  /* promise because we can choose not to await it when we dont need it */\n  serumOpenOrdersPromise: Promise<SerumOpenOrdersMap>;\n  wrapUnwrapSOL: boolean;\n}) => {\n  const hasWrapUnwrapSOL = inputMint.equals(WRAPPED_SOL_MINT) && unwrapSOL;\n\n  const openOrdersInstructionsPromise = Promise.all(\n    marketInfos.map(async (marketInfo) => {\n      const amm = marketInfo.amm;\n      if (amm instanceof SerumAmm || amm instanceof SplitTradeAmm) {\n        if (!amm.market) return;\n        return await getOrCreateOpenOrdersAddress(\n          connection,\n          owner.publicKey,\n          amm.market,\n          await serumOpenOrdersPromise,\n        );\n      }\n      return;\n    }),\n  );\n\n  const promise = routeAtaInstructions({ connection, marketInfos, owner, unwrapSOL }).then(\n    ({ userIntermediaryTokenAccountResult, userDestinationTokenAccountResult }) => {\n      return openOrdersInstructionsPromise.then((openOrdersInstructions) => ({\n        intermediate: userIntermediaryTokenAccountResult,\n        destination: userDestinationTokenAccountResult,\n        openOrders: openOrdersInstructions,\n      }));\n    },\n  );\n\n  const instructionResult = await promise;\n\n  return calculateTransactionDepositAndFee({\n    ...instructionResult,\n    hasWrapUnwrapSOL,\n    feeCalculator,\n  });\n};\n\nexport const NO_PLATFORM_FEE: PlatformFeeAndAccounts = {\n  feeBps: 0,\n  feeAccounts: new Map<string, PublicKey>(),\n};\n\nexport async function getPlatformFeeAccounts(\n  connection: Connection,\n  feeAccountOwner: PublicKey,\n): Promise<Map<string, PublicKey>> {\n  const tokenAccounts = (\n    await connection.getTokenAccountsByOwner(feeAccountOwner, {\n      programId: TOKEN_PROGRAM_ID,\n    })\n  ).value;\n\n  const feeAccounts = tokenAccounts.reduce((acc, tokenAccount) => {\n    const deserializedtokenAccount = deserializeAccount(tokenAccount.account.data);\n    if (deserializedtokenAccount) {\n      acc.set(deserializedtokenAccount.mint.toBase58(), tokenAccount.pubkey);\n    }\n    return acc;\n  }, new Map<string, PublicKey>());\n\n  return feeAccounts;\n}\n","import {\n  Connection,\n  PublicKey,\n  Transaction,\n  Signer,\n  TransactionInstruction,\n  BlockhashWithExpiryBlockHeight,\n  TransactionBlockhashCtor,\n} from '@solana/web3.js';\nimport { Instruction, TransactionPayload } from './instruction';\nimport { Owner } from './Owner';\n\nexport class TransactionBuilder {\n  private connection: Connection;\n  private feePayer: PublicKey;\n  private instructions: Instruction[];\n  private owner: Owner;\n\n  constructor(connection: Connection, feePayer: PublicKey, owner: Owner) {\n    this.connection = connection;\n    this.feePayer = feePayer;\n    this.instructions = [];\n    this.owner = owner;\n  }\n\n  addInstruction(instruction: Instruction): TransactionBuilder {\n    this.instructions.push(instruction);\n    return this;\n  }\n\n  async build(blockhashWithExpiryBlockHeight?: BlockhashWithExpiryBlockHeight): Promise<TransactionPayload> {\n    if (!blockhashWithExpiryBlockHeight) {\n      blockhashWithExpiryBlockHeight = await this.connection.getLatestBlockhash('confirmed');\n    }\n\n    const txFields: TransactionBlockhashCtor = {\n      ...blockhashWithExpiryBlockHeight,\n      feePayer: this.feePayer,\n    };\n\n    let instructions: TransactionInstruction[] = [];\n    let cleanupInstructions: TransactionInstruction[] = [];\n    let signers: Signer[] = [];\n    this.instructions.forEach((curr) => {\n      instructions = instructions.concat(curr.instructions);\n      cleanupInstructions = cleanupInstructions.concat(curr.cleanupInstructions);\n      signers = signers.concat(curr.signers);\n    });\n\n    const transaction = new Transaction(txFields);\n    instructions.concat(cleanupInstructions).forEach((ix) => transaction.add(ix));\n    transaction.feePayer = this.feePayer;\n\n    return {\n      transaction: transaction,\n      signers: signers,\n      execute: this.owner.isKeyPair\n        ? () => {\n            return this.connection.sendTransaction(transaction, signers);\n          }\n        : async () => {\n            throw new Error('Please use a Keypair for the owner parameter to enable the execute function');\n          },\n    };\n  }\n}\n","import { Keypair, PublicKey, Signer } from '@solana/web3.js';\n\ntype _Owner = Keypair | PublicKey;\n\nexport class Owner {\n  private readonly _owner: _Owner;\n\n  constructor(owner: _Owner) {\n    this._owner = owner;\n  }\n\n  get publicKey(): PublicKey {\n    if (Owner.isKeyPair(this._owner)) {\n      return this._owner.publicKey;\n    }\n\n    return this._owner;\n  }\n\n  get signer(): Signer | undefined {\n    return Owner.isKeyPair(this._owner) ? this._owner : undefined;\n  }\n\n  get isKeyPair(): boolean {\n    return Owner.isKeyPair(this._owner);\n  }\n\n  get isPublicKey(): boolean {\n    return Owner.isPublicKey(this._owner);\n  }\n\n  static isKeyPair(owner: _Owner): owner is Keypair {\n    return (owner as Keypair).secretKey !== undefined;\n  }\n\n  static isPublicKey(owner: _Owner): owner is PublicKey {\n    return !Owner.isKeyPair(owner);\n  }\n}\n","export const wait = (time: number) => new Promise<void>((resolve) => setTimeout(resolve, time));\n","import { TransactionError } from '@mercurial-finance/optimist';\nimport { bs58 } from '@project-serum/anchor/dist/cjs/utils/bytes';\nimport {\n  ConfirmedTransactionMeta,\n  Connection,\n  PublicKey,\n  SendOptions,\n  Transaction,\n  TransactionResponse,\n  TransactionSignature,\n} from '@solana/web3.js';\nimport Decimal from 'decimal.js';\nimport promiseRetry from 'promise-retry';\nimport { WRAPPED_SOL_MINT, JUPITER_ERRORS } from '../constants';\nimport { wait } from './wait';\n\ntype ResponseMeta = NonNullable<TransactionResponse['meta']>;\ntype ReponseTransaction = TransactionResponse['transaction'];\n\nfunction diffTokenBalance(accountKeyIndex: number, meta: ConfirmedTransactionMeta): number | undefined {\n  const postBalance = meta.postTokenBalances?.find(\n    (postTokenBalance) => postTokenBalance.accountIndex === accountKeyIndex,\n  )?.uiTokenAmount.amount;\n  const preBalance = meta.preTokenBalances?.find((preTokenBalance) => preTokenBalance.accountIndex === accountKeyIndex)\n    ?.uiTokenAmount.amount;\n\n  // When token account is created it isn't present in preBalance\n  if (!postBalance) return;\n  return Math.abs(parseInt(postBalance) - (preBalance !== undefined ? parseInt(preBalance) : 0));\n}\n\nexport function extractTokenBalanceChangeFromTransaction(\n  meta: ResponseMeta,\n  transaction: ReponseTransaction,\n  tokenAccountAddress: PublicKey,\n): number | undefined {\n  const message = transaction.message;\n\n  if (!meta) {\n    return;\n  }\n  const index = message.accountKeys.findIndex((p) => p.equals(tokenAccountAddress));\n\n  return diffTokenBalance(index, meta);\n}\n\nexport function extractSOLChangeFromTransaction(\n  meta: ResponseMeta,\n  transaction: ReponseTransaction,\n  user: PublicKey,\n): number {\n  let accountKeyIndex = transaction.message.accountKeys.findIndex((p) => p.equals(user));\n\n  if (accountKeyIndex !== -1) {\n    return Math.abs(meta.postBalances[accountKeyIndex] - meta.preBalances[accountKeyIndex]);\n  }\n\n  // if 0 is returned it will throw error in the caller function\n  return 0;\n}\n\nexport function getWritableKeys(transaction: Transaction) {\n  return [\n    ...new Set(\n      transaction.instructions\n        .map((inst) => inst.keys.filter((key) => key.isWritable).map((k) => k.pubkey))\n        .reduce((acc, el) => acc.concat(el)),\n    ).values(),\n  ];\n}\n\nexport function getTokenBalanceChangesFromTransactionResponse({\n  txid,\n  inputMint,\n  outputMint,\n  user,\n  sourceAddress,\n  destinationAddress,\n  transactionResponse,\n  hasWrappedSOL,\n}: {\n  txid: TransactionSignature;\n  inputMint: PublicKey;\n  outputMint: PublicKey;\n  user: PublicKey;\n  sourceAddress: PublicKey;\n  destinationAddress: PublicKey;\n  transactionResponse: TransactionResponse | null;\n  hasWrappedSOL: boolean;\n}) {\n  let sourceTokenBalanceChange: number | undefined;\n  let destinationTokenBalanceChange: number | undefined;\n\n  if (transactionResponse) {\n    let { meta, transaction } = transactionResponse;\n    if (meta) {\n      sourceTokenBalanceChange =\n        inputMint.equals(WRAPPED_SOL_MINT) && !hasWrappedSOL\n          ? extractSOLChangeFromTransaction(meta, transaction, user)\n          : extractTokenBalanceChangeFromTransaction(meta, transaction, sourceAddress);\n      destinationTokenBalanceChange =\n        outputMint.equals(WRAPPED_SOL_MINT) && !hasWrappedSOL\n          ? extractSOLChangeFromTransaction(meta, transaction, user)\n          : extractTokenBalanceChangeFromTransaction(meta, transaction, destinationAddress);\n    }\n  }\n\n  if (!(sourceTokenBalanceChange && destinationTokenBalanceChange)) {\n    throw new TransactionError(\n      'Cannot find source or destination token account balance change',\n      txid,\n      JUPITER_ERRORS['BalancesNotExtractedProperly'].code,\n    );\n  }\n\n  return [sourceTokenBalanceChange, destinationTokenBalanceChange];\n}\n\nexport function getUnixTs() {\n  return new Date().getTime();\n}\n\nconst SEND_OPTIONS: SendOptions = { skipPreflight: true, maxRetries: 2 };\n\n/**\n * awaits confirmation while resending the transaction periodically\n *\n * Our RPC node settings\n * solana_send_leader_count: 8\n * solana_send_retry_ms: 15000\n **/\nexport async function transactionSenderAndConfirmationWaiter(\n  connection: Connection,\n  signedTransaction: Transaction,\n  timeout = 120_000, // 2 minutes, (sendInterval * sendRetries) = 80_000 + extra wait 40_000\n  pollInterval = 500,\n  sendInterval = 2_000,\n  sendRetries = 40,\n): Promise<{ txid: TransactionSignature; transactionResponse: TransactionResponse | null }> {\n  const rawTransaction = signedTransaction.serialize();\n  const txid = await connection.sendRawTransaction(rawTransaction, SEND_OPTIONS);\n\n  const start = getUnixTs();\n  let lastSendTimestamp = getUnixTs();\n  let retries = 0;\n\n  while (getUnixTs() - start < timeout) {\n    const timestamp = getUnixTs();\n    if (retries < sendRetries && timestamp - lastSendTimestamp > sendInterval) {\n      lastSendTimestamp = timestamp;\n      retries += 1;\n      await connection.sendRawTransaction(rawTransaction, SEND_OPTIONS);\n    }\n    const response = await Promise.any([\n      connection.getTransaction(txid, {\n        commitment: 'confirmed',\n      }),\n      wait(5000),\n    ]);\n    if (response) return { txid, transactionResponse: response };\n    await wait(pollInterval);\n  }\n  return { txid, transactionResponse: null };\n}\n\nexport function getSignature(transaction: Transaction) {\n  const signature = transaction.signature;\n  if (!signature) {\n    throw new Error('Transaction has no signature');\n  }\n  return bs58.encode(signature);\n}\n","// The package is missing cjs. Apache License 2.0\n// https://github.com/ehmicky/fast-cartesian/blob/619a497dffd978fb4a09a83f2ca047915579774f/src/main.js\n\n// Validate 'array()' input\nconst validateInput = function <T>(arrays: T[][]) {\n  if (!Array.isArray(arrays)) {\n    throw new TypeError('Argument must be an array of arrays');\n  }\n\n  arrays.forEach(validateArray);\n  validateDimensions(arrays);\n  validateCombinations(arrays);\n};\n\nconst validateArray = function <T>(array: T[]) {\n  if (!Array.isArray(array)) {\n    throw new TypeError(`Argument must be an array: ${array}`);\n  }\n};\n\n// Maximum number of nested `for` loops. In my machine, it's 604 but it is\n// engine-specific so we use a safe number. Above the limit, a max call stack\n// error is thrown by the engine.\nconst validateDimensions = function <T>({ length }: T[]) {\n  if (length >= MAX_DIMENSIONS) {\n    throw new TypeError(\n      `Too many arrays (${length}): please use the 'big-cartesian' library instead of 'fast-cartesian'`,\n    );\n  }\n};\n\nconst MAX_DIMENSIONS = 1e2;\n\n// Max array size in JavaScript. This is the limit of the final return value.\nconst validateCombinations = function <T>(arrays: T[][]) {\n  const size = arrays.reduce(multiplySize, 1);\n\n  if (size >= MAX_SIZE) {\n    const sizeStr = Number.isFinite(size) ? ` (${size.toExponential(0)})` : '';\n    throw new TypeError(\n      `Too many combinations${sizeStr}: please use the 'big-cartesian' library instead of 'fast-cartesian'`,\n    );\n  }\n};\n\nconst multiplySize = function <T>(size: number, array: T[]) {\n  return size * array.length;\n};\n\nconst MAX_SIZE = 4294967296; // 2 ** 32 = 4,294,967,296\n\n// Does a cartesian product on several arrays.\n// Returns an array with the results.\n// Optimized to be the fastest implementation in JavaScript.\nexport default function fastCartesian<T>(arrays: T[][]): T[][] {\n  validateInput(arrays);\n\n  if (arrays.length === 0) {\n    return [];\n  }\n\n  const loopFunc = getLoopFunc(arrays.length);\n  const result: T[][] = [];\n  loopFunc(arrays, result);\n  return result;\n}\n\nconst getLoopFunc = function (length: number) {\n  const cachedLoopFunc = cache[length];\n\n  if (cachedLoopFunc !== undefined) {\n    return cachedLoopFunc;\n  }\n\n  const loopFunc = mGetLoopFunc(length);\n  // eslint-disable-next-line fp/no-mutation\n  cache[length] = loopFunc;\n  return loopFunc;\n};\n\nconst cache: Record<number, any> = {};\n\n// Create a function with `new Function()` that does:\n//   function(arrays, results) {\n//     for (const value0 of arrays[0]) {\n//       for (const value1 of arrays[1]) {\n//         // and so on\n//         results.push([value0, value1])\n//       }\n//     }\n//   }\nconst mGetLoopFunc = function (length: number) {\n  const indexes = Array.from({ length }, getIndex);\n  const start = indexes.map((index) => `for (const value${index} of arrays[${index}]) {`).join('\\n');\n  const middle = indexes.map((index) => `value${index}`).join(', ');\n  const end = '}\\n'.repeat(length);\n\n  // eslint-disable-next-line no-new-func\n  return new Function('arrays', 'result', `${start}\\nresult.push([${middle}])\\n${end}`);\n};\n\nconst getIndex = function (value: any, index: number) {\n  return String(index);\n};\n","import { Connection, PublicKey } from '@solana/web3.js';\nimport { chunkedGetMultipleAccountInfos } from '../utils/chunkedGetMultipleAccountInfos';\nimport { Amm, SwapMode, Quote } from './amm';\nimport { SplitTradeAmm } from './split-trade/splitTradeAmm';\nimport { isValidRoute, MarketInfo } from './market';\nimport { ammCrossProtocolPairs, isPlatformFeeSupported, Route, RouteInfo, TransactionFeeInfo } from './routes';\nimport { TokenRouteSegments } from './types';\nimport { IS_DEV } from '../constants';\nimport fastCartesian from '../utils/cartesian';\nimport JSBI from 'jsbi';\nimport { ZERO } from '@jup-ag/math';\nimport Decimal from 'decimal.js';\n\nconst PLATFORM_FEE_DENOMINATOR = JSBI.BigInt(10000);\n\nexport async function fetchAccountInfos(connection: Connection, routes: TokenRouteSegments): Promise<void> {\n  const accountInfosMap = new Map();\n\n  const accountsToFetchSet = new Set<string>();\n  const ammMap = new Map<string, Amm>();\n  routes.forEach((innerMap) => {\n    innerMap.forEach((amms) => {\n      amms.forEach((amm) => {\n        ammMap.set(amm.id, amm);\n        amm.getAccountsForUpdate().forEach((account) => {\n          // Only add accountInfos that is not in the Map\n          accountsToFetchSet.add(account.toBase58());\n        });\n      });\n    });\n  });\n\n  const accountsToFetch = Array.from(accountsToFetchSet);\n\n  if (accountsToFetch.length > 0) {\n    const accountInfos = await chunkedGetMultipleAccountInfos(connection, accountsToFetch);\n\n    accountInfos.forEach((item, index) => {\n      const publicKey = accountsToFetch[index];\n      if (item) {\n        accountInfosMap.set(publicKey, item);\n      }\n    });\n\n    ammMap.forEach((amm) => {\n      amm.update(accountInfosMap);\n    });\n  }\n}\n\ninterface GetQuotesParams {\n  inputRouteSegment: TokenRouteSegments;\n  amount: JSBI;\n  inputMint: PublicKey;\n  outputMint: PublicKey;\n  platformFeeBps: number;\n  slippage: number;\n  filterTopNResult?: number;\n  onlyDirectRoutes?: boolean;\n  swapMode: SwapMode;\n  getDepositAndFeeForRoute: (params: {\n    marketInfos: RouteInfo['marketInfos'];\n  }) => Promise<TransactionFeeInfo | undefined>;\n}\n\nfunction getInputOutputId({ inputMint, outputMint }: { inputMint: string; outputMint: string }) {\n  return `${inputMint}-${outputMint}`;\n}\n\nfunction getQuoteId({ ammId, amount }: { ammId: string; amount: JSBI }) {\n  return `${ammId}-${amount.toString()}`;\n}\n\ntype QuoteMap = Map<string, Quote>;\n\nfunction getQuoteAndSortBasedOnOutAmount({\n  amms,\n  inputMint,\n  outputMint,\n  amount,\n  swapMode,\n}: {\n  amms: Amm[];\n  inputMint: string;\n  outputMint: string;\n  amount: JSBI;\n  swapMode: SwapMode;\n}): Array<{ amm: Amm; quote: Quote }> {\n  const quotes = amms\n    .map((amm) => {\n      try {\n        const quote = amm.getQuote({\n          amount,\n          sourceMint: new PublicKey(inputMint),\n          destinationMint: new PublicKey(outputMint),\n          swapMode,\n        });\n        return { quote, amm: amm };\n      } catch (e) {\n        if (IS_DEV) {\n          console.error(e);\n        }\n        return undefined;\n      }\n    })\n    .filter(Boolean)\n    .sort((a, b) =>\n      JSBI.greaterThanOrEqual(b?.quote.outAmount || ZERO, a?.quote.outAmount || ZERO) ? 1 : -1,\n    ) as Array<{\n    amm: Amm;\n    quote: Quote;\n  }>;\n\n  return quotes;\n}\n\n// Change this to support N-1 level of hops\nconst MAX_LEVEL = 2;\n\nexport function processInputRouteSegmentToRoutesInfos({\n  inputRouteSegment,\n  inputMint,\n  outputMint,\n  amount,\n  getDepositAndFeeForRoute,\n  platformFeeBps,\n  slippage,\n  filterTopNResult = 3,\n  onlyDirectRoutes,\n  swapMode,\n}: GetQuotesParams) {\n  const inputMintString = inputMint.toBase58();\n  const outputMintString = outputMint.toBase58();\n  // (InputMint-OutputMint) map to (AmmId-InputAmount) map to Quote from the amm with the inputAmount\n  // this is used to prevent calculation being repeated later on.\n  const tradeIdQuoteMap = new Map<string, Map<string, Quote>>();\n  const inputMintInnerMap = inputRouteSegment.get(inputMintString);\n\n  const routes: Route[] = [];\n\n  if (!inputMintInnerMap) {\n    throw new Error('No routes found for the input and output mints');\n  }\n\n  const maxLevel = onlyDirectRoutes ? 0 : MAX_LEVEL;\n  /*\n   * It get the rate of all single pair that is linked to the inputMint\n   * Example: SOL => USDC, will have direct pair, while\n   *          SOL => USDT, USDT => SOL will have a hop\n   *\n   * So we go through each of the hop and get the top 3 rate and drop others\n   * This will eventually reduce the needs to compute bad rate for the same pair\n   *\n   * The loop below is doing for the inputMint, while the one after is doing for the outputMint.\n   */\n  const walkTheTree = ({\n    inputMint,\n    level = 0,\n    walked = [inputMint],\n  }: {\n    inputMint: string;\n    amount: JSBI;\n    level?: number;\n    walked?: string[];\n  }) => {\n    const inputMintInnerMap = inputRouteSegment.get(inputMint);\n\n    if (inputMintInnerMap) {\n      inputMintInnerMap.forEach((amms, outMint) => {\n        const tradeId = getInputOutputId({\n          inputMint,\n          outputMint: outMint,\n        });\n\n        const sortedQuotesWithAmms = getQuoteAndSortBasedOnOutAmount({\n          amms,\n          inputMint,\n          outputMint: outMint,\n          amount,\n          swapMode,\n        });\n\n        const { filteredAmms, quoteMap } = sortedQuotesWithAmms.reduce(\n          (result, item, idx) => {\n            if (idx < filterTopNResult) {\n              result.filteredAmms.push(item.amm);\n            }\n            result.quoteMap.set(getQuoteId({ ammId: item.amm.id, amount }), item.quote);\n            return result;\n          },\n          { filteredAmms: [] as Amm[], quoteMap: new Map() as QuoteMap },\n        );\n\n        const splitTradeAmms: SplitTradeAmm[] = [];\n        // add split trade in when outputMint match and it's not direct only routes\n        if (outMint === outputMintString && !onlyDirectRoutes) {\n          ammCrossProtocolPairs(filteredAmms.slice(), (firstAmm, secondAmm) => {\n            const splitTradeAmm = SplitTradeAmm.create(firstAmm, secondAmm);\n            if (splitTradeAmm) {\n              splitTradeAmms.push(splitTradeAmm);\n            }\n          });\n        }\n\n        inputMintInnerMap.set(outMint, filteredAmms.concat(splitTradeAmms));\n\n        tradeIdQuoteMap.set(tradeId, quoteMap);\n\n        // keep looping if not walked and not reached max level\n        if (outMint !== outputMintString && quoteMap.size && !walked.includes(outMint) && level < maxLevel - 1) {\n          walkTheTree({\n            inputMint: outMint,\n            amount: quoteMap.values().next().value.outAmount,\n            level: level + 1,\n            walked: walked.concat(outMint),\n          });\n        } else if (outMint === outputMintString) {\n          if (level === 0) {\n            // we need to add the direct routes as it is computed instead of using filteredAmms\n            inputMintInnerMap.set(outMint, sortedQuotesWithAmms.map((item) => item.amm).concat(splitTradeAmms));\n          }\n\n          // if output reached, we add the route\n          const mints = walked.concat(outMint);\n          const _mints = mints.map((i) => new PublicKey(i));\n          const ammsArr = mints.reduce((amms, _, index) => {\n            if (index < mints.length - 1) {\n              amms.push(inputRouteSegment.get(mints[index])?.get(mints[index + 1])!);\n            }\n            return amms;\n          }, [] as Amm[][]);\n\n          const permutations: Amm[][] = fastCartesian(ammsArr);\n\n          permutations.forEach((item) => {\n            if (item.length === 1 || isValidRoute(item[0], item[1])) {\n              routes.push({\n                amms: item,\n                mints: _mints,\n              });\n            }\n          });\n        }\n      });\n    }\n  };\n\n  walkTheTree({\n    inputMint: inputMintString,\n    amount,\n  });\n\n  const routesInfo: RouteInfo[] = routes\n    .map((route) => {\n      const { amms, mints } = route;\n\n      // Chain all amms\n      let marketInfos: MarketInfo[] = [];\n      let intermediateAmount = amount;\n      let otherAmountThreshold = ZERO;\n      const platformFeeSupported = isPlatformFeeSupported(swapMode, amms);\n      const tokenMints: PublicKey[] = mints;\n\n      const legs = amms.length;\n      for (const [i, amm] of amms.entries()) {\n        try {\n          const sourceMint = tokenMints[i];\n          const destinationMint = tokenMints[i + 1];\n\n          const tradeId = getInputOutputId({\n            inputMint: sourceMint.toBase58(),\n            outputMint: destinationMint.toBase58(),\n          });\n\n          const cacheQuote = tradeIdQuoteMap\n            .get(tradeId)\n            ?.get(getQuoteId({ ammId: amm.id, amount: intermediateAmount }));\n\n          const quote =\n            cacheQuote ||\n            amm.getQuote({\n              sourceMint,\n              destinationMint,\n              amount: intermediateAmount,\n              swapMode,\n            });\n\n          // Platform fee applicable only on last leg\n          const isLastLeg = legs - 1 === i;\n          const platformFee =\n            isLastLeg && platformFeeSupported\n              ? {\n                  amount: JSBI.divide(\n                    JSBI.multiply(quote.outAmount, JSBI.BigInt(platformFeeBps)),\n                    PLATFORM_FEE_DENOMINATOR,\n                  ),\n                  mint: destinationMint.toBase58(),\n                  pct: platformFeeBps / 100,\n                }\n              : { amount: ZERO, mint: destinationMint.toBase58(), pct: 0 };\n\n          const amountForFees = swapMode === SwapMode.ExactIn ? quote.outAmount : quote.inAmount;\n          let amountAfterFees =\n            swapMode === SwapMode.ExactIn\n              ? JSBI.subtract(amountForFees, platformFee.amount)\n              : JSBI.add(amountForFees, platformFee.amount);\n\n          if (JSBI.lessThan(amountAfterFees, ZERO)) {\n            amountAfterFees = ZERO;\n          }\n\n          const legOtherAmountThreshold = JSBI.BigInt(\n            swapMode === SwapMode.ExactIn\n              ? new Decimal(amountAfterFees.toString()).mul(1 - slippage / 100).ceil()\n              : new Decimal(amountAfterFees.toString()).mul(1 + slippage / 100).floor(),\n          );\n\n          const [inAmount, outAmount] =\n            swapMode === SwapMode.ExactIn ? [quote.inAmount, amountAfterFees] : [amountAfterFees, intermediateAmount];\n\n          marketInfos.push({\n            amm,\n            inputMint: sourceMint,\n            outputMint: destinationMint,\n            notEnoughLiquidity: quote.notEnoughLiquidity,\n            minInAmount: quote.minInAmount,\n            minOutAmount: quote.minOutAmount,\n            inAmount,\n            outAmount,\n            priceImpactPct: quote.priceImpactPct,\n            lpFee: {\n              amount: quote.feeAmount,\n              mint: quote.feeMint,\n              pct: quote.feePct,\n            },\n            platformFee,\n          });\n\n          intermediateAmount = swapMode === SwapMode.ExactIn ? amountAfterFees : amount;\n          otherAmountThreshold = legOtherAmountThreshold;\n        } catch (e: any) {\n          if (IS_DEV) {\n            console.error(e);\n          }\n\n          return undefined;\n        }\n      }\n\n      return {\n        marketInfos,\n        getDepositAndFee: () => getDepositAndFeeForRoute({ marketInfos }),\n        inAmount: marketInfos[0].inAmount,\n        outAmount: intermediateAmount,\n        amount,\n        otherAmountThreshold,\n        swapMode,\n        priceImpactPct:\n          1 -\n          marketInfos.reduce((priceFactor, marketInfo) => {\n            priceFactor *= 1 - marketInfo.priceImpactPct;\n            return priceFactor;\n          }, 1),\n      };\n    })\n    .filter((item): item is RouteInfo => item !== undefined)\n    .sort((a, b) => (JSBI.greaterThanOrEqual(b.outAmount, a.outAmount) ? 1 : -1)); // sort based on which one have better output\n\n  return routesInfo;\n}\n","import { parseErrorForTransaction, TransactionError, UNKNOWN_ERROR } from '@mercurial-finance/optimist';\nimport { TransactionResponse } from '@solana/web3.js';\nimport { ErrorDetails, JUPITER_ERRORS } from '../../constants';\nimport { JUPITER_PROGRAM_ID } from '../../lib/jupiterInstruction';\n\nconst codeToErrorRecord = Object.values(JUPITER_ERRORS).reduce((record, error) => {\n  record[error.code] = error;\n  return record;\n}, {} as Record<number, ErrorDetails>);\n\n// Throws when not found or contains error to satisfy upper control flow\nexport async function validateTransactionResponse({\n  txid,\n  transactionResponse,\n}: {\n  txid: string;\n  transactionResponse: TransactionResponse | null;\n}): Promise<TransactionResponse | TransactionError | null> {\n  if (!transactionResponse) {\n    return new TransactionError('Transaction was not confirmed', txid);\n  }\n  if (transactionResponse?.meta?.err) {\n    let { message, programId, code } = parseErrorForTransaction(transactionResponse);\n\n    if (programId === JUPITER_PROGRAM_ID.toBase58() && code) {\n      message = codeToErrorRecord[code]?.msg;\n    }\n\n    if (!message) {\n      message = UNKNOWN_ERROR;\n    }\n\n    return new TransactionError(message || '', txid, code);\n  }\n  return transactionResponse;\n}\n","export interface IndexedRouteMap {\n  mintKeys: string[];\n  indexedRouteMap: { [key: number]: number[] };\n}\n\nfunction getOrAddKeyToIndexMap(pk: string, mintToIndexMap: Map<string, number>): number {\n  let keyIndex = mintToIndexMap.get(pk);\n  if (keyIndex === undefined) {\n    keyIndex = mintToIndexMap.size;\n    mintToIndexMap.set(pk, keyIndex);\n  }\n  return keyIndex;\n}\n\n/** An indexed route map which is light (less data to compress/decompress) and can quickly be inflated into the full route map  */\nexport function routeMapToIndexedRouteMap(routeMap: Map<string, string[]>) {\n  const { mintToIndexMap, indexedRouteMap: innerIndexedRouteMap } = Array.from(routeMap).reduce<{\n    mintToIndexMap: Map<string, number>;\n    indexedRouteMap: Record<number, number[]>;\n  }>(\n    ({ mintToIndexMap, indexedRouteMap }, [key, item]) => {\n      const keyIndex = getOrAddKeyToIndexMap(key, mintToIndexMap);\n\n      const indexedOutputMintCache = [];\n      for (const routeOutputKey of item) {\n        const routeOutputKeyIndex = getOrAddKeyToIndexMap(routeOutputKey, mintToIndexMap);\n        indexedOutputMintCache.push(routeOutputKeyIndex);\n      }\n      indexedRouteMap[keyIndex] = indexedOutputMintCache;\n\n      return { mintToIndexMap, indexedRouteMap };\n    },\n    { mintToIndexMap: new Map(), indexedRouteMap: {} },\n  );\n\n  const indexedRouteMap = {\n    mintKeys: [...mintToIndexMap.keys()],\n    indexedRouteMap: innerIndexedRouteMap,\n  };\n\n  return indexedRouteMap;\n}\n\nexport function indexedRouteMapToRouteMap(indexedRouteMap: IndexedRouteMap) {\n  const getMint = (index: number) => indexedRouteMap.mintKeys[index];\n\n  // generate route map by replacing indexes with mint addresses\n  const generatedRouteMap: Map<string, string[]> = new Map();\n  Object.keys(indexedRouteMap.indexedRouteMap).forEach((key) => {\n    generatedRouteMap.set(\n      getMint(key as any as number),\n      indexedRouteMap['indexedRouteMap'][key as any as number].map((index: number) => getMint(index)),\n    );\n  });\n\n  return generatedRouteMap;\n}\n","import { ASSOCIATED_TOKEN_PROGRAM_ID, Token, TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport {\n  BlockhashWithExpiryBlockHeight,\n  Cluster,\n  Connection,\n  FeeCalculator,\n  Keypair,\n  PublicKey,\n  Transaction,\n  TransactionResponse,\n  TransactionSignature,\n} from '@solana/web3.js';\n\nimport { OpenOrders } from '@project-serum/serum';\nimport {\n  computeInputRouteSegments,\n  computeRouteMap,\n  fetchMarketCache,\n  getAllAmms,\n  getTokenRouteSegments,\n  isSplitSetupRequired,\n  RouteInfo,\n} from './routes';\nimport { MarketInfo } from './market';\nimport {\n  DEVNET_SERUM_DEX_PROGRAM,\n  JUPITER_WALLET,\n  MAINNET_SERUM_DEX_PROGRAM,\n  WRAPPED_SOL_MINT,\n  MARKETS_URL,\n  SWAP_PROTOCOL_TOKENS,\n  INDEXED_ROUTE_MAP_URL,\n} from '../constants';\nimport { getDepositAndFeeFromInstructions, NO_PLATFORM_FEE } from './fee';\nimport routeToInstructions, { routeAtaInstructions } from './routeToInstructions';\nimport { getOrCreateOpenOrdersAddress } from './serum/openOrders';\nimport { createAndCloseWSOLAccount } from '../utils/token';\nimport { getEmptyInstruction, Instruction } from '../utils/instruction';\nimport { TransactionBuilder } from '../utils/TransactionBuilder';\nimport { Owner } from '../utils/Owner';\nimport {\n  getSignature,\n  getTokenBalanceChangesFromTransactionResponse,\n  transactionSenderAndConfirmationWaiter,\n} from '../utils/transactionHelpers';\nimport { createInitializeTokenLedgerInstruction, TOKEN_LEDGER } from './jupiterInstruction';\nimport { fetchAccountInfos, processInputRouteSegmentToRoutesInfos } from './computeRouteInfos';\nimport type { SignerWalletAdapter } from '@solana/wallet-adapter-base';\nimport { TokenRouteSegments, PlatformFeeAndAccounts, QuoteMintToReferrer } from './types';\nimport { SerumAmm } from './serum/serumAmm';\nimport { SaberAmm } from './saber/saberAmm';\nimport { SplTokenSwapAmm } from './spl-token-swap/splTokenSwapAmm';\nimport { MercurialAmm } from './mercurial/mercurialAmm';\nimport { AldrinAmm } from './aldrin/aldrinAmm';\nimport { RaydiumAmm } from './raydium/raydiumAmm';\nimport { CropperAmm } from './cropper/cropperAmm';\nimport { SenchaAmm } from './sencha/senchaAmm';\nimport { SplitTradeAmm } from './split-trade/splitTradeAmm';\nimport { TokenMintAddress, SetupInstructions } from './types';\nimport { getPlatformFeeAccounts } from './fee';\nimport { Amm, SwapMode } from './amm';\nimport { validateTransactionResponse } from '../utils/tx/errors';\nimport { TransactionError } from '@mercurial-finance/optimist';\nimport { getSaberWrappedDecimalsAmms, SaberAddDecimalsAmm } from './saber/saberAddDecimalsAmm';\nimport { getTopTokens } from './getTopTokens';\nimport { WhirlpoolAmm } from './whirlpool/whirlpoolAmm';\nimport { CykuraAmm } from './cykura/cykuraAmm';\nimport JSBI from 'jsbi';\nimport { indexedRouteMapToRouteMap, IndexedRouteMap } from '../utils/indexedRouteMap';\nimport fetch from 'cross-fetch';\n\nexport type SerumOpenOrdersMap = Map<string, PublicKey>;\nexport { MarketInfo } from './market';\nexport { getPlatformFeeAccounts } from './fee';\nexport * from './types';\nexport { transactionSenderAndConfirmationWaiter } from '../utils/transactionHelpers';\nexport { routeMapToIndexedRouteMap, indexedRouteMapToRouteMap, IndexedRouteMap } from '../utils/indexedRouteMap';\nexport { RouteInfo, TransactionFeeInfo, getRouteInfoUniqueId } from './routes';\nexport { getSaberWrappedDecimalsAmms, TransactionError };\nexport {\n  Amm,\n  AldrinAmm,\n  CykuraAmm,\n  RaydiumAmm,\n  SerumAmm,\n  SaberAmm,\n  SplTokenSwapAmm,\n  MercurialAmm,\n  CropperAmm,\n  SenchaAmm,\n  SaberAddDecimalsAmm,\n  SplitTradeAmm,\n  WhirlpoolAmm,\n  SwapMode,\n};\n\nexport type SwapResult =\n  | {\n      txid: string;\n      inputAddress: PublicKey;\n      outputAddress: PublicKey;\n      inputAmount: number;\n      outputAmount: number;\n    }\n  | {\n      error?: TransactionError;\n    };\n\ntype InputMintAndOutputMint = string;\n\nexport type JupiterLoadParams = {\n  connection: Connection;\n  cluster: Cluster;\n  user?: PublicKey | Keypair;\n  platformFeeAndAccounts?: PlatformFeeAndAccounts;\n  /** See {@link Jupiter.quoteMintToReferrer} */\n  quoteMintToReferrer?: Map<TokenMintAddress, PublicKey>;\n  /** See {@link Jupiter.routeCacheDuration} */\n  routeCacheDuration?: number;\n  /** See {@link Jupiter.wrapUnwrapSOL} */\n  wrapUnwrapSOL?: boolean;\n  /** A markets cache URL, default to jupiter markets cache */\n  marketUrl?: string;\n  /**\n   * On multi-leg trades, the intermediate tokens is restricted to X top tokens in volume and certain utility tokens (Saber wrapped decimal tokens)\n   * This is to reduce the load by having to compute trades through routes that are not so liquid\n   */\n  restrictIntermediateTokens?: boolean;\n  /** See {@link Jupiter.tokenLedger}, default to the standard Jupiter token ledger */\n  tokenLedger?: PublicKey;\n  /** See {@link Jupiter.shouldLoadSerumOpenOrders}, default to true */\n  shouldLoadSerumOpenOrders?: boolean;\n};\n\nexport type OnTransaction = (\n  txid: TransactionSignature,\n  totalTxs: number,\n  txDescription: IConfirmationTxDescription,\n  awaiter: Promise<TransactionResponse | TransactionError | null>,\n) => void;\n\nexport type IConfirmationTxDescription = 'SETUP' | 'SWAP' | 'CLEANUP';\ntype ExecuteParams = {\n  wallet?: Pick<SignerWalletAdapter, 'sendTransaction' | 'signAllTransactions' | 'signTransaction'>;\n  /**\n   * Allows to customize control of sending and awaiting confirmation in the single/multi transaction flow\n   */\n  onTransaction?: OnTransaction;\n};\n\nexport class Jupiter {\n  /* promise because we can choose not to await it when we dont need it */\n  private serumOpenOrdersPromise: Promise<SerumOpenOrdersMap> | undefined = undefined;\n  private user: Keypair | PublicKey | undefined;\n  private routeCache = new Map<InputMintAndOutputMint, { fetchTimestamp: number }>();\n\n  constructor(\n    private connection: Connection,\n    private cluster: Cluster,\n    public tokenRouteSegments: TokenRouteSegments,\n    private feeCalculator: FeeCalculator,\n    private platformFeeAndAccounts: PlatformFeeAndAccounts,\n    /** Referrer account to collect Serum referrer fees for each given quote mint, the referrer fee is 20% of the Serum protocol fee */\n    private quoteMintToReferrer: QuoteMintToReferrer,\n    /**\n     * -1, it will not fetch when shouldFetch == false\n     * 0, it will fetch everytime\n     * A duration in ms, the time interval between AMM accounts refetch, recommendation for a UI 20 seconds,\n     */\n    private routeCacheDuration: number = 0,\n    /** When set to true (default) native SOL is wrapped and wSOL unwrapped in each swap, otherwise it assumes wSOL is funded when it exists */\n    private wrapUnwrapSOL: boolean = true,\n    /** A token ledger which can be used to track volume as it can be made unique per platform, also alleviates write locks on a single token ledger account */\n    private tokenLedger: PublicKey,\n    private intermediateTokens: TokenMintAddress[] | undefined,\n    /** Perform a getProgramAccounts on user's serum open orders. Recomended to turn off if RPC is slow to perform a gPA */\n    private shouldLoadSerumOpenOrders: boolean,\n  ) {}\n\n  /**\n   * load performs the necessary async scaffolding of the Jupiter object\n   */\n  static async load({\n    connection,\n    cluster,\n    user,\n    platformFeeAndAccounts = NO_PLATFORM_FEE,\n    quoteMintToReferrer,\n    routeCacheDuration = 0,\n    wrapUnwrapSOL = true,\n    // @internal,\n    marketUrl,\n    restrictIntermediateTokens = false,\n    tokenLedger = TOKEN_LEDGER,\n    shouldLoadSerumOpenOrders = true,\n  }: JupiterLoadParams) {\n    const [\n      tokenRouteSegments,\n      {\n        value: { feeCalculator },\n      },\n      _quoteMintToReferrer,\n      intermediateTokens,\n    ] = await Promise.all([\n      Jupiter.fetchTokenRouteSegments(connection, cluster, marketUrl),\n      connection.getRecentBlockhashAndContext('processed'),\n      quoteMintToReferrer ?? getPlatformFeeAccounts(connection, new PublicKey(JUPITER_WALLET)),\n      restrictIntermediateTokens ? Jupiter.getIntermediateTokens() : undefined,\n    ]);\n\n    const jupiter = new Jupiter(\n      connection,\n      cluster,\n      tokenRouteSegments,\n      feeCalculator,\n      platformFeeAndAccounts,\n      _quoteMintToReferrer,\n      routeCacheDuration,\n      wrapUnwrapSOL,\n      tokenLedger,\n      intermediateTokens,\n      shouldLoadSerumOpenOrders,\n    );\n    if (user) jupiter.setUserPublicKey(user);\n    return jupiter;\n  }\n\n  getAccountToAmmMap() {\n    const accountToAmmMap = new Map<string, Amm>();\n    this.tokenRouteSegments.forEach((tokenRouteSegment) => {\n      Array.from(tokenRouteSegment.values()).forEach((marketInfos) => {\n        marketInfos.forEach((amm) => {\n          amm.getAccountsForUpdate().forEach((account) => {\n            accountToAmmMap.set(account.toBase58(), amm);\n          });\n        });\n      });\n    });\n    return accountToAmmMap;\n  }\n\n  getAmmIdToAmmMap() {\n    const ammIdToAmmMap = new Map<string, Amm>();\n\n    this.tokenRouteSegments.forEach((tokenRouteSegment) => {\n      Array.from(tokenRouteSegment.values()).forEach((marketInfos) => {\n        marketInfos.forEach((amm) => {\n          ammIdToAmmMap.set(amm.id, amm);\n        });\n      });\n    });\n\n    return ammIdToAmmMap;\n  }\n\n  public getDepositAndFees = async ({\n    marketInfos,\n    userPublicKey,\n    /**\n     * We can use Jupiter.findSerumOpenOrdersForOwner for this, if we want to reuse existing user serum open orders.\n     */\n    serumOpenOrdersPromise = Promise.resolve(new Map()),\n  }: {\n    marketInfos: MarketInfo[];\n    userPublicKey: PublicKey;\n    serumOpenOrdersPromise?: Promise<SerumOpenOrdersMap>;\n  }) => {\n    return getDepositAndFeeFromInstructions({\n      connection: this.connection,\n      feeCalculator: this.feeCalculator,\n      inputMint: marketInfos[0].inputMint,\n      marketInfos,\n      serumOpenOrdersPromise,\n      owner: new Owner(userPublicKey),\n      wrapUnwrapSOL: this.wrapUnwrapSOL,\n    });\n  };\n\n  private getDepositAndFeesForUser = ({ marketInfos }: { marketInfos: MarketInfo[] }) => {\n    if (this.user && this.serumOpenOrdersPromise) {\n      const user = new Owner(this.user);\n\n      return this.getDepositAndFees({\n        marketInfos,\n        userPublicKey: user.publicKey,\n        serumOpenOrdersPromise: this.serumOpenOrdersPromise,\n      });\n    }\n    return Promise.resolve(undefined);\n  };\n\n  async computeRoutes({\n    inputMint,\n    outputMint,\n    amount,\n    slippage,\n    feeBps = 0,\n    forceFetch,\n    onlyDirectRoutes,\n    swapMode = SwapMode.ExactIn,\n    filterTopNResult,\n  }: {\n    inputMint: PublicKey;\n    outputMint: PublicKey;\n    amount: JSBI;\n    slippage: number;\n    feeBps?: number;\n    forceFetch?: boolean;\n    onlyDirectRoutes?: boolean;\n    swapMode?: SwapMode;\n    /**\n     * filter how many top individual route to be used to compared\n     */\n    filterTopNResult?: number;\n  }) {\n    const inputMintString = inputMint.toBase58();\n    const outputMintString = outputMint.toBase58();\n\n    // Platform fee can only be applied when fee account exists\n    const platformFeeBps =\n      feeBps ||\n      (this.platformFeeAndAccounts.feeAccounts.get(outputMintString) ? this.platformFeeAndAccounts.feeBps : 0);\n\n    const now = new Date().getTime();\n\n    // do sort so that it's always the same order for the same inputMint and outputMint and vice versa\n    const inputMintAndOutputMint = [inputMintString, outputMintString].sort((a, b) => a.localeCompare(b)).join('');\n\n    const routeCache = this.routeCache.get(inputMintAndOutputMint);\n\n    const inputRouteSegment = computeInputRouteSegments({\n      inputMint: inputMintString,\n      outputMint: outputMintString,\n      tokenRouteSegments: this.tokenRouteSegments,\n      intermediateTokens: this.intermediateTokens,\n      onlyDirectRoutes,\n      swapMode,\n    });\n\n    let shouldBustCache = false;\n    // special -1 condition to not fetch\n    if (this.routeCacheDuration === -1) {\n      shouldBustCache = false;\n    } else if (this.routeCacheDuration === 0) {\n      shouldBustCache = true;\n    } else {\n      if (routeCache) {\n        const { fetchTimestamp } = routeCache;\n        if (now - fetchTimestamp > this.routeCacheDuration) {\n          shouldBustCache = true;\n        }\n      } else {\n        shouldBustCache = true;\n      }\n    }\n\n    if (forceFetch || shouldBustCache) {\n      await fetchAccountInfos(this.connection, inputRouteSegment);\n      this.routeCache.set(inputMintAndOutputMint, {\n        fetchTimestamp: new Date().getTime(),\n      });\n    }\n\n    try {\n      const routesInfos = processInputRouteSegmentToRoutesInfos({\n        inputRouteSegment,\n        inputMint,\n        outputMint,\n        amount,\n        getDepositAndFeeForRoute: this.getDepositAndFeesForUser,\n        onlyDirectRoutes,\n        slippage,\n        platformFeeBps,\n        filterTopNResult,\n        swapMode,\n      });\n\n      return {\n        routesInfos,\n        /* indicate if the result is fetched or get from cache */\n        cached: !(forceFetch || shouldBustCache),\n      };\n    } catch (e) {\n      throw e;\n    } finally {\n      // clear cache if it is expired\n      this.routeCache.forEach(({ fetchTimestamp }, key) => {\n        if (fetchTimestamp - now > this.routeCacheDuration) {\n          this.routeCache.delete(key);\n        }\n      });\n    }\n  }\n\n  setUserPublicKey(userPublicKey: Keypair | PublicKey) {\n    this.user = userPublicKey;\n    const owner = new Owner(this.user);\n    this.serumOpenOrdersPromise = this.shouldLoadSerumOpenOrders\n      ? Jupiter.findSerumOpenOrdersForOwner({\n          connection: this.connection,\n          cluster: this.cluster,\n          userPublicKey: owner.publicKey,\n        })\n      : Promise.resolve(new Map());\n  }\n\n  /**\n   * The token route segments contains all the routes and the market meta information.\n   */\n  static async fetchTokenRouteSegments(connection: Connection, cluster: Cluster, marketUrl?: string) {\n    const marketCaches = await fetchMarketCache(marketUrl || MARKETS_URL[cluster]);\n    const amms = await getAllAmms(connection, marketCaches);\n\n    const tokenRouteSegments = getTokenRouteSegments(amms);\n\n    return tokenRouteSegments;\n  }\n\n  /**\n   * This generate a routeMap which represents every possible output token mint for a given input token mint.\n   * For example, we have SOL to USDC and this pairs have many routings like\n   * SOL => USDT\n   * USDT => USDC\n   * SOL => USDC\n   *\n   * From here we know that we can have 2 different routing of SOL => USDC.\n   * We do single level routing map but for all coins which result in the route map below:\n   * SOL => USDT, USDC\n   * USDT => SOL\n   * USDC => SOL, USDT\n   *\n   * From this route map we can map out all possible route from one to another by checking the intersection.\n   */\n  getRouteMap(onlyDirectRoutes?: boolean) {\n    return computeRouteMap(this.tokenRouteSegments, this.intermediateTokens, onlyDirectRoutes);\n  }\n\n  static async getRemoteRouteMap(\n    {\n      onlyDirectRoutes,\n      restrictIntermediateTokens,\n    }: { onlyDirectRoutes?: boolean; restrictIntermediateTokens?: boolean },\n    indexedRouteMapUrl?: string,\n  ) {\n    let url = indexedRouteMapUrl || INDEXED_ROUTE_MAP_URL;\n    if (onlyDirectRoutes) {\n      url = url.concat('?onlyDirectRoutes=true');\n    } else if (restrictIntermediateTokens) {\n      url = url.concat('?restrictIntermediateTokens=true');\n    }\n\n    const indexedRouteMap = (await (await fetch(url)).json()) as IndexedRouteMap;\n\n    return indexedRouteMapToRouteMap(indexedRouteMap);\n  }\n\n  /**\n   * Query existing open order account, this query is slow.\n   * We suggest to fetch this in the background.\n   */\n  static findSerumOpenOrdersForOwner = async ({\n    userPublicKey,\n    cluster,\n    connection,\n  }: {\n    userPublicKey: PublicKey;\n    cluster: Cluster;\n    connection: Connection;\n  }) => {\n    const newMarketToOpenOrdersAddress: SerumOpenOrdersMap = new Map();\n\n    if (userPublicKey) {\n      const programId = cluster === 'mainnet-beta' ? MAINNET_SERUM_DEX_PROGRAM : DEVNET_SERUM_DEX_PROGRAM;\n\n      const allOpenOrders = await OpenOrders.findForOwner(connection, userPublicKey, programId);\n\n      allOpenOrders.forEach((openOrders) => {\n        newMarketToOpenOrdersAddress.set(openOrders.market.toString(), openOrders.address);\n      });\n    }\n    return newMarketToOpenOrdersAddress;\n  };\n\n  public exchange: (params: {\n    routeInfo: RouteInfo;\n    /**\n     * This will overwrite the default Jupiter.setUser, useful for stateless usage like API\n     */\n    userPublicKey?: PublicKey;\n    /**\n     * This will overwrite the default token ledger, useful for stateless usage like API\n     */\n    tokenLedger?: PublicKey;\n    /**\n     * This will overwrite the default fee account, useful for stateless usage like API\n     */\n    feeAccount?: PublicKey;\n    /**\n     * This will overwrite the default wrapUnwrapSOL, useful for stateless usage like API\n     */\n    wrapUnwrapSOL?: boolean;\n    /**\n     * The transaction will use the blockhash and valid blockheight to create transaction\n     */\n    blockhashWithExpiryBlockHeight?: BlockhashWithExpiryBlockHeight;\n  }) => Promise<{\n    transactions: {\n      setupTransaction?: Transaction;\n      swapTransaction: Transaction;\n      cleanupTransaction?: Transaction;\n    };\n    execute: (params?: ExecuteParams) => Promise<SwapResult>;\n  }> = async ({ routeInfo, userPublicKey, feeAccount, wrapUnwrapSOL, tokenLedger, blockhashWithExpiryBlockHeight }) => {\n    const { connection, serumOpenOrdersPromise } = this;\n    const user: PublicKey | Keypair | undefined = userPublicKey || this.user;\n    if (!user) {\n      throw new Error('user not found');\n    }\n\n    const owner = new Owner(user);\n\n    const lastMarketInfoIndex = routeInfo.marketInfos.length - 1;\n    const inputMint = routeInfo.marketInfos[0].inputMint;\n    const outputMint = routeInfo.marketInfos[lastMarketInfoIndex].outputMint;\n    const _wrapUnwrapSOL = wrapUnwrapSOL ?? this.wrapUnwrapSOL;\n\n    const [sourceInstruction, ataInstructions, openOrdersInstructions] = await Promise.all([\n      inputMint.equals(WRAPPED_SOL_MINT) && _wrapUnwrapSOL\n        ? createAndCloseWSOLAccount({\n            connection,\n            owner,\n            amount: routeInfo.swapMode === SwapMode.ExactIn ? routeInfo.amount : routeInfo.otherAmountThreshold,\n          })\n        : Token.getAssociatedTokenAddress(\n            ASSOCIATED_TOKEN_PROGRAM_ID,\n            TOKEN_PROGRAM_ID,\n            inputMint,\n            owner.publicKey,\n            true,\n          ).then((address) => ({\n            ...getEmptyInstruction(),\n            address,\n          })),\n      routeAtaInstructions({ connection, marketInfos: routeInfo.marketInfos, owner, unwrapSOL: _wrapUnwrapSOL }),\n      Promise.all(\n        routeInfo.marketInfos.map(async ({ amm }) => {\n          if (amm instanceof SerumAmm || amm instanceof SplitTradeAmm) {\n            if (!amm.market) return;\n            return await getOrCreateOpenOrdersAddress(\n              connection,\n              owner.publicKey,\n              amm.market,\n              await serumOpenOrdersPromise,\n            );\n          }\n          return;\n        }),\n      ),\n    ]);\n\n    const instructions = {\n      intermediate: ataInstructions.userIntermediaryTokenAccountResult,\n      destination: ataInstructions.userDestinationTokenAccountResult,\n      openOrders: openOrdersInstructions,\n    };\n\n    const hasOpenOrders = instructions.openOrders.filter(Boolean).length > 0;\n\n    // Construct platform fee\n    feeAccount = feeAccount || this.platformFeeAndAccounts.feeAccounts.get(outputMint.toBase58());\n\n    const platformFee = feeAccount\n      ? {\n          feeBps:\n            this.platformFeeAndAccounts.feeBps ||\n            Math.floor(routeInfo.marketInfos[lastMarketInfoIndex].platformFee.pct * 100),\n          feeAccount,\n        }\n      : undefined;\n\n    const preparedInstructions = await routeToInstructions({\n      user: owner,\n      tokenLedger: tokenLedger || this.tokenLedger,\n      openOrdersAddresses: instructions.openOrders.map((oo) => oo?.address),\n      userSourceTokenAccountAddress: sourceInstruction.address,\n      userIntermediaryTokenAccountAddress: instructions.intermediate?.address,\n      userDestinationTokenAccountAddress: instructions.destination.address,\n      routeInfo,\n      platformFee,\n      quoteMintToReferrer: this.quoteMintToReferrer,\n    });\n\n    const { needCleanup, needSetup } = isSplitSetupRequired(routeInfo.marketInfos, {\n      hasSerumOpenOrderInstruction: hasOpenOrders,\n    });\n\n    const setupTransactionBuilder = new TransactionBuilder(connection, owner.publicKey, owner);\n\n    const transactionBuilder = new TransactionBuilder(connection, owner.publicKey, owner);\n\n    const cleanupTransactionBuilder = new TransactionBuilder(connection, owner.publicKey, owner);\n\n    const ixs = [\n      instructions.intermediate,\n      sourceInstruction,\n      // if source address the same as destination address, then we don't need to setup or cleanup twice, mainly SOL-SOL\n      !instructions.destination.address.equals(sourceInstruction.address) && instructions.destination,\n    ];\n\n    if (needSetup) {\n      if (hasOpenOrders) {\n        instructions.openOrders.forEach((openOrders) => {\n          if (openOrders) {\n            setupTransactionBuilder.addInstruction(openOrders);\n          }\n        });\n      }\n\n      ixs.forEach((instruction) => {\n        if (instruction) {\n          // we cannot put cleanup here because we cannot do cleanup in setupTransaction\n          setupTransactionBuilder.addInstruction({\n            ...instruction,\n            cleanupInstructions: [],\n          });\n\n          if (instruction.cleanupInstructions.length) {\n            const cleanupIx = {\n              ...getEmptyInstruction(),\n              cleanupInstructions: instruction.cleanupInstructions,\n            };\n            if (needCleanup) {\n              cleanupTransactionBuilder.addInstruction(cleanupIx);\n            } else {\n              transactionBuilder.addInstruction(cleanupIx);\n            }\n          }\n        }\n      });\n    } else {\n      if (hasOpenOrders) {\n        instructions.openOrders.forEach((openOrders) => {\n          if (openOrders) {\n            transactionBuilder.addInstruction(openOrders);\n          }\n        });\n      }\n\n      ixs.forEach((instruction) => {\n        if (instruction) {\n          transactionBuilder.addInstruction(instruction);\n        }\n      });\n    }\n\n    transactionBuilder.addInstruction(preparedInstructions);\n\n    blockhashWithExpiryBlockHeight =\n      blockhashWithExpiryBlockHeight || (await this.connection.getLatestBlockhash('confirmed'));\n\n    const { transaction: setupTransaction } = await setupTransactionBuilder.build(blockhashWithExpiryBlockHeight);\n\n    const { transaction } = await transactionBuilder.build(blockhashWithExpiryBlockHeight);\n\n    const { transaction: cleanupTransaction } = await cleanupTransactionBuilder.build(blockhashWithExpiryBlockHeight);\n\n    const [setupTransactionObject, swapTransactionObject, cleanupTransactionObject] = [\n      setupTransaction.instructions.length ? setupTransaction : undefined,\n      transaction,\n      cleanupTransaction.instructions.length ? cleanupTransaction : undefined,\n    ];\n\n    const setupInstructions = instructions;\n    return {\n      transactions: {\n        setupTransaction: setupTransactionObject,\n        swapTransaction: swapTransactionObject,\n        cleanupTransaction: cleanupTransactionObject,\n      },\n      execute: ({ wallet, onTransaction }: ExecuteParams = {}) =>\n        this.executeInternal({\n          wallet,\n          onTransaction,\n          inputMint,\n          outputMint,\n          sourceInstruction,\n          setupInstructions,\n          setupTransaction: setupTransactionObject,\n          swapTransaction: swapTransactionObject,\n          cleanupTransaction: cleanupTransactionObject,\n          wrapUnwrapSOL: _wrapUnwrapSOL,\n          owner,\n        }),\n    };\n  };\n\n  /** sign, send and await confirmation for an exchange */\n  private async executeInternal({\n    wallet,\n    onTransaction,\n    inputMint,\n    outputMint,\n    sourceInstruction,\n    setupInstructions,\n    setupTransaction,\n    swapTransaction,\n    cleanupTransaction,\n    owner,\n    wrapUnwrapSOL,\n  }: {\n    wallet: ExecuteParams['wallet'];\n    onTransaction?: OnTransaction;\n    inputMint: PublicKey;\n    outputMint: PublicKey;\n    sourceInstruction: Instruction & { address: PublicKey };\n    setupInstructions: SetupInstructions;\n    setupTransaction?: Transaction;\n    swapTransaction: Transaction;\n    cleanupTransaction?: Transaction;\n    wrapUnwrapSOL?: boolean;\n    owner: Owner;\n  }): Promise<SwapResult> {\n    let swapError: TransactionError | undefined = undefined;\n    let swapResult: SwapResult | undefined = undefined;\n\n    try {\n      const transactions = [setupTransaction, swapTransaction, cleanupTransaction].filter(\n        (tx): tx is Transaction => tx !== undefined,\n      );\n\n      const totalTxs = transactions.length;\n\n      if (owner.signer) {\n        const signer = owner.signer;\n        transactions.forEach((transaction) => {\n          transaction.sign(signer);\n        });\n      } else {\n        if (!wallet) {\n          throw new Error('Signer wallet not found');\n        }\n        if (totalTxs > 1) {\n          const signedTransactions = await wallet.signAllTransactions(transactions);\n          let i = 0;\n          [setupTransaction, swapTransaction, cleanupTransaction] = [\n            setupTransaction ? signedTransactions[i++] : undefined,\n            signedTransactions[i++],\n            cleanupTransaction ? signedTransactions[i++] : undefined,\n          ];\n        } else {\n          swapTransaction = await wallet.signTransaction(swapTransaction);\n        }\n      }\n\n      if (setupTransaction) {\n        let setupTxid = getSignature(setupTransaction);\n        const setupTransactionSender = async () => {\n          return await validateTransactionResponse(\n            await transactionSenderAndConfirmationWaiter(this.connection, setupTransaction!),\n          );\n        };\n        const setupPromise = setupTransactionSender();\n        onTransaction?.(setupTxid, totalTxs, 'SETUP', setupPromise);\n        const setupResult = await setupPromise;\n        if (setupResult instanceof Error) {\n          throw swapResult;\n        }\n      }\n\n      const swapTxid = getSignature(swapTransaction);\n\n      try {\n        const swapTransactionSender = async () => {\n          return await validateTransactionResponse(\n            await transactionSenderAndConfirmationWaiter(this.connection, swapTransaction),\n          );\n        };\n        const swapPromise = swapTransactionSender();\n        onTransaction?.(swapTxid, totalTxs, 'SWAP', swapPromise);\n        const transactionResponse = await swapPromise;\n\n        if (transactionResponse instanceof Error) {\n          throw transactionResponse;\n        }\n\n        const [sourceTokenBalanceChange, destinationTokenBalanceChange] = getTokenBalanceChangesFromTransactionResponse(\n          {\n            txid: swapTxid,\n            inputMint,\n            outputMint,\n            user: owner.publicKey,\n            sourceAddress: sourceInstruction.address,\n            destinationAddress: setupInstructions.destination.address,\n            transactionResponse,\n            hasWrappedSOL: Boolean(cleanupTransaction) || !wrapUnwrapSOL,\n          },\n        );\n\n        swapResult = {\n          txid: swapTxid,\n          inputAddress: sourceInstruction.address,\n          outputAddress: setupInstructions.destination.address,\n          inputAmount: sourceTokenBalanceChange,\n          outputAmount: destinationTokenBalanceChange,\n        };\n      } catch (e: any) {\n        swapError = e;\n      } finally {\n        if (cleanupTransaction) {\n          const cleanupTxid = getSignature(cleanupTransaction);\n          const cleanupTransactionSender = async () => {\n            return validateTransactionResponse(\n              await transactionSenderAndConfirmationWaiter(this.connection, cleanupTransaction!),\n            );\n          };\n\n          const cleanupPromise = cleanupTransactionSender();\n          onTransaction?.(cleanupTxid, totalTxs, 'CLEANUP', cleanupPromise);\n          await cleanupPromise;\n        }\n      }\n\n      if (swapError || !swapResult) {\n        throw swapError || new Error('Swap failed');\n      }\n\n      // return must be after `finally` clause to ensure we wait what we done in the `finally`\n      return swapResult;\n    } catch (error) {\n      return { error: error as TransactionError };\n    } finally {\n      this.routeCache.clear();\n    }\n  }\n\n  static async getIntermediateTokens() {\n    const intermediateTokensSet = await getTopTokens();\n    for (const swapProtocolToken of SWAP_PROTOCOL_TOKENS) {\n      intermediateTokensSet.add(swapProtocolToken);\n    }\n    const saberDecimalAmms = getSaberWrappedDecimalsAmms();\n\n    saberDecimalAmms.forEach((item) => {\n      intermediateTokensSet.add(item.wrappedToken.addDecimals.mint.toBase58());\n    });\n\n    return Array.from(intermediateTokensSet);\n  }\n\n  static createInitializeTokenLedgerInstruction = createInitializeTokenLedgerInstruction;\n}\n","import { AccountInfo, PublicKey } from '@solana/web3.js';\nimport {\n  ALDRIN_SWAP_V2_PROGRAM_ID,\n  ALDRIN_SWAP_PROGRAM_ID,\n  DEVNET_SERUM_DEX_PROGRAM,\n  MAINNET_SERUM_DEX_PROGRAM,\n  RAYDIUM_AMM_V4_PROGRAM_ID,\n  CROPPER_PROGRAM_ID,\n  CREMA_PROGRAM_ID,\n  SENCHA_PROGRAM_ID,\n  MERCURIAL_SWAP_PROGRAM_ID,\n  LIFINITY_PROGRAM_ID,\n  WHIRLPOOL_PROGRAM_ID,\n  CYKURA_PROGRAM_ID,\n  MARINADE_PROGRAM_ID,\n} from '../constants';\nimport { Amm } from './amm';\nimport { SerumMarket, StableSwap } from './market';\nimport { SWAP_PROGRAM_ID as SABER_SWAP_PROGRAM_ID } from '@saberhq/stableswap-sdk';\nimport { SaberAmm } from './saber/saberAmm';\nimport { SerumAmm } from './serum/serumAmm';\nimport { AldrinAmm } from './aldrin/aldrinAmm';\nimport { PROGRAM_ID_TO_LABEL } from './spl-token-swap/splTokenSwapPools';\nimport { SplTokenSwapAmm } from './spl-token-swap/splTokenSwapAmm';\nimport { MercurialAmm } from './mercurial/mercurialAmm';\nimport { RaydiumAmm } from './raydium/raydiumAmm';\nimport { CropperAmm } from './cropper/cropperAmm';\nimport { CremaAmm } from './crema/cremaAmm';\nimport { SenchaAmm } from './sencha/senchaAmm';\nimport { LifinityAmm } from './lifinity/lifinityAmm';\nimport { WhirlpoolAmm } from './whirlpool/whirlpoolAmm';\nimport { CykuraAmm } from './cykura/cykuraAmm';\nimport { MarinadeAmm } from './marinade/marinadeAmm';\nimport { createProgramAddressSyncUnsafe } from '../utils/pda';\n\nexport function ammFactory(address: PublicKey, accountInfo: AccountInfo<Buffer>, params?: any): Amm | undefined {\n  const programId = new PublicKey(accountInfo.owner);\n\n  if (programId.equals(MAINNET_SERUM_DEX_PROGRAM) || programId.equals(DEVNET_SERUM_DEX_PROGRAM)) {\n    const decoded = SerumMarket.getLayout(programId).decode(accountInfo.data);\n    if (!decoded.accountFlags.initialized || !decoded.accountFlags.market) {\n      throw new Error('Invalid market');\n    }\n    const serumMarket = new SerumMarket(decoded, 0, 0, {}, programId);\n    return new SerumAmm(serumMarket);\n  } else if (programId.equals(RAYDIUM_AMM_V4_PROGRAM_ID)) {\n    const raydiumAmm = new RaydiumAmm(address, accountInfo, params);\n    if (raydiumAmm.status === 1) {\n      return raydiumAmm;\n    }\n  } else if (programId.equals(MERCURIAL_SWAP_PROGRAM_ID)) {\n    return new MercurialAmm(address, accountInfo, params);\n  } else if (programId.equals(SABER_SWAP_PROGRAM_ID)) {\n    const nonce = accountInfo.data.slice(2, 3);\n    const stableSwap = StableSwap.loadWithData(\n      address,\n      accountInfo.data,\n      createProgramAddressSyncUnsafe([address.toBuffer(), nonce], SABER_SWAP_PROGRAM_ID),\n    );\n\n    if (stableSwap.state.isPaused || !stableSwap.state.isInitialized) return;\n\n    return new SaberAmm(stableSwap);\n  } else if (programId.equals(CREMA_PROGRAM_ID)) {\n    return new CremaAmm(address, accountInfo);\n  } else if (programId.equals(ALDRIN_SWAP_PROGRAM_ID) || programId.equals(ALDRIN_SWAP_V2_PROGRAM_ID)) {\n    return new AldrinAmm(address, accountInfo, params);\n  } else if ([...PROGRAM_ID_TO_LABEL.keys()].includes(programId.toBase58())) {\n    const label = PROGRAM_ID_TO_LABEL.get(accountInfo.owner.toBase58()) ?? 'Unknown';\n    return new SplTokenSwapAmm(address, accountInfo, label);\n  } else if (programId.equals(CROPPER_PROGRAM_ID)) {\n    return new CropperAmm(address, accountInfo, params);\n  } else if (programId.equals(SENCHA_PROGRAM_ID)) {\n    const senchaAmm = new SenchaAmm(address, accountInfo);\n    if (senchaAmm.isPaused) return;\n    return senchaAmm;\n  } else if (programId.equals(LIFINITY_PROGRAM_ID)) {\n    return new LifinityAmm(address, accountInfo);\n  } else if (programId.equals(WHIRLPOOL_PROGRAM_ID)) {\n    return new WhirlpoolAmm(address, accountInfo);\n  } else if (programId.equals(CYKURA_PROGRAM_ID)) {\n    return new CykuraAmm(address, accountInfo);\n  } else if (programId.equals(MARINADE_PROGRAM_ID)) {\n    return new MarinadeAmm(address, accountInfo);\n  }\n  // Not supported by frontend\n  return;\n}\n","import fetch from 'cross-fetch';\n\ntype Address = string;\n\nexport async function getTopTokens() {\n  const topTokens = (await (await fetch('https://cache.jup.ag/top-tokens')).json()) as Address[];\n\n  return new Set(topTokens.filter((_, idx) => idx < 60));\n}\n"],"names":["IDL","version","name","instructions","accounts","isMut","isSigner","args","type","option","defined","kind","fields","types","variants","errors","code","msg","WRAPPED_SOL_MINT","PublicKey","MAINNET_SERUM_DEX_PROGRAM","DEVNET_SERUM_DEX_PROGRAM","MARKETS_URL","devnet","testnet","RAYDIUM_AMM_V4_PROGRAM_ID","ALDRIN_SWAP_PROGRAM_ID","ALDRIN_SWAP_V2_PROGRAM_ID","SABER_ADD_DECIMALS_PROGRAM_ID","CROPPER_PROGRAM_ID","SENCHA_PROGRAM_ID","LIFINITY_PROGRAM_ID","CREMA_PROGRAM_ID","JUPITER_WALLET","MERCURIAL_SWAP_PROGRAM_ID","WHIRLPOOL_PROGRAM_ID","CYKURA_PROGRAM_ID","CYKURA_FACTORY_STATE_ADDRESS","MARINADE_PROGRAM_ID","STEPN_PROGRAM_ID","ORCA_PROGRAM_ID","STEP_TOKEN_SWAP_PROGRAM_ID","PENGUIN_PROGRAM_ID","SAROS_PROGRAM_ID","SWAP_PROTOCOL_TOKENS","JUPITER_ERRORS","Object","freeze","AlreadyInUse","InsufficientSOL","TransactionNotConfirmed","BalancesNotExtractedProperly","reduce","accErrors","error","PublicKeyLayout","Layout","constructor","property","layout","blob","super","span","this","getSpan","b","offset","decode","encode","src","toBuffer","publicKey","U64Layout","u64","toArrayLike","Buffer","uint64","uint128","createProgramAddressSyncUnsafe","seeds","programId","buffer","alloc","forEach","seed","length","MAX_SEED_LENGTH","TypeError","arr","concat","isBuffer","Uint8Array","from","byteOffset","byteLength","hash","sha256","publicKeyBytes","BN","toArray","undefined","CropperTokenSwapLayout","struct","u8","CropperStateLayout","CROPPER_STATE_ADDRESS","accountInfoToCropperPoolState","address","accountInfo","owner","decoded","data","authority","nonce","isInitialized","Boolean","ammId","serumProgramId","tokenProgramId","tokenAAccount","tokenBAccount","serumMarket","poolMint","mintA","mintB","Side","Bid","bid","Ask","ask","JUPITER_PROGRAM_ID","JUPITER_PROGRAM","Program","PRODUCTION_TOKEN_LEDGERS","TOKEN_LEDGER","Math","floor","random","stableSwapNPoolIntoMercurialExchange","swayLayout","sourceTokenAccount","destinationTokenAccount","userTransferAuthority","swapProgram","swapState","tokenProgram","TOKEN_PROGRAM_ID","poolAuthority","ammAuthority","findProgramAddressSync","replace","raydiumAmmToRaydiumSwap","raydiumAmm","userSourceTokenAccount","userDestinationTokenAccount","serumMarketKeys","Error","ammOpenOrders","poolCoinTokenAccount","poolPcTokenAccount","serumBids","serumAsks","serumEventQueue","serumCoinVaultAccount","serumPcVaultAccount","serumVaultSigner","userSourceOwner","marketIntoSerumSwap","market","openOrdersAddress","orderPayerTokenAccountAddress","coinWallet","pcWallet","vaultSigner","createProgramAddressSync","vaultSignerNonce","openOrders","requestQueue","eventQueue","bids","bidsAddress","asks","asksAddress","coinVault","baseVault","pcVault","quoteVault","orderPayerTokenAccount","dexProgram","rent","SYSVAR_RENT_PUBKEY","createMercurialExchangeInstruction","swapLayout","inAmount","minimumOutAmount","tokenLedger","platformFee","_platformFee$feeBps","remainingAccounts","swapTokenAccount","tokenAccounts","push","pubkey","isWritable","prepareRemainingAccounts","feeAccount","instruction","mercurialExchange","feeBps","createSerumSwapInstruction","sourceMint","referrer","_platformFee$feeBps2","side","equals","baseMintAddress","serumSwap","createTokenSwapInstruction","tokenSwapState","isStep","_platformFee$feeBps3","swapSource","swapDestination","tokenAccountA","tokenAccountB","stepTokenSwap","tokenSwap","tokenSwapProgram","swap","source","destination","poolToken","poolFee","createSenchaSwapInstruction","poolState","_platformFee$feeBps4","token0Mint","token0Reserves","token1Reserves","feesSource","feesDestination","token0Fees","token1Fees","senchaExchange","userAuthority","inputUserAccount","inputTokenAccount","inputFeesAccount","outputUserAccount","outputTokenAccount","outputFeesAccount","createCropperSwapInstruction","_platformFee$feeBps5","cropperTokenSwap","createRaydiumSwapInstruction","_platformFee$feeBps6","raydiumSwapV2","createAldrinSwapInstruction","_platformFee$feeBps7","userBaseTokenAccount","userQuoteTokenAccount","baseTokenMint","aldrinSwap","pool","poolSigner","baseTokenVault","quoteTokenVault","feePoolTokenAccount","walletAuthority","createAldrinV2SwapInstruction","curve","_platformFee$feeBps8","aldrinV2Swap","createCremaSwapInstruction","_platformFee$feeBps9","cremaTokenSwap","poolSourceTokenAccount","poolDestinationTokenAccount","poolTicksAccount","ticksKey","createRiskCheckAndFeeInstruction","_platformFee$feeBps10","riskCheckAndFee","createSetTokenLedgerInstruction","tokenAccountAddress","setTokenLedger","tokenAccount","saberPoolIntoSaberSwap","saberPool","sourceMintAddress","feesTokenAccount","state","tokenA","mint","tokenB","adminFeeAccount","reserve","config","swapProgramID","swapAccount","swapAuthority","createSaberSwapInstruction","stableSwap","_platformFee$feeBps11","saberSwap","createSaberAddDecimalsDepositInstruction","addDecimals","_platformFee$feeBps12","saberAddDecimalsDeposit","addDecimalsProgram","wrapper","wrapperMint","wrapperUnderlyingTokens","userUnderlyingTokens","userWrappedTokens","createSaberAddDecimalsWithdrawInstruction","_platformFee$feeBps13","saberAddDecimalsWithdraw","createLifinitySwapInstruction","_platformFee$feeBps14","tokenAMint","lifinityTokenSwap","amm","sourceInfo","destinationInfo","pythAccount","pythPcAccount","configAccount","createCykuraSwapInstruction","additionalArgs","_platformFee$feeBps15","cykuraSwap","signer","factoryState","poolAddress","inputVault","outputVault","lastObservationState","coreProgram","swapAccountMetas","nextObservationState","createMarinadeFinanceDepositInstruction","_platformFee$feeBps17","transferFrom","tempWsolTokenAccount","tempSolPda","marinadeFinanceDeposit","marinadeFinanceProgram","msolMint","marinadeStateResponse","liqPoolSolLegPda","liqPoolMsolLeg","liqPool","msolLeg","liqPoolMsolLegAuthority","reservePda","mintTo","msolMintAuthority","systemProgram","SystemProgram","userWsolTokenAccount","wsolMint","NATIVE_MINT","createMarinadeFinanceLiquidUnstakeInstruction","_platformFee$feeBps18","marinadeFinanceLiquidUnstake","treasuryMsolAccount","getMsolFrom","getMsolFromAuthority","transferSolTo","getSaberWrappedDecimalsAmms","addDecimalsJson","map","addDecimalJson","underlying","underlyingDecimals","decimals","SaberAddDecimalsAmm","WrappedToken","multiplier","JSBI","BigInt","getOutputAmount","inputAmount","inputMint","calculateWithdrawOutputAmount","calculateDepositOutputAmount","toString","multiply","divide","wrappedToken","id","label","shouldPrefetch","exactOutputSupported","toBase58","getAccountsForUpdate","Array","update","_accountInfoMap","getQuote","amount","notEnoughLiquidity","outAmount","feeAmount","ZERO","feeMint","feePct","priceImpactPct","createSwapInstructions","swapParams","otherAmountThreshold","reserveTokenMints","getTwoPermutations","array","acc","item","otherItem","chunks","size","apply","ceil","_","index","slice","async","chunkedGetMultipleAccountInfos","connection","pks","batchChunkSize","maxAccountsChunkSize","Promise","all","batch","batchPubkeys","pubkeys","methodName","_buildArgs","commitment","_rpcBatchRequest","then","batchResults","res","result","value","catch","e","flat","SwapMode","mapAddressToAccountInfos","accountInfoMap","addresses","get","tokenAccountsToJSBIs","AMM_INFO_LAYOUT_V4","nu64","RaydiumAmm","ammAccountInfo","params","coinMint","pcMint","status","ammTargetOrders","coinReserve","pcReserve","calculator","coinMintAddress","pcMintAddress","keys","swapFeeNumerator","swapFeeDenominator","Decimal","div","TokenSwapConstantProduct","Fraction","ZERO_FRACTION","static","serumMarketInfo","decodedMarket","Market","getLayout","poolCoinTokenAccountInfo","poolPcTokenAccountInfo","ammOpenOrdersAccountInfo","coinAmount","pcAmount","tokenAmountAccessor","OpenOrders","fromAccountInfo","add","baseTokenTotal","sub","String","needTakePnlCoin","quoteTokenTotal","needTakePnlPc","tokenAccountInfo","fromBuffer","outputIndex","exchange","expectedOutputAmount","fees","toNumber","priceImpact","STABLE_MARKET_ADDRESSES","getL2","orderbook","descending","isBids","key","quantity","slab","items","price","ushrn","priceLotsToDecimal","baseLotSize","_decoded","isZero","numerator","denominator","quotient","rem","umod","gcd","divideBnToDecimal","mul","quoteLotSize","_baseSplTokenMultiplier","_quoteSplTokenMultiplier","SerumAmm","_orderbooks","orderbooks","asksAccountInfo","bidsAccountInfo","Orderbook","destinationMint","outAmountMeta","fromAmount","fromMint","toMint","takerFeePct","includes","quoteMintAddress","pcIn","coinOut","bestPrice","worstPrice","totalCost","totalCoins","quoteSizeLots","quoteSizeLotsToNumber","availablePc","baseSizeLots","baseSizeLotsToNumber","lotPrice","lotQuantity","equal","orderCoinAmount","orderPcAmount","greaterThanOrEqual","numberLotsPurchasable","subtract","bestPriceDecimal","bestPriceSizeLots","totalCostSizeLots","inAmountWithoutFee","fee","lessThanOrEqual","minimum","in","out","forecastBuy","coinIn","pcOut","totalCoin","availableCoin","numberLotsCanSell","totalCoinAmountToSell","pcOutAfterFee","worstPriceDecimal","minus","greaterThan","round","forecastSell","getOutAmountMeta","minInAmount","minOutAmount","_swapParams$quoteMint","quoteMintToReferrer","HUNDRED","SplitTradeAmm","firstAmm","secondAmm","portion1","portion2","ammIds","split","isSplitSupported","firstAmmTwoPermutations","secondAmmTwoPermutations","firstAmmTwoPermutation","secondAmmTwoPermutation","every","setPortions","portion","sort","a","join","quoteParams","sourceMintString","bestSolution","firstQuote","secondQuote","p","firstAmount","secondAmount","lessThan","firstAmmFee","secondAmmFee","isValidRoute","ammA","ammB","SaberAmm","Stable","TWO","calculateAmpFactor","ONE","trade","tokenAccountInfos","info","deserializeAccount","asFraction","toFixed","inputIndex","setAmp","Percentage","number","fromFraction","toDecimalPlaces","num","denom","toDecimal","eq","p2","denomGcd","denomLcm","p1DenomAdjustment","p2DenomAdjustment","p1NumeratorAdjusted","p2NumeratorAdjusted","newNumerator","FEES_LAYOUT","POOL_FIELDS_COMMON","POOL_LAYOUT","POOL_V2_LAYOUT","STABLE_CURVE_LAYOUT","accountInfoToAldrinPoolState","isV2","curveObject","curveType","quoteTokenMint","feeBaseAccount","feeQuoteAccount","traderFee","tradeFeeNumerator","tradeFeeDenominator","ownerFee","ownerTradeFeeNumerator","ownerTradeFeeDenominator","AldrinAmm","amp","TokenSwapStable","PROGRAM_ID_TO_LABEL","Map","TokenSwapLayout","StepTokenSwapLayout","CurveType","SplTokenSwapAmm","swapStateAccountInfo","tokenSwapAccountInfo","tokenSwapData","bumpSeed","tokenPool","ownerWithdrawFeeNumerator","ownerWithdrawFeeDenominator","curveParameters","poolNonce","accountInfoToTokenSwapState","ConstantProduct","FEE_DENOMINATOR","pow","MercurialSwapLayout","u32","accountInfoToMercurialSwapLayout","tokenAccountsLength","precisionMultipliers","precisionMultiplierA","precisionMultiplierB","precisionMultiplierC","precisionMultiplierD","tokenAccountC","tokenAccountD","amplificationCoefficient","feeNumerator","precisionFactor","MercurialAmm","precisionMultiplier","filter","x","findIndex","tokenMints","tokenMint","decodeSwapLayout","CropperAmm","getAccountInfo","stateOwner","feeOwner","initialSupply","returnFeeNumerator","fixedFeeNumerator","feeDenominator","stateAccountInfoToCropperState","tokenAFeeAccount","tokenBFeeAccount","decodePoolState","accountInfoToCremaPoolState","TokenSwapAccountLayout","swapTokenA","swapTokenB","tokenBMint","currentSqrtPrice","currentLiquity","CremaAmm","ticks","ticksAccountInfo","ticksInfo","parseTicksAccount","preSwapA","preSwapB","revert","amountOut","feeUsed","impact","amountIn","calculateSwapA2B","currentPriceA","amountUsed","abs","calculateSwapB2A","currentPriceB","SenchaSwapLayout","SenchaAmm","isPaused","bump","token1Mint","tradeFeeKbps","accountInfoToSenchaPoolState","LifinityAmm","poolInfo","accountInfos","LIFINITY_AMM_LAYOUT","poolFeeAccount","poolCoinMint","poolPcMint","accountInfoLifinitySwapLayout","poolCoinDecimal","poolPcDecimal","poolMintDecimal","pythBaseDecimal","idx","account","tradeDirection","TradeDirection","AtoB","BtoA","pyth","pythPc","coinBalance","pcBalance","getParsedData","getCurveAmount","publishSlot","amountSwapped","feePercent","parseWhirlpoolSafe","whirlpoolData","parseWhirlpool","WhirlpoolAmm","whirlpoolAccountInfo","tickArrays","tickPks","oracle","feeRate","getTickArrayPks","clear","tickArrayPk","tickArrayAddress","tickArrayAccountInfo","tickArray","parseTickArray","set","swapMode","swapQuote","getSwapQuote","whirlpool","ExactIn","tokenAmount","isInput","quotePrice","aToB","currentPrice","sqrtPrice","Number","tokenMintA","targetSqrtPrice","getDefaultSqrtPriceLimit","tickArray0","tickArray1","tickArray2","getTickArrayPublicKeysForSwap","tickCurrentIndex","tickSpacing","_platformFee$feeBps16","tokenOwnerAccountA","tokenOwnerAccountB","whirlpoolSwap","tokenAuthority","tokenVaultA","tokenVaultB","createWhirlpoolSwapInstruction","maximumInAmount","_platformFee$feeBps19","whirlpoolSwapExactOutput","createWhirlpoolSwapExactOutputInstruction","tokenMintB","SolanaTickDataProvider","program","bitmapCache","tickCache","accountsToFetch","bitmaps","tickCurrent","compressed","wordPos","tickPosition","bitmapsToFetch","WORD_POS_MIN","TickMath","MIN_TICK","WORD_POS_MAX","MAX_TICK","minWord","max","maxWord","min","i","getBitmapAddressSync","fetchedBitmaps","tickBitmapState","fetchMultiple","tickAddresses","_fetchedBitmaps$i","currentWordPos","wordArray","word","generateBitmapWord","eqn","j","shrn","and","tickAddress","getTickAddressSync","fetchedTicks","tickState","fetchedTick","tick","liquidityNet","lazyLoadAccountsToCache","bitmap","tickAddressesToFetch","_bitmaps$i$word","_bitmaps$i","getTick","savedTick","TICK_SEED","token0","token1","u32ToSeed","BITMAP_SEED","u16ToSeed","getBitmap","savedBitmap","nextInitializedTickWithinOneWord","lte","bitPos","cachedBitmap","next","nextBit","initialized","nextInitializedBit","buildTick","updateCachedAccountInfos","bitmapAddress","bitmapAccountInfo","coder","tickStateAccountInfo","CYCLOS_CORE","anchor","AnchorProvider","skipPreflight","CykuraAmm","accountInfoOrPoolState","tickDataProvider","tokens","vaults","sqrtPriceX32","liquidity","Token","CykuraPool","Pool","vault0","ASSOCIATED_TOKEN_PROGRAM_ID","vault1","poolAccountInfo","inputToken","currentOutAmount","newPool","CurrencyAmount","fromRawAmount","priceImpactDecimal","sqrtRatioX32","OBSERVATION_SEED","observationIndex","observationCardinalityNext","proportionalBN","MarinadeAmm","liqPoolSolLegPdaAddress","marinadeState","marinadeFinanceIdlSchema","findProgramDerivedAddress","stateAccountInfo","liqPoolMSOLLegAccountInfo","liqPoolMSOLLeg","MarinadeState","lamports","amountBN","depositQuote","liquidUnstakeQuote","extraSeeds","liqPoolSolLegPdaLamports","liqPoolMSOLLegAmount","userLamports","userMSOLBuyOrder","calcMSOLFromLamports","swapMSOLMax","outAmountBN","gt","lamportsForTheLiqPool","calcLamportsFromMSOLAmount","saturatingSub","checkStakingCap","MSOLToMint","transferingLamports","totalLamportsUnderControl","stakingSolCap","stakeLamports","totalValue","totalVirtualStakedLamports","totalShares","msolSupply","msolAmount","circulatingTicketBalance","validatorSystem","totalActiveBalance","totalCoolingDown","availableReserveBalance","stakeSystem","delayedUnstakeCoolingDown","emergencyCoolingDown","maxLamports","rentExemptForTokenAcc","lamportsToObtain","liquidUnstakeFeeBp","lpMinFeeBasisPoints","lpMaxFeeBasisPoints","lpLiquidityTarget","lamportsAvailable","gte","lamportsAfter","unstakeNowFeeBp","lpMinFee","basisPoints","lpMaxFee","msolFee","workingLamportsValue","left","right","mintCache","getOrUpdatePublicKeyCache","pk","pkBase64","_bn","cached","pkBase58","shouldSkipOutputMint","intermediateTokens","minSegmentSize","outputMint","isPlatformFeeSupported","amms","ExactOut","firstMarket","secondMarket","createAndCloseWSOLAccount","cleanupInstructions","signers","toAccount","getAssociatedTokenAddress","createAssociatedTokenAccountInstruction","transfer","fromPubkey","toPubkey","createSyncNativeInstruction","createCloseAccountInstruction","findOrCreateAssociatedAccountByMint","payer","mintAddress","unwrapSOL","associatedToken","associatedTokenProgramId","TransactionInstruction","routeAtaInstructions","marketInfos","userIntermediaryTokenAccountResult","userDestinationTokenAccountResult","getUserIntermediateTokenAccountAddress","getOrCreateOpenOrdersAddress","user","marketToOpenOrdersAddress","marketAddress","openOrdersAccountInfo","newOpenOrdersAddress","ix","createOpenOrders","createOpenOrdersInstruction","sum","values","NO_PLATFORM_FEE","feeAccounts","getPlatformFeeAccounts","feeAccountOwner","getTokenAccountsByOwner","deserializedtokenAccount","TransactionBuilder","feePayer","addInstruction","blockhashWithExpiryBlockHeight","getLatestBlockhash","txFields","curr","transaction","Transaction","execute","isKeyPair","sendTransaction","Owner","_owner","isPublicKey","secretKey","wait","time","resolve","setTimeout","extractTokenBalanceChangeFromTransaction","meta","accountKeyIndex","_meta$postTokenBalanc","_meta$postTokenBalanc2","_meta$preTokenBalance","_meta$preTokenBalance2","postBalance","postTokenBalances","find","postTokenBalance","accountIndex","uiTokenAmount","preBalance","preTokenBalances","preTokenBalance","parseInt","diffTokenBalance","message","accountKeys","extractSOLChangeFromTransaction","postBalances","preBalances","getUnixTs","Date","getTime","SEND_OPTIONS","maxRetries","transactionSenderAndConfirmationWaiter","signedTransaction","timeout","pollInterval","sendInterval","sendRetries","rawTransaction","serialize","txid","sendRawTransaction","start","lastSendTimestamp","retries","timestamp","response","any","getTransaction","transactionResponse","getSignature","signature","bs58","validateArray","isArray","multiplySize","cache","getIndex","PLATFORM_FEE_DENOMINATOR","getInputOutputId","getQuoteId","processInputRouteSegmentToRoutesInfos","inputRouteSegment","getDepositAndFeeForRoute","platformFeeBps","slippage","filterTopNResult","onlyDirectRoutes","inputMintString","outputMintString","tradeIdQuoteMap","inputMintInnerMap","routes","maxLevel","walkTheTree","level","walked","outMint","tradeId","sortedQuotesWithAmms","quote","getQuoteAndSortBasedOnOutAmount","filteredAmms","quoteMap","splitTradeAmms","callback","ammCrossProtocolPairs","splitTradeAmm","create","mints","_mints","ammsArr","_inputRouteSegment$ge","arrays","validateDimensions","sizeStr","isFinite","toExponential","validateCombinations","validateInput","cachedLoopFunc","loopFunc","indexes","middle","end","repeat","Function","mGetLoopFunc","getLoopFunc","fastCartesian","route","intermediateAmount","platformFeeSupported","legs","entries","_tradeIdQuoteMap$get","pct","amountForFees","amountAfterFees","legOtherAmountThreshold","lpFee","getDepositAndFee","priceFactor","marketInfo","codeToErrorRecord","record","validateTransactionResponse","_transactionResponse$","TransactionError","err","parseErrorForTransaction","_codeToErrorRecord$co","UNKNOWN_ERROR","getOrAddKeyToIndexMap","mintToIndexMap","keyIndex","indexedRouteMapToRouteMap","indexedRouteMap","getMint","mintKeys","generatedRouteMap","Jupiter","cluster","tokenRouteSegments","feeCalculator","platformFeeAndAccounts","routeCacheDuration","wrapUnwrapSOL","shouldLoadSerumOpenOrders","serumOpenOrdersPromise","routeCache","getDepositAndFees","userPublicKey","hasWrapUnwrapSOL","openOrdersInstructionsPromise","promise","openOrdersInstructions","intermediate","openOrdersDeposits","ooi","ataDeposits","signatureFee","oo","lamportsPerSignature","totalFeeAndDeposits","minimumSOLForTransaction","_item$instructions$le","calculateTransactionDepositAndFee","getDepositAndFeeFromInstructions","getDepositAndFeesForUser","routeInfo","_instructions$interme","lastMarketInfoIndex","_wrapUnwrapSOL","sourceInstruction","ataInstructions","hasOpenOrders","preparedInstructions","openOrdersAddresses","userSourceTokenAccountAddress","userIntermediaryTokenAccountAddress","userDestinationTokenAccountAddress","effectiveQuoteMintToReferrer","mi","isSerumAndRaydium","userTokenAccountAddresses","legAmount","isLastLeg","legPlatformFee","routeToInstructions","needCleanup","needSetup","hasSerumOpenOrderInstruction","isSplitSetupRequired","setupTransactionBuilder","transactionBuilder","cleanupTransactionBuilder","ixs","cleanupIx","setupTransaction","build","cleanupTransaction","setupTransactionObject","swapTransactionObject","cleanupTransactionObject","setupInstructions","transactions","swapTransaction","wallet","onTransaction","executeInternal","marketUrl","restrictIntermediateTokens","_quoteMintToReferrer","fetchTokenRouteSegments","getRecentBlockhashAndContext","getIntermediateTokens","jupiter","setUserPublicKey","getAccountToAmmMap","accountToAmmMap","tokenRouteSegment","getAmmIdToAmmMap","ammIdToAmmMap","forceFetch","now","inputMintAndOutputMint","localeCompare","inputRouteSegments","inputSegment","outputSegment","shouldStartWithInputSegment","inputInnerMap","outputInnerMap","startSegment","endSegment","startMint","endMint","intersectionAmms","filteredIntersectionAmms","computeInputRouteSegments","shouldBustCache","fetchTimestamp","accountInfosMap","accountsToFetchSet","Set","ammMap","innerMap","fetchAccountInfos","routesInfos","delete","findSerumOpenOrdersForOwner","marketCaches","fetch","url","json","fetchMarketCache","firstReserveMint","secondReserveMint","inMint","segments","addSegment","getTokenRouteSegments","marketsCache","marketKeyedAccountInfos","format","rest","marketCacheToAccountInfo","extraKeys","extraKeyedAccountInfos","fetchExtraKeyedAccountInfos","keyedAccountInfo","SerumMarket","accountFlags","SABER_SWAP_PROGRAM_ID","StableSwap","loadWithData","_PROGRAM_ID_TO_LABEL$","senchaAmm","ammFactory","prefetchAmms","getAllAmms","getRouteMap","routeMap","firstLevelOutputs","validOutputMints","firstLevelOutputMint","firstLevelAmms","_tokenRouteSegments$g","secondLevelOutputs","secondLevelOutputMint","secondLevelAmms","_tokenRouteSegments$g2","_tokenRouteSegments$g3","outputMintSize","found","firstLevelAmm","secondLevelAmm","computeRouteMap","indexedRouteMapUrl","swapError","swapResult","tx","totalTxs","sign","signedTransactions","signAllTransactions","signTransaction","setupTxid","setupPromise","setupTransactionSender","swapTxid","swapPromise","swapTransactionSender","sourceTokenBalanceChange","destinationTokenBalanceChange","sourceAddress","destinationAddress","hasWrappedSOL","getTokenBalanceChangesFromTransactionResponse","inputAddress","outputAddress","outputAmount","cleanupTxid","cleanupPromise","cleanupTransactionSender","intermediateTokensSet","topTokens","getTopTokens","swapProtocolToken","newMarketToOpenOrdersAddress","findForOwner","createInitializeTokenLedgerInstruction","initializeTokenLedger","process","innerIndexedRouteMap","indexedOutputMintCache","routeOutputKey","routeOutputKeyIndex"],"mappings":"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"}