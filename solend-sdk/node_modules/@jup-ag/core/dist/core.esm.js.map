{"version":3,"file":"core.esm.js","sources":["../src/lib/idl/jupiter.ts","../src/constants.ts","../src/utils/layout.ts","../src/utils/pda.ts","../src/lib/cropper/swapLayout.ts","../src/lib/jupiterInstruction.ts","../src/lib/saber/saberAddDecimalsAmm.ts","../src/utils/getTwoPermutations.ts","../src/utils/chunks.ts","../src/utils/chunkedGetMultipleAccountInfos.ts","../src/lib/amm.ts","../src/lib/raydium/pools.ts","../src/lib/raydium/raydiumAmm.ts","../src/lib/serum/market.ts","../src/lib/serum/serumAmm.ts","../src/lib/split-trade/splitTradeAmm.ts","../src/lib/market.ts","../src/lib/saber/saberAmm.ts","../src/lib/aldrin/percentage.ts","../src/lib/aldrin/poolState.ts","../src/lib/aldrin/aldrinAmm.ts","../src/lib/spl-token-swap/splTokenSwapPools.ts","../src/lib/spl-token-swap/tokenSwapLayout.ts","../src/lib/spl-token-swap/splTokenSwapAmm.ts","../src/lib/mercurial/swapLayout.ts","../src/lib/mercurial/mercurialAmm.ts","../src/lib/cropper/cropperAmm.ts","../src/lib/crema/swapLayout.ts","../src/lib/crema/cremaAmm.ts","../src/lib/sencha/swapLayout.ts","../src/lib/sencha/senchaAmm.ts","../src/lib/lifinity/swapLayout.ts","../src/lib/lifinity/lifinityAmm.ts","../src/lib/whirlpool/whirlpoolAmm.ts","../src/lib/cykura/solanaTickDataProvider.ts","../src/lib/cykura/cykuraAmm.ts","../src/lib/marinade/helpers.ts","../src/lib/marinade/marinadeAmm.ts","../src/lib/ammFactory.ts","../src/lib/routes.ts","../src/utils/instruction.ts","../src/utils/token.ts","../src/lib/routeToInstructions.ts","../src/lib/serum/openOrders.ts","../src/lib/fee.ts","../src/utils/TransactionBuilder.ts","../src/utils/Owner.ts","../src/utils/wait.ts","../src/utils/transactionHelpers.ts","../src/utils/cartesian.ts","../src/lib/computeRouteInfos.ts","../src/utils/tx/errors.ts","../src/lib/getTopTokens.ts","../src/utils/indexedRouteMap.ts","../src/lib/jupiter.ts"],"sourcesContent":["export type Jupiter = {\n  version: '0.1.0';\n  name: 'jupiter';\n  instructions: [\n    {\n      name: 'mercurialExchange';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swapState';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'poolAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userTransferAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'sourceTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'destinationTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'saberExchange';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swap';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swapAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'clock';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'inputUserAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'inputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputUserAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'feesTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'saberSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swap';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swapAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'inputUserAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'inputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputUserAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'feesTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'saberAddDecimalsDeposit';\n      accounts: [\n        {\n          name: 'addDecimalsProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'wrapper';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'wrapperMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'wrapperUnderlyingTokens';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'owner';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'userUnderlyingTokens';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userWrappedTokens';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'saberAddDecimalsWithdraw';\n      accounts: [\n        {\n          name: 'addDecimalsProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'wrapper';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'wrapperMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'wrapperUnderlyingTokens';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'owner';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'userUnderlyingTokens';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userWrappedTokens';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'senchaExchange';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swap';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'inputUserAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'inputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'inputFeesAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputUserAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputFeesAccount';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'serumSwap';\n      accounts: [\n        {\n          name: 'market';\n          accounts: [\n            {\n              name: 'market';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'openOrders';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'requestQueue';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'eventQueue';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'bids';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'asks';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'coinVault';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'pcVault';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'vaultSigner';\n              isMut: false;\n              isSigner: false;\n            },\n          ];\n        },\n        {\n          name: 'authority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'orderPayerTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'coinWallet';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'pcWallet';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'dexProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'rent';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'side';\n          type: {\n            defined: 'Side';\n          };\n        },\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'tokenSwap';\n      accounts: [\n        {\n          name: 'tokenSwapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swap';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'authority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userTransferAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'source';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapSource';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapDestination';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'destination';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolFee';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'stepTokenSwap';\n      accounts: [\n        {\n          name: 'tokenSwapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swap';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'authority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userTransferAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'source';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapSource';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapDestination';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'destination';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolFee';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'cropperTokenSwap';\n      accounts: [\n        {\n          name: 'tokenSwapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swap';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swapState';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'authority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userTransferAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'source';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapSource';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapDestination';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'destination';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolFee';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'raydiumSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'ammId';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'ammAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'ammOpenOrders';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'ammTargetOrders';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolCoinTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolPcTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumProgramId';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'serumMarket';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumBids';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumAsks';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumEventQueue';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumCoinVaultAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumPcVaultAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumVaultSigner';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userSourceTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userDestinationTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userSourceOwner';\n          isMut: false;\n          isSigner: true;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'raydiumSwapV2';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'ammId';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'ammAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'ammOpenOrders';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolCoinTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolPcTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumProgramId';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'serumMarket';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumBids';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumAsks';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumEventQueue';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumCoinVaultAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumPcVaultAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumVaultSigner';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userSourceTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userDestinationTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userSourceOwner';\n          isMut: false;\n          isSigner: true;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'aldrinSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'pool';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'poolSigner';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'poolMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'baseTokenVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'quoteTokenVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'feePoolTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'walletAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'userBaseTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userQuoteTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'side';\n          type: {\n            defined: 'Side';\n          };\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'aldrinV2Swap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'pool';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'poolSigner';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'poolMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'baseTokenVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'quoteTokenVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'feePoolTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'walletAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'userBaseTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userQuoteTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'curve';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'side';\n          type: {\n            defined: 'Side';\n          };\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'cremaTokenSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'pool';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolSigner';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userSourceTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userDestinationTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolSourceTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolDestinationTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolTicksAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'walletAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'lifinityTokenSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'authority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'amm';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userTransferAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'sourceInfo';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'destinationInfo';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapSource';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapDestination';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'feeAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'pythAccount';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'pythPcAccount';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'configAccount';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'cykuraSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'signer';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'factoryState';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'poolState';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'inputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'inputVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'lastObservationState';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'coreProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'whirlpoolSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'whirlpool';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenOwnerAccountA';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenVaultA';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenOwnerAccountB';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenVaultB';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tickArray0';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tickArray1';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tickArray2';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'oracle';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'aToB';\n          type: 'bool';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'whirlpoolSwapExactOutput';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'whirlpool';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenOwnerAccountA';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenVaultA';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenOwnerAccountB';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenVaultB';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tickArray0';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tickArray1';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tickArray2';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'oracle';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'outAmount';\n          type: 'u64';\n        },\n        {\n          name: 'maximumInAmount';\n          type: 'u64';\n        },\n        {\n          name: 'aToB';\n          type: 'bool';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'marinadeFinanceDeposit';\n      accounts: [\n        {\n          name: 'marinadeFinanceProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'state';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'msolMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'liqPoolSolLegPda';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'liqPoolMsolLeg';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'liqPoolMsolLegAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'reservePda';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'transferFrom';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'mintTo';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'msolMintAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'systemProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userWsolTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tempWsolTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userTransferAuthority';\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: 'wsolMint';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'rent';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'marinadeFinanceLiquidUnstake';\n      accounts: [\n        {\n          name: 'marinadeFinanceProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'state';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'msolMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'liqPoolSolLegPda';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'liqPoolMsolLeg';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'treasuryMsolAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'getMsolFrom';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'getMsolFromAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'transferSolTo';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'systemProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userWsolTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'riskCheckAndFee';\n      accounts: [\n        {\n          name: 'tokenLedger';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userDestinationTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userTransferAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'initializeTokenLedger';\n      accounts: [\n        {\n          name: 'tokenLedger';\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: 'payer';\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: 'systemProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'setTokenLedger';\n      accounts: [\n        {\n          name: 'tokenLedger';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenAccount';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'createOpenOrders';\n      accounts: [\n        {\n          name: 'openOrders';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'payer';\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: 'dexProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'systemProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'rent';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'market';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n  ];\n  accounts: [\n    {\n      name: 'tokenLedger';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'tokenAccount';\n            type: 'publicKey';\n          },\n          {\n            name: 'amount';\n            type: 'u64';\n          },\n        ];\n      };\n    },\n  ];\n  types: [\n    {\n      name: 'Swap';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'tokens';\n            type: 'u64';\n          },\n          {\n            name: 'minTokens';\n            type: 'u64';\n          },\n          {\n            name: 'side';\n            type: {\n              defined: 'Side';\n            };\n          },\n        ];\n      };\n    },\n    {\n      name: 'Swap';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'tokens';\n            type: 'u64';\n          },\n          {\n            name: 'minTokens';\n            type: 'u64';\n          },\n          {\n            name: 'side';\n            type: {\n              defined: 'Side';\n            };\n          },\n        ];\n      };\n    },\n    {\n      name: 'Swap';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'amountIn';\n            type: 'u64';\n          },\n          {\n            name: 'minimumAmountOut';\n            type: 'u64';\n          },\n        ];\n      };\n    },\n    {\n      name: 'Deposit';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'lamports';\n            type: 'u64';\n          },\n        ];\n      };\n    },\n    {\n      name: 'LiquidUnstake';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'msolAmount';\n            type: 'u64';\n          },\n        ];\n      };\n    },\n    {\n      name: 'Swap';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'amount';\n            type: 'u64';\n          },\n          {\n            name: 'otherAmountThreshold';\n            type: 'u64';\n          },\n          {\n            name: 'sqrtPriceLimit';\n            type: 'u128';\n          },\n          {\n            name: 'amountSpecifiedIsInput';\n            type: 'bool';\n          },\n          {\n            name: 'aToB';\n            type: 'bool';\n          },\n        ];\n      };\n    },\n    {\n      name: 'SwapInstrution';\n      type: {\n        kind: 'enum';\n        variants: [\n          {\n            name: 'Swap';\n            fields: [\n              {\n                defined: 'Swap';\n              },\n            ];\n          },\n        ];\n      };\n    },\n    {\n      name: 'Side';\n      type: {\n        kind: 'enum';\n        variants: [\n          {\n            name: 'Bid';\n          },\n          {\n            name: 'Ask';\n          },\n        ];\n      };\n    },\n    {\n      name: 'Direction';\n      type: {\n        kind: 'enum';\n        variants: [\n          {\n            name: 'LeftToRight';\n          },\n          {\n            name: 'RightToLeft';\n          },\n        ];\n      };\n    },\n  ];\n  errors: [\n    {\n      code: 6000;\n      name: 'SlippageToleranceExceeded';\n      msg: 'Slippage tolerance exceeded';\n    },\n    {\n      code: 6001;\n      name: 'InvalidTokenLedger';\n      msg: 'Invalid token ledger';\n    },\n    {\n      code: 6002;\n      name: 'MissingTokenLedger';\n      msg: 'Missing token ledger';\n    },\n    {\n      code: 6003;\n      name: 'MissingMercurialExchangeTokenAccount';\n      msg: 'Missing mercurial exchange token account';\n    },\n    {\n      code: 6004;\n      name: 'LedgerTokenAccountDoesNotMatch';\n      msg: 'Ledger token account does not match';\n    },\n    {\n      code: 6005;\n      name: 'MissingPlatformFeeAccount';\n      msg: 'Missing platform fee account';\n    },\n    {\n      code: 6006;\n      name: 'InvalidCalculation';\n      msg: 'Invalid calculation';\n    },\n  ];\n};\n\nexport const IDL: Jupiter = {\n  version: '0.1.0',\n  name: 'jupiter',\n  instructions: [\n    {\n      name: 'mercurialExchange',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swapState',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userTransferAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'sourceTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'destinationTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'saberExchange',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swap',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swapAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'clock',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'inputUserAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'inputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputUserAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'feesTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'saberSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swap',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swapAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'inputUserAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'inputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputUserAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'feesTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'saberAddDecimalsDeposit',\n      accounts: [\n        {\n          name: 'addDecimalsProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'wrapper',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'wrapperMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'wrapperUnderlyingTokens',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'owner',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'userUnderlyingTokens',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userWrappedTokens',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'saberAddDecimalsWithdraw',\n      accounts: [\n        {\n          name: 'addDecimalsProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'wrapper',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'wrapperMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'wrapperUnderlyingTokens',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'owner',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'userUnderlyingTokens',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userWrappedTokens',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'senchaExchange',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swap',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'inputUserAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'inputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'inputFeesAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputUserAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputFeesAccount',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'serumSwap',\n      accounts: [\n        {\n          name: 'market',\n          accounts: [\n            {\n              name: 'market',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'openOrders',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'requestQueue',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'eventQueue',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'bids',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'asks',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'coinVault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'pcVault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultSigner',\n              isMut: false,\n              isSigner: false,\n            },\n          ],\n        },\n        {\n          name: 'authority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'orderPayerTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'coinWallet',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'pcWallet',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'dexProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'side',\n          type: {\n            defined: 'Side',\n          },\n        },\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'tokenSwap',\n      accounts: [\n        {\n          name: 'tokenSwapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swap',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'authority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userTransferAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'source',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapSource',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapDestination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'destination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolFee',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'stepTokenSwap',\n      accounts: [\n        {\n          name: 'tokenSwapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swap',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'authority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userTransferAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'source',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapSource',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapDestination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'destination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolFee',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'cropperTokenSwap',\n      accounts: [\n        {\n          name: 'tokenSwapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swap',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swapState',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'authority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userTransferAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'source',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapSource',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapDestination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'destination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolFee',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'raydiumSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'ammId',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'ammAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'ammOpenOrders',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'ammTargetOrders',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolCoinTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolPcTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumProgramId',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'serumMarket',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumBids',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumAsks',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumEventQueue',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumCoinVaultAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumPcVaultAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumVaultSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userSourceTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userDestinationTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userSourceOwner',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'raydiumSwapV2',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'ammId',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'ammAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'ammOpenOrders',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolCoinTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolPcTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumProgramId',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'serumMarket',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumBids',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumAsks',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumEventQueue',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumCoinVaultAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumPcVaultAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumVaultSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userSourceTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userDestinationTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userSourceOwner',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'aldrinSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'pool',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'baseTokenVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'quoteTokenVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'feePoolTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'walletAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'userBaseTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userQuoteTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'side',\n          type: {\n            defined: 'Side',\n          },\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'aldrinV2Swap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'pool',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'baseTokenVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'quoteTokenVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'feePoolTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'walletAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'userBaseTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userQuoteTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'curve',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'side',\n          type: {\n            defined: 'Side',\n          },\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'cremaTokenSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'pool',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userSourceTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userDestinationTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolSourceTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolDestinationTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolTicksAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'walletAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'lifinityTokenSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'authority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'amm',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userTransferAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'sourceInfo',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'destinationInfo',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapSource',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapDestination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'feeAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'pythAccount',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'pythPcAccount',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'configAccount',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'cykuraSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'signer',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'factoryState',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolState',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'inputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'inputVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'lastObservationState',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'coreProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'whirlpoolSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'whirlpool',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenOwnerAccountA',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenVaultA',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenOwnerAccountB',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenVaultB',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tickArray0',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tickArray1',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tickArray2',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'oracle',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'aToB',\n          type: 'bool',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'whirlpoolSwapExactOutput',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'whirlpool',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenOwnerAccountA',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenVaultA',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenOwnerAccountB',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenVaultB',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tickArray0',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tickArray1',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tickArray2',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'oracle',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'outAmount',\n          type: 'u64',\n        },\n        {\n          name: 'maximumInAmount',\n          type: 'u64',\n        },\n        {\n          name: 'aToB',\n          type: 'bool',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'marinadeFinanceDeposit',\n      accounts: [\n        {\n          name: 'marinadeFinanceProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'state',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'msolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'liqPoolSolLegPda',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'liqPoolMsolLeg',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'liqPoolMsolLegAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'reservePda',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'transferFrom',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'mintTo',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'msolMintAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userWsolTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tempWsolTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userTransferAuthority',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'wsolMint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'marinadeFinanceLiquidUnstake',\n      accounts: [\n        {\n          name: 'marinadeFinanceProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'state',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'msolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'liqPoolSolLegPda',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'liqPoolMsolLeg',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'treasuryMsolAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'getMsolFrom',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'getMsolFromAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'transferSolTo',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userWsolTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'riskCheckAndFee',\n      accounts: [\n        {\n          name: 'tokenLedger',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userDestinationTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userTransferAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'initializeTokenLedger',\n      accounts: [\n        {\n          name: 'tokenLedger',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'payer',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'setTokenLedger',\n      accounts: [\n        {\n          name: 'tokenLedger',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenAccount',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'createOpenOrders',\n      accounts: [\n        {\n          name: 'openOrders',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'payer',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'dexProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'market',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n  ],\n  accounts: [\n    {\n      name: 'tokenLedger',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'tokenAccount',\n            type: 'publicKey',\n          },\n          {\n            name: 'amount',\n            type: 'u64',\n          },\n        ],\n      },\n    },\n  ],\n  types: [\n    {\n      name: 'Swap',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'tokens',\n            type: 'u64',\n          },\n          {\n            name: 'minTokens',\n            type: 'u64',\n          },\n          {\n            name: 'side',\n            type: {\n              defined: 'Side',\n            },\n          },\n        ],\n      },\n    },\n    {\n      name: 'Swap',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'tokens',\n            type: 'u64',\n          },\n          {\n            name: 'minTokens',\n            type: 'u64',\n          },\n          {\n            name: 'side',\n            type: {\n              defined: 'Side',\n            },\n          },\n        ],\n      },\n    },\n    {\n      name: 'Swap',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'amountIn',\n            type: 'u64',\n          },\n          {\n            name: 'minimumAmountOut',\n            type: 'u64',\n          },\n        ],\n      },\n    },\n    {\n      name: 'Deposit',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'lamports',\n            type: 'u64',\n          },\n        ],\n      },\n    },\n    {\n      name: 'LiquidUnstake',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'msolAmount',\n            type: 'u64',\n          },\n        ],\n      },\n    },\n    {\n      name: 'Swap',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'amount',\n            type: 'u64',\n          },\n          {\n            name: 'otherAmountThreshold',\n            type: 'u64',\n          },\n          {\n            name: 'sqrtPriceLimit',\n            type: 'u128',\n          },\n          {\n            name: 'amountSpecifiedIsInput',\n            type: 'bool',\n          },\n          {\n            name: 'aToB',\n            type: 'bool',\n          },\n        ],\n      },\n    },\n    {\n      name: 'SwapInstrution',\n      type: {\n        kind: 'enum',\n        variants: [\n          {\n            name: 'Swap',\n            fields: [\n              {\n                defined: 'Swap',\n              },\n            ],\n          },\n        ],\n      },\n    },\n    {\n      name: 'Side',\n      type: {\n        kind: 'enum',\n        variants: [\n          {\n            name: 'Bid',\n          },\n          {\n            name: 'Ask',\n          },\n        ],\n      },\n    },\n    {\n      name: 'Direction',\n      type: {\n        kind: 'enum',\n        variants: [\n          {\n            name: 'LeftToRight',\n          },\n          {\n            name: 'RightToLeft',\n          },\n        ],\n      },\n    },\n  ],\n  errors: [\n    {\n      code: 6000,\n      name: 'SlippageToleranceExceeded',\n      msg: 'Slippage tolerance exceeded',\n    },\n    {\n      code: 6001,\n      name: 'InvalidTokenLedger',\n      msg: 'Invalid token ledger',\n    },\n    {\n      code: 6002,\n      name: 'MissingTokenLedger',\n      msg: 'Missing token ledger',\n    },\n    {\n      code: 6003,\n      name: 'MissingMercurialExchangeTokenAccount',\n      msg: 'Missing mercurial exchange token account',\n    },\n    {\n      code: 6004,\n      name: 'LedgerTokenAccountDoesNotMatch',\n      msg: 'Ledger token account does not match',\n    },\n    {\n      code: 6005,\n      name: 'MissingPlatformFeeAccount',\n      msg: 'Missing platform fee account',\n    },\n    {\n      code: 6006,\n      name: 'InvalidCalculation',\n      msg: 'Invalid calculation',\n    },\n  ],\n};\n","import { Cluster, PublicKey } from '@solana/web3.js';\nimport { IDL } from './lib/idl/jupiter';\n\nexport const WRAPPED_SOL_MINT = new PublicKey('So11111111111111111111111111111111111111112');\n\nexport const MAINNET_SERUM_DEX_PROGRAM = new PublicKey('9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin');\n\nexport const DEVNET_SERUM_DEX_PROGRAM = new PublicKey('DESVgJVGajEgKGXhb6XmqDHGz3VjdgP7rEVESBgxmroY');\n\nexport const MARKETS_URL: Record<Cluster, string> = {\n  devnet: 'https://api.jup.ag/api/markets/cache/devnet',\n  'mainnet-beta': 'https://cache.jup.ag/markets?v=3',\n  testnet: 'https://api.jup.ag/api/markets/cache/devnet',\n};\n\nexport const INDEXED_ROUTE_MAP_URL = 'https://cache.jup.ag/indexed-route-map';\n\nexport const TOKEN_LIST_URL: Record<Cluster, string> = {\n  devnet: 'https://api.jup.ag/api/tokens/devnet',\n  testnet: 'https://api.jup.ag/api/markets/devnet',\n  'mainnet-beta': 'https://cache.jup.ag/tokens',\n};\n\nexport const LAMPORTS_PER_SIGNATURE = 5000;\n\nexport const RAYDIUM_AMM_V4_PROGRAM_ID = new PublicKey('675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8');\n\nexport const ALDRIN_SWAP_PROGRAM_ID = new PublicKey('AMM55ShdkoGRB5jVYPjWziwk8m5MpwyDgsMWHaMSQWH6');\n\n// https://github.com/aldrin-exchange/aldrin-sdk/blob/f93fe3f2d847d79d8ddff507d8d4f62fd803421b/src/v2.json\nexport const ALDRIN_SWAP_V2_PROGRAM_ID = new PublicKey('CURVGoZn8zycx6FXwwevgBTB2gVvdbGTEpvMJDbgs2t4');\n\nexport const SABER_ADD_DECIMALS_PROGRAM_ID = new PublicKey('DecZY86MU5Gj7kppfUCEmd4LbXXuyZH1yHaP2NTqdiZB');\n\nexport const CROPPER_PROGRAM_ID = new PublicKey('CTMAxxk34HjKWxQ3QLZK1HpaLXmBveao3ESePXbiyfzh');\n\nexport const SENCHA_PROGRAM_ID = new PublicKey('SCHAtsf8mbjyjiv4LkhLKutTf6JnZAbdJKFkXQNMFHZ');\n\nexport const LIFINITY_PROGRAM_ID = new PublicKey('EewxydAPCCVuNEyrVN68PuSYdQ7wKn27V9Gjeoi8dy3S');\n\nexport const CREMA_PROGRAM_ID = new PublicKey('6MLxLqiXaaSUpkgMnWDTuejNZEz3kE7k2woyHGVFw319');\n\nexport const JUPITER_WALLET = new PublicKey('BUX7s2ef2htTGb2KKoPHWkmzxPj4nTWMWRgs5CSbQxf9');\n\nexport const MERCURIAL_SWAP_PROGRAM_ID = new PublicKey('MERLuDFBMmsHnsBPZw2sDQZHvXFMwp8EdjudcU2HKky');\n\nexport const WHIRLPOOL_PROGRAM_ID = new PublicKey('whirLbMiicVdio4qvUfM5KAg6Ct8VwpYzGff3uctyCc');\n\nexport const CYKURA_PROGRAM_ID = new PublicKey('cysPXAjehMpVKUapzbMCCnpFxUFFryEWEaLgnb9NrR8');\n\nexport const CYKURA_FACTORY_STATE_ADDRESS = new PublicKey('DBsMwKfeoUHhxMi9x6wd2AsT12UwUCssjNbUzu1aKgqj');\n\nexport const MARINADE_PROGRAM_ID = new PublicKey('MarBmsSgKXdrN1egZf5sqe1TMai9K1rChYNDJgjq7aD');\n\nexport const STEPN_PROGRAM_ID = new PublicKey('Dooar9JkhdZ7J3LHN3A7YCuoGRUggXhQaG4kijfLGU2j');\nexport const ORCA_PROGRAM_ID = new PublicKey('9W959DqEETiGZocYWCQPaJ6sBmUzgfxXfqGeTEdp3aQP');\nexport const STEP_TOKEN_SWAP_PROGRAM_ID = new PublicKey('SSwpMgqNDsyV7mAgN9ady4bDVu5ySjmmXejXvy2vLt1');\n\nexport const PENGUIN_PROGRAM_ID = new PublicKey('PSwapMdSai8tjrEXcxFeQth87xC4rRsa4VA5mhGhXkP');\nexport const SAROS_PROGRAM_ID = new PublicKey('SSwapUtytfBdBn1b9NUGG6foMVPtcWgpRU32HToDUZr');\n\n/** Tokens which are fundamental pivot in certain protocols */\nexport const SWAP_PROTOCOL_TOKENS = [\n  'StepAscQoEioFxxWGnh2sLBDFp9d8rvKz2Yp39iDpyT', // STEP\n  'DubwWZNWiNGMMeeQHPnMATNj77YZPZSAz2WVR5WjLJqz', // CRP\n];\n\nexport interface ErrorDetails {\n  code: number;\n  name: string;\n  msg: string;\n}\n\ntype JUPITER_ERROR_TYPES =\n  | 'TransactionNotConfirmed'\n  | 'BalancesNotExtractedProperly'\n  | 'InsufficientSOL'\n  | typeof IDL.errors[number]['name'];\n\nexport const JUPITER_ERRORS: Record<JUPITER_ERROR_TYPES, ErrorDetails> = Object.freeze({\n  AlreadyInUse: {\n    code: 1,\n    name: 'AlreadyInUsed',\n    msg: 'Account already In Used',\n  },\n  InsufficientSOL: {\n    code: 1,\n    name: 'InsufficientSOL',\n    msg: 'Insufficient SOL',\n  },\n  TransactionNotConfirmed: {\n    code: 7000, // a code that is not in the list of errors\n    name: 'TransactionNotConfirmed',\n    msg: 'Transaction was not confirmed',\n  },\n  BalancesNotExtractedProperly: {\n    code: 7001, // a code that is not in the list of errors\n    name: 'BalancesNotExtractedProperly',\n    msg: 'Balances cannot be extracted properly',\n  },\n  ...IDL.errors.reduce((accErrors, error) => {\n    return { ...accErrors, [error.name]: error };\n  }, {} as Record<typeof IDL.errors[number]['name'], ErrorDetails>),\n});\n\nexport const IS_DEV = process.env.NODE_ENV === 'development';\n\nexport const MIN_SEGMENT_SIZE_FOR_INTERMEDIATE_MINTS = 100;\n","import { blob, Layout, Structure, u8, union } from '@solana/buffer-layout';\nimport { u64 } from '@solana/spl-token';\nimport { PublicKey } from '@solana/web3.js';\n\nclass PublicKeyLayout extends Layout<PublicKey> {\n  private layout: Layout<any>;\n\n  constructor(property?: string) {\n    const layout = blob(32);\n    super(layout.span, property);\n    this.layout = layout;\n  }\n\n  getSpan(b: Uint8Array, offset?: number) {\n    return this.layout.getSpan(b, offset);\n  }\n\n  decode(b: Uint8Array, offset?: number): PublicKey {\n    return new PublicKey(this.layout.decode(b, offset));\n  }\n\n  encode(src: PublicKey, b: Uint8Array, offset: number): number {\n    return this.layout.encode(src.toBuffer(), b, offset);\n  }\n}\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string) => new PublicKeyLayout(property);\n\nclass U64Layout extends Layout<u64> {\n  private layout: Layout<any>;\n\n  constructor(span = 8, property: string) {\n    const layout = blob(span);\n    super(layout.span, property);\n    this.layout = layout;\n  }\n\n  getSpan(b: Uint8Array, offset?: number) {\n    return this.layout.getSpan(b, offset);\n  }\n\n  decode(b: Uint8Array, offset?: number): u64 {\n    const bn = new u64(this.layout.decode(b, offset), 10, 'le');\n\n    return bn;\n  }\n\n  encode(src: u64, b: Uint8Array, offset: number): number {\n    return this.layout.encode(src.toArrayLike(Buffer, 'le', this.layout.span), b, offset);\n  }\n}\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string) => new U64Layout(8, property);\n\nexport const uint128 = (property: string) => new U64Layout(16, property);\n\nexport const rustEnum = (variants: Structure<any>[], property: string) => {\n  // @ts-expect-error TODO: fix this\n  const unionLayout = union(u8(), u8(), property);\n  variants.forEach((variant, index) => unionLayout.addVariant(index, variant, variant.property || ''));\n  return unionLayout;\n};\n","/**\n * Derive a program address from seeds and a program ID.\n */\nimport { sha256 } from 'js-sha256';\nimport { MAX_SEED_LENGTH, PublicKey } from '@solana/web3.js';\nimport BN from 'bn.js';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n\n/**\n * Derive a program address from seeds and a program ID.\n * Without checking the resulting address is off curve to save computation\n */\nexport function createProgramAddressSyncUnsafe(seeds: Array<Buffer | Uint8Array>, programId: PublicKey): PublicKey {\n  let buffer = Buffer.alloc(0);\n  seeds.forEach(function (seed) {\n    if (seed.length > MAX_SEED_LENGTH) {\n      throw new TypeError(`Max seed length exceeded`);\n    }\n    buffer = Buffer.concat([buffer, toBuffer(seed)]);\n  });\n  buffer = Buffer.concat([buffer, programId.toBuffer(), Buffer.from('ProgramDerivedAddress')]);\n  let hash = sha256(new Uint8Array(buffer));\n  let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n  // if (PublicKey.isOnCurve(new Uint8Array(publicKeyBytes))) {\n  //   throw new Error(`Invalid seeds, address must fall off the curve`);\n  // }\n  return new PublicKey(publicKeyBytes);\n}\n","import { blob, struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/spl-token';\nimport { AccountInfo, PublicKey } from '@solana/web3.js';\nimport { publicKey, uint64 } from '../../utils/layout';\nimport { createProgramAddressSyncUnsafe } from '../../utils/pda';\n\ninterface CropperTokenSwapLayout {\n  version: number;\n  isInitialized: number;\n  nonce: number;\n  ammId: PublicKey;\n  serumProgramId: PublicKey;\n  serumMarket: PublicKey;\n  tokenProgramId: PublicKey;\n  tokenAAccount: PublicKey;\n  tokenBAccount: PublicKey;\n  poolMint: PublicKey;\n  mintA: PublicKey;\n  mintB: PublicKey;\n}\n\nexport const CropperTokenSwapLayout = struct<CropperTokenSwapLayout>([\n  u8('version'),\n  u8('isInitialized'),\n  u8('nonce'),\n  publicKey('ammId'),\n  publicKey('serumProgramId'),\n  publicKey('serumMarket'),\n  publicKey('tokenProgramId'),\n  publicKey('tokenAAccount'),\n  publicKey('tokenBAccount'),\n  publicKey('poolMint'),\n  publicKey('mintA'),\n  publicKey('mintB'),\n]);\n\ninterface CropperStateLayout {\n  isInitialized: number;\n  stateOwner: PublicKey;\n  feeOwner: PublicKey;\n  initialSupply: u64;\n  returnFeeNumerator: u64;\n  fixedFeeNumerator: u64;\n  feeDenominator: u64;\n  curveType: number;\n  curveParameters: Uint8Array;\n}\n\nconst CropperStateLayout = struct<CropperStateLayout>([\n  u8('isInitialized'),\n  publicKey('stateOwner'),\n  publicKey('feeOwner'),\n  uint64('initialSupply'),\n  uint64('returnFeeNumerator'),\n  uint64('fixedFeeNumerator'),\n  uint64('feeDenominator'),\n  u8('curveType'),\n  blob(32, 'curveParameters'),\n]);\n\nexport interface CropperState {\n  isInitialized: boolean;\n  stateOwner: PublicKey;\n  feeOwner: PublicKey;\n  initialSupply: u64;\n  returnFeeNumerator: number;\n  fixedFeeNumerator: number;\n  feeDenominator: number;\n  curveType: number;\n  curveParameters: Uint8Array;\n}\n\nexport interface CropperPoolState {\n  programId: PublicKey;\n  authority: PublicKey;\n  version: number;\n  isInitialized: boolean;\n  nonce: number;\n  ammId: PublicKey;\n  serumProgramId: PublicKey;\n  serumMarket: PublicKey;\n  tokenProgramId: PublicKey;\n  tokenAAccount: PublicKey;\n  tokenBAccount: PublicKey;\n  poolMint: PublicKey;\n  mintA: PublicKey;\n  mintB: PublicKey;\n}\n\n// This seems to be hardcoded.\nexport const CROPPER_STATE_ADDRESS = new PublicKey('3hsU1VgsBgBgz5jWiqdw9RfGU6TpWdCmdah1oi4kF3Tq');\n\nexport const accountInfoToCropperPoolState = (\n  address: PublicKey,\n  accountInfo: AccountInfo<Buffer>,\n): CropperPoolState => {\n  const programId = accountInfo.owner;\n\n  const decoded = CropperTokenSwapLayout.decode(accountInfo.data);\n  const authority = createProgramAddressSyncUnsafe([address.toBuffer(), Buffer.from([decoded.nonce])], programId);\n\n  return {\n    programId,\n    authority,\n    version: decoded.version,\n    isInitialized: Boolean(decoded.isInitialized),\n    nonce: decoded.nonce,\n    ammId: decoded.ammId,\n    serumProgramId: decoded.serumProgramId,\n    tokenProgramId: decoded.tokenProgramId,\n    tokenAAccount: decoded.tokenAAccount,\n    tokenBAccount: decoded.tokenBAccount,\n    serumMarket: decoded.serumMarket,\n    poolMint: decoded.poolMint,\n    mintA: decoded.mintA,\n    mintB: decoded.mintB,\n  };\n};\n\nexport const stateAccountInfoToCropperState = (accountInfo: AccountInfo<Buffer>): CropperState => {\n  const decoded = CropperStateLayout.decode(accountInfo.data);\n\n  return {\n    isInitialized: Boolean(decoded.isInitialized),\n    stateOwner: decoded.stateOwner,\n    feeOwner: decoded.feeOwner,\n    initialSupply: decoded.initialSupply,\n    returnFeeNumerator: decoded.returnFeeNumerator.toNumber(),\n    fixedFeeNumerator: decoded.fixedFeeNumerator.toNumber(),\n    feeDenominator: decoded.feeDenominator.toNumber(),\n    curveType: decoded.curveType,\n    curveParameters: decoded.curveParameters,\n  };\n};\n","import type { Provider } from '@project-serum/anchor';\nimport { Program } from '@project-serum/anchor';\nimport { createProgramAddressSync, findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { Market } from '@project-serum/serum';\nimport { NATIVE_MINT, TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { AccountMeta, PublicKey, SystemProgram, SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport BN from 'bn.js';\nimport { Jupiter as JupiterIDL, IDL } from './idl/jupiter';\nimport type { RaydiumAmm } from './raydium/raydiumAmm';\nimport { StableSwap } from '@saberhq/stableswap-sdk';\nimport {\n  ALDRIN_SWAP_PROGRAM_ID,\n  ALDRIN_SWAP_V2_PROGRAM_ID,\n  RAYDIUM_AMM_V4_PROGRAM_ID,\n  SABER_ADD_DECIMALS_PROGRAM_ID,\n  MERCURIAL_SWAP_PROGRAM_ID,\n  CYKURA_PROGRAM_ID,\n  CYKURA_FACTORY_STATE_ADDRESS,\n  WHIRLPOOL_PROGRAM_ID,\n  MARINADE_PROGRAM_ID,\n} from '../constants';\nimport { AldrinPoolState } from './aldrin/poolState';\nimport type { TokenSwapState } from './spl-token-swap/tokenSwapLayout';\nimport { PlatformFee } from './types';\nimport type { AddDecimals } from './saber/saberAddDecimalsAmm';\nimport { CropperPoolState, CROPPER_STATE_ADDRESS } from './cropper/swapLayout';\nimport { SenchaPoolState } from './sencha/swapLayout';\nimport { CremaPoolState } from './crema/swapLayout';\nimport { MercurialSwapLayoutState } from './mercurial/swapLayout';\nimport { LifinitySwapLayoutState } from './lifinity/swapLayout';\nimport { MarinadeStateResponse } from './marinade/marinade-state.types';\nimport JSBI from 'jsbi';\n\n// Side rust enum used for the program's RPC API.\nconst Side = {\n  Bid: { bid: {} },\n  Ask: { ask: {} },\n};\n\nexport const JUPITER_PROGRAM_ID_STAGING = new PublicKey('JUPSjgjMFjU4453KMgxhqVmzep6W352bQpE4RsNqXAx');\nexport const JUPITER_PROGRAM_ID_PRODUCTION = new PublicKey('JUP3c2Uh3WA4Ng34tw6kPd2G4C5BB21Xo36Je1s32Ph');\n\nexport const JUPITER_PROGRAM_ID = JUPITER_PROGRAM_ID_PRODUCTION; // JUPITER_PROGRAM_ID_PRODUCTION;\n\nconst JUPITER_PROGRAM = new Program<JupiterIDL>(IDL, JUPITER_PROGRAM_ID, {} as Provider);\n\nexport const PRODUCTION_TOKEN_LEDGERS = [\n  new PublicKey('755CiAfB63jK8DTZSM38ZRBTjf1inGM4QfLJTfpPM9x3'),\n  new PublicKey('5ZZ7w2C1c348nQm4zaYgrgb8gfyyqQNzH61zPwGvEQK9'),\n  new PublicKey('H4K65yLyYqVsDxgNCVGqK7MqrpKFLZjmqf95ZvmfyVDx'),\n  new PublicKey('HE4STzYv5dzw2G374ynt4EYvzuKLG41P2xnNffzpdWnG'),\n  new PublicKey('3HmXTbZf6G2oEjN3bPreZmF7YGLbbEXFkgAbVFPaimwU'),\n  new PublicKey('CUNMrNvGNh1aWR6cVzAQekdsW2dfacnQicyfvgvrN5ap'),\n  new PublicKey('6Q6vMHsUFA7kuwdkG9vm7gByMfk151Z9eMSwE14fHcrG'),\n];\nexport const STAGING_TOKEN_LEDGERS = [new PublicKey('755CiAfB63jK8DTZSM38ZRBTjf1inGM4QfLJTfpPM9x3')];\n\nexport const TOKEN_LEDGER: PublicKey =\n  PRODUCTION_TOKEN_LEDGERS[Math.floor(Math.random() * PRODUCTION_TOKEN_LEDGERS.length)];\n\ntype CreateSwapInstructionParams = {\n  sourceMint: PublicKey;\n  userSourceTokenAccount: PublicKey;\n  userDestinationTokenAccount: PublicKey;\n  userTransferAuthority: PublicKey;\n  inAmount: BN | null;\n  minimumOutAmount: BN;\n  tokenLedger: PublicKey;\n  platformFee?: PlatformFee;\n};\n\ntype CreateSwapExactOutputInstructionParams = {\n  sourceMint: PublicKey;\n  userSourceTokenAccount: PublicKey;\n  userDestinationTokenAccount: PublicKey;\n  userTransferAuthority: PublicKey;\n  outAmount: BN;\n  maximumInAmount: BN;\n  tokenLedger: PublicKey;\n  platformFee?: PlatformFee;\n};\n\nfunction stableSwapNPoolIntoMercurialExchange(\n  swayLayout: MercurialSwapLayoutState,\n  sourceTokenAccount: PublicKey,\n  destinationTokenAccount: PublicKey,\n  userTransferAuthority: PublicKey,\n) {\n  return {\n    swapProgram: MERCURIAL_SWAP_PROGRAM_ID,\n    swapState: swayLayout.ammId,\n    tokenProgram: TOKEN_PROGRAM_ID,\n    poolAuthority: swayLayout.authority,\n    userTransferAuthority: userTransferAuthority,\n\n    sourceTokenAccount,\n    destinationTokenAccount,\n  };\n}\n\nconst [ammAuthority] = findProgramAddressSync(\n  [new Uint8Array(Buffer.from('amm authority'.replace('\\u00A0', ' '), 'utf-8'))],\n  RAYDIUM_AMM_V4_PROGRAM_ID,\n);\n\nfunction raydiumAmmToRaydiumSwap(\n  raydiumAmm: RaydiumAmm,\n  userSourceTokenAccount: PublicKey,\n  userDestinationTokenAccount: PublicKey,\n  userTransferAuthority: PublicKey,\n) {\n  if (!raydiumAmm.serumMarketKeys) {\n    throw new Error('RaydiumAmm is missing serumMarketKeys');\n  }\n\n  return {\n    swapProgram: RAYDIUM_AMM_V4_PROGRAM_ID,\n    tokenProgram: TOKEN_PROGRAM_ID,\n    ammId: raydiumAmm.ammId,\n    ammAuthority,\n    ammOpenOrders: raydiumAmm.ammOpenOrders,\n    poolCoinTokenAccount: raydiumAmm.poolCoinTokenAccount,\n    poolPcTokenAccount: raydiumAmm.poolPcTokenAccount,\n    serumProgramId: raydiumAmm.serumProgramId,\n    serumMarket: raydiumAmm.serumMarket,\n    serumBids: raydiumAmm.serumMarketKeys.serumBids,\n    serumAsks: raydiumAmm.serumMarketKeys.serumAsks,\n    serumEventQueue: raydiumAmm.serumMarketKeys.serumEventQueue,\n    serumCoinVaultAccount: raydiumAmm.serumMarketKeys.serumCoinVaultAccount,\n    serumPcVaultAccount: raydiumAmm.serumMarketKeys.serumPcVaultAccount,\n    serumVaultSigner: raydiumAmm.serumMarketKeys.serumVaultSigner,\n    userSourceTokenAccount: userSourceTokenAccount,\n    userDestinationTokenAccount: userDestinationTokenAccount,\n    userSourceOwner: userTransferAuthority,\n  };\n}\n\nfunction marketIntoSerumSwap(\n  market: Market,\n  openOrdersAddress: PublicKey,\n  orderPayerTokenAccountAddress: PublicKey,\n  coinWallet: PublicKey,\n  pcWallet: PublicKey,\n  userTransferAuthority: PublicKey,\n) {\n  const vaultSigner = createProgramAddressSync(\n    [market.address.toBuffer(), market.decoded.vaultSignerNonce.toArrayLike(Buffer, 'le', 8)],\n    market.programId,\n  );\n\n  return {\n    market: {\n      market: market.address,\n      openOrders: openOrdersAddress,\n      requestQueue: market.decoded.requestQueue,\n      eventQueue: market.decoded.eventQueue,\n      bids: market.bidsAddress,\n      asks: market.asksAddress,\n      coinVault: market.decoded.baseVault,\n      pcVault: market.decoded.quoteVault,\n      vaultSigner,\n    },\n    authority: userTransferAuthority,\n    orderPayerTokenAccount: orderPayerTokenAccountAddress,\n    coinWallet,\n    pcWallet,\n    // Programs.\n    dexProgram: market.programId,\n    tokenProgram: TOKEN_PROGRAM_ID,\n    // Sysvars.\n    rent: SYSVAR_RENT_PUBKEY,\n  };\n}\n\nexport function createMercurialExchangeInstruction({\n  swapLayout,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { swapLayout: MercurialSwapLayoutState } & CreateSwapInstructionParams): TransactionInstruction {\n  const remainingAccounts: AccountMeta[] = [];\n\n  for (const swapTokenAccount of swapLayout.tokenAccounts) {\n    remainingAccounts.push({\n      pubkey: swapTokenAccount,\n      isSigner: false,\n      isWritable: true,\n    });\n  }\n  remainingAccounts.push(...prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount));\n\n  return JUPITER_PROGRAM.instruction.mercurialExchange(inAmount, minimumOutAmount, platformFee?.feeBps ?? 0, {\n    accounts: stableSwapNPoolIntoMercurialExchange(\n      swapLayout,\n      userSourceTokenAccount,\n      userDestinationTokenAccount,\n      userTransferAuthority,\n    ),\n    remainingAccounts,\n  });\n}\n\nexport function createSerumSwapInstruction({\n  market,\n  sourceMint,\n  openOrdersAddress,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n  referrer,\n}: {\n  market: Market;\n  openOrdersAddress: PublicKey;\n  referrer: PublicKey | undefined;\n} & CreateSwapInstructionParams): TransactionInstruction {\n  const { side, coinWallet, pcWallet } = sourceMint.equals(market.baseMintAddress)\n    ? {\n        side: Side.Ask,\n        coinWallet: userSourceTokenAccount,\n        pcWallet: userDestinationTokenAccount,\n      }\n    : {\n        side: Side.Bid,\n        coinWallet: userDestinationTokenAccount,\n        pcWallet: userSourceTokenAccount,\n      };\n\n  let remainingAccounts = prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount);\n\n  if (referrer) {\n    remainingAccounts.push({\n      pubkey: referrer,\n      isSigner: false,\n      isWritable: true,\n    });\n  }\n\n  return JUPITER_PROGRAM.instruction.serumSwap(side, inAmount, minimumOutAmount, platformFee?.feeBps ?? 0, {\n    accounts: marketIntoSerumSwap(\n      market,\n      openOrdersAddress,\n      userSourceTokenAccount,\n      coinWallet,\n      pcWallet,\n      userTransferAuthority,\n    ),\n    remainingAccounts,\n  });\n}\n\nexport function createTokenSwapInstruction({\n  tokenSwapState,\n  sourceMint,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n  isStep,\n}: { tokenSwapState: TokenSwapState; isStep: boolean } & CreateSwapInstructionParams): TransactionInstruction {\n  const [swapSource, swapDestination] = sourceMint.equals(tokenSwapState.mintA)\n    ? [tokenSwapState.tokenAccountA, tokenSwapState.tokenAccountB]\n    : [tokenSwapState.tokenAccountB, tokenSwapState.tokenAccountA];\n\n  return (isStep ? JUPITER_PROGRAM.instruction.stepTokenSwap : JUPITER_PROGRAM.instruction.tokenSwap)(\n    inAmount,\n    minimumOutAmount,\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: {\n        tokenSwapProgram: tokenSwapState.programId,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        swap: tokenSwapState.address,\n        authority: tokenSwapState.authority,\n        userTransferAuthority: userTransferAuthority,\n        source: userSourceTokenAccount,\n        swapSource,\n        swapDestination,\n        destination: userDestinationTokenAccount,\n        poolMint: tokenSwapState.poolToken,\n        poolFee: tokenSwapState.feeAccount,\n      },\n      remainingAccounts: prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount),\n    },\n  );\n}\n\nexport function createSenchaSwapInstruction({\n  poolState,\n  sourceMint,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { poolState: SenchaPoolState } & CreateSwapInstructionParams): TransactionInstruction {\n  const [swapSource, swapDestination] = sourceMint.equals(poolState.token0Mint)\n    ? [poolState.token0Reserves, poolState.token1Reserves]\n    : [poolState.token1Reserves, poolState.token0Reserves];\n\n  const [feesSource, feesDestination] = sourceMint.equals(poolState.token0Mint)\n    ? [poolState.token0Fees, poolState.token1Fees]\n    : [poolState.token1Fees, poolState.token0Fees];\n\n  return JUPITER_PROGRAM.instruction.senchaExchange(inAmount, minimumOutAmount, platformFee?.feeBps ?? 0, {\n    accounts: {\n      swapProgram: poolState.programId,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      swap: poolState.ammId,\n      userAuthority: userTransferAuthority,\n      inputUserAccount: userSourceTokenAccount,\n      inputTokenAccount: swapSource,\n      inputFeesAccount: feesSource,\n      outputUserAccount: userDestinationTokenAccount,\n      outputTokenAccount: swapDestination,\n      outputFeesAccount: feesDestination,\n    },\n    remainingAccounts: prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount),\n  });\n}\n\nexport function createCropperSwapInstruction({\n  poolState,\n  feeAccount,\n  sourceMint,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { poolState: CropperPoolState; feeAccount: PublicKey } & CreateSwapInstructionParams): TransactionInstruction {\n  const [swapSource, swapDestination] = sourceMint.equals(poolState.mintA)\n    ? [poolState.tokenAAccount, poolState.tokenBAccount]\n    : [poolState.tokenBAccount, poolState.tokenAAccount];\n\n  return JUPITER_PROGRAM.instruction.cropperTokenSwap(inAmount, minimumOutAmount, platformFee?.feeBps ?? 0, {\n    accounts: {\n      tokenSwapProgram: poolState.programId,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      swap: poolState.ammId,\n      swapState: CROPPER_STATE_ADDRESS,\n      authority: poolState.authority,\n      userTransferAuthority: userTransferAuthority,\n      source: userSourceTokenAccount,\n      swapSource,\n      swapDestination,\n      destination: userDestinationTokenAccount,\n      poolMint: poolState.poolMint,\n      poolFee: feeAccount,\n    },\n    remainingAccounts: prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount),\n  });\n}\n\nexport function createRaydiumSwapInstruction({\n  raydiumAmm,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { raydiumAmm: RaydiumAmm } & CreateSwapInstructionParams): TransactionInstruction {\n  return JUPITER_PROGRAM.instruction.raydiumSwapV2(inAmount, minimumOutAmount, platformFee?.feeBps ?? 0, {\n    accounts: raydiumAmmToRaydiumSwap(\n      raydiumAmm,\n      userSourceTokenAccount,\n      userDestinationTokenAccount,\n      userTransferAuthority,\n    ),\n    remainingAccounts: prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount),\n  });\n}\n\nexport function createAldrinSwapInstruction({\n  poolState,\n  sourceMint,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: {\n  poolState: AldrinPoolState;\n} & CreateSwapInstructionParams): TransactionInstruction {\n  const [side, userBaseTokenAccount, userQuoteTokenAccount] = sourceMint.equals(poolState.baseTokenMint)\n    ? [Side.Ask, userSourceTokenAccount, userDestinationTokenAccount]\n    : [Side.Bid, userDestinationTokenAccount, userSourceTokenAccount];\n\n  return JUPITER_PROGRAM.instruction.aldrinSwap(inAmount, minimumOutAmount, side, platformFee?.feeBps ?? 0, {\n    accounts: {\n      swapProgram: ALDRIN_SWAP_PROGRAM_ID,\n      pool: poolState.address,\n      poolSigner: poolState.poolSigner,\n      poolMint: poolState.poolMint,\n      baseTokenVault: poolState.baseTokenVault,\n      quoteTokenVault: poolState.quoteTokenVault,\n      feePoolTokenAccount: poolState.feePoolTokenAccount,\n      walletAuthority: userTransferAuthority,\n      userBaseTokenAccount,\n      userQuoteTokenAccount,\n      tokenProgram: TOKEN_PROGRAM_ID,\n    },\n    remainingAccounts: prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount),\n  });\n}\n\nexport function createAldrinV2SwapInstruction({\n  poolState,\n  sourceMint,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  curve,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { poolState: AldrinPoolState; curve: PublicKey } & CreateSwapInstructionParams): TransactionInstruction {\n  const [side, userBaseTokenAccount, userQuoteTokenAccount] = sourceMint.equals(poolState.baseTokenMint)\n    ? [Side.Ask, userSourceTokenAccount, userDestinationTokenAccount]\n    : [Side.Bid, userDestinationTokenAccount, userSourceTokenAccount];\n\n  return JUPITER_PROGRAM.instruction.aldrinV2Swap(inAmount, minimumOutAmount, side, platformFee?.feeBps ?? 0, {\n    accounts: {\n      swapProgram: ALDRIN_SWAP_V2_PROGRAM_ID,\n      pool: poolState.address,\n      poolSigner: poolState.poolSigner,\n      poolMint: poolState.poolMint,\n      baseTokenVault: poolState.baseTokenVault,\n      quoteTokenVault: poolState.quoteTokenVault,\n      feePoolTokenAccount: poolState.feePoolTokenAccount,\n      walletAuthority: userTransferAuthority,\n      userBaseTokenAccount,\n      userQuoteTokenAccount,\n      curve,\n      tokenProgram: TOKEN_PROGRAM_ID,\n    },\n    remainingAccounts: prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount),\n  });\n}\n\nexport function createCremaSwapInstruction({\n  poolState,\n  sourceMint,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { poolState: CremaPoolState } & CreateSwapInstructionParams): TransactionInstruction {\n  const [swapSource, swapDestination] = sourceMint.equals(poolState.mintA)\n    ? [poolState.tokenAAccount, poolState.tokenBAccount]\n    : [poolState.tokenBAccount, poolState.tokenAAccount];\n\n  return JUPITER_PROGRAM.instruction.cremaTokenSwap(inAmount, minimumOutAmount, platformFee?.feeBps ?? 0, {\n    accounts: {\n      swapProgram: poolState.programId,\n      pool: poolState.ammId,\n      poolSigner: poolState.authority,\n      userSourceTokenAccount: userSourceTokenAccount,\n      userDestinationTokenAccount: userDestinationTokenAccount,\n      poolSourceTokenAccount: swapSource,\n      poolDestinationTokenAccount: swapDestination,\n      poolTicksAccount: poolState.ticksKey,\n      walletAuthority: userTransferAuthority,\n      tokenProgram: TOKEN_PROGRAM_ID,\n    },\n    remainingAccounts: prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount),\n  });\n}\n\nexport function createRiskCheckAndFeeInstruction(\n  userDestinationTokenAccount: PublicKey,\n  userTransferAuthority: PublicKey,\n  minimumOutAmount: BN,\n  tokenLedger: PublicKey,\n  platformFee: PlatformFee | undefined,\n): TransactionInstruction {\n  const remainingAccounts: AccountMeta[] = [];\n\n  if (platformFee?.feeAccount) {\n    remainingAccounts.push({\n      pubkey: platformFee.feeAccount,\n      isSigner: false,\n      isWritable: true,\n    });\n  }\n\n  return JUPITER_PROGRAM.instruction.riskCheckAndFee(minimumOutAmount, platformFee?.feeBps ?? 0, {\n    accounts: {\n      tokenLedger,\n      userDestinationTokenAccount,\n      userTransferAuthority,\n      tokenProgram: TOKEN_PROGRAM_ID,\n    },\n    remainingAccounts,\n  });\n}\n\nexport function createSetTokenLedgerInstruction(\n  tokenLedger: PublicKey,\n  tokenAccountAddress: PublicKey,\n): TransactionInstruction {\n  return JUPITER_PROGRAM.instruction.setTokenLedger({\n    accounts: {\n      tokenLedger,\n      tokenAccount: tokenAccountAddress,\n    },\n  });\n}\n\nexport function createInitializeTokenLedgerInstruction(\n  tokenLedger: PublicKey,\n  payer: PublicKey,\n): TransactionInstruction {\n  return JUPITER_PROGRAM.instruction.initializeTokenLedger({\n    accounts: {\n      tokenLedger,\n      payer,\n      systemProgram: SystemProgram.programId,\n    },\n  });\n}\n\nexport function createOpenOrdersInstruction(\n  market: Market,\n  userTransferAuthority: PublicKey,\n): [PublicKey, TransactionInstruction] {\n  const [openOrders] = findProgramAddressSync(\n    [Buffer.from('open_orders'), market.publicKey.toBuffer(), userTransferAuthority.toBuffer()],\n    JUPITER_PROGRAM_ID,\n  );\n\n  const ix = JUPITER_PROGRAM.instruction.createOpenOrders({\n    accounts: {\n      openOrders,\n      payer: userTransferAuthority,\n      dexProgram: market.programId,\n      systemProgram: SystemProgram.programId,\n      rent: SYSVAR_RENT_PUBKEY,\n      market: market.publicKey,\n    },\n  });\n  return [openOrders, ix];\n}\n\nfunction saberPoolIntoSaberSwap(\n  saberPool: StableSwap,\n  sourceMintAddress: PublicKey,\n  userSourceTokenAccount: PublicKey,\n  userDestinationTokenAccount: PublicKey,\n  userTransferAuthority: PublicKey,\n) {\n  const feesTokenAccount = sourceMintAddress.equals(saberPool.state.tokenA.mint)\n    ? saberPool.state.tokenB.adminFeeAccount\n    : saberPool.state.tokenA.adminFeeAccount;\n  const [inputTokenAccount, outputTokenAccount] = sourceMintAddress.equals(saberPool.state.tokenA.mint)\n    ? [saberPool.state.tokenA.reserve, saberPool.state.tokenB.reserve]\n    : [saberPool.state.tokenB.reserve, saberPool.state.tokenA.reserve];\n\n  return {\n    swapProgram: saberPool.config.swapProgramID,\n    tokenProgram: TOKEN_PROGRAM_ID,\n    swap: saberPool.config.swapAccount,\n    swapAuthority: saberPool.config.authority,\n    userAuthority: userTransferAuthority,\n    inputUserAccount: userSourceTokenAccount,\n    inputTokenAccount,\n    outputUserAccount: userDestinationTokenAccount,\n    outputTokenAccount,\n    feesTokenAccount,\n  };\n}\n\nexport function createSaberSwapInstruction({\n  stableSwap,\n  sourceMint,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { stableSwap: StableSwap } & CreateSwapInstructionParams): TransactionInstruction {\n  const remainingAccounts = prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount);\n  return JUPITER_PROGRAM.instruction.saberSwap(inAmount, minimumOutAmount, platformFee?.feeBps ?? 0, {\n    accounts: saberPoolIntoSaberSwap(\n      stableSwap,\n      sourceMint,\n      userSourceTokenAccount,\n      userDestinationTokenAccount,\n      userTransferAuthority,\n    ),\n    remainingAccounts,\n  });\n}\n\nexport function createSaberAddDecimalsDepositInstruction({\n  addDecimals,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { addDecimals: AddDecimals } & CreateSwapInstructionParams) {\n  const remainingAccounts = prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount);\n  return JUPITER_PROGRAM.instruction.saberAddDecimalsDeposit(inAmount, minimumOutAmount, platformFee?.feeBps ?? 0, {\n    accounts: {\n      addDecimalsProgram: SABER_ADD_DECIMALS_PROGRAM_ID,\n      wrapper: addDecimals.wrapper,\n      wrapperMint: addDecimals.mint,\n      wrapperUnderlyingTokens: addDecimals.wrapperUnderlyingTokens,\n      owner: userTransferAuthority,\n      userUnderlyingTokens: userSourceTokenAccount,\n      userWrappedTokens: userDestinationTokenAccount,\n      tokenProgram: TOKEN_PROGRAM_ID,\n    },\n    remainingAccounts,\n  });\n}\n\nexport function createSaberAddDecimalsWithdrawInstruction({\n  addDecimals,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { addDecimals: AddDecimals } & CreateSwapInstructionParams) {\n  const remainingAccounts = prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount);\n  return JUPITER_PROGRAM.instruction.saberAddDecimalsWithdraw(inAmount, minimumOutAmount, platformFee?.feeBps ?? 0, {\n    accounts: {\n      addDecimalsProgram: SABER_ADD_DECIMALS_PROGRAM_ID,\n      wrapper: addDecimals.wrapper,\n      wrapperMint: addDecimals.mint,\n      wrapperUnderlyingTokens: addDecimals.wrapperUnderlyingTokens,\n      owner: userTransferAuthority,\n      userUnderlyingTokens: userDestinationTokenAccount,\n      userWrappedTokens: userSourceTokenAccount,\n      tokenProgram: TOKEN_PROGRAM_ID,\n    },\n    remainingAccounts,\n  });\n}\n\nexport function createLifinitySwapInstruction({\n  swapState,\n  sourceMint,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { swapState: LifinitySwapLayoutState } & CreateSwapInstructionParams): TransactionInstruction {\n  const [swapSource, swapDestination] = sourceMint.equals(swapState.tokenAMint)\n    ? [swapState.poolCoinTokenAccount, swapState.poolPcTokenAccount]\n    : [swapState.poolPcTokenAccount, swapState.poolCoinTokenAccount];\n\n  return JUPITER_PROGRAM.instruction.lifinityTokenSwap(inAmount, minimumOutAmount, platformFee?.feeBps ?? 0, {\n    accounts: {\n      swapProgram: swapState.programId,\n      authority: swapState.authority,\n      amm: swapState.amm,\n      userTransferAuthority: userTransferAuthority,\n      sourceInfo: userSourceTokenAccount,\n      destinationInfo: userDestinationTokenAccount,\n      swapSource,\n      swapDestination,\n      poolMint: swapState.poolMint,\n      feeAccount: swapState.feeAccount,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      pythAccount: swapState.pythAccount,\n      pythPcAccount: swapState.pythPcAccount,\n      configAccount: swapState.configAccount,\n    },\n    remainingAccounts: prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount),\n  });\n}\n\ntype CykuraSwapInstructionArgs = {\n  poolAddress: PublicKey;\n  inputVault: PublicKey;\n  outputVault: PublicKey;\n  nextObservationState: PublicKey;\n  lastObservationState: PublicKey;\n  swapAccountMetas: AccountMeta[];\n};\n\nexport function createCykuraSwapInstruction({\n  additionalArgs,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { additionalArgs: CykuraSwapInstructionArgs } & CreateSwapInstructionParams): TransactionInstruction {\n  const remainingAccounts = prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount);\n\n  return JUPITER_PROGRAM.instruction.cykuraSwap(inAmount, minimumOutAmount, platformFee?.feeBps ?? 0, {\n    accounts: {\n      swapProgram: CYKURA_PROGRAM_ID,\n      signer: userTransferAuthority,\n      factoryState: CYKURA_FACTORY_STATE_ADDRESS,\n      poolState: additionalArgs.poolAddress,\n      inputTokenAccount: userSourceTokenAccount,\n      outputTokenAccount: userDestinationTokenAccount,\n      inputVault: additionalArgs.inputVault,\n      outputVault: additionalArgs.outputVault,\n      lastObservationState: additionalArgs.lastObservationState,\n      coreProgram: CYKURA_PROGRAM_ID, // Duplicated as in Cykura accounts\n      tokenProgram: TOKEN_PROGRAM_ID,\n    },\n    remainingAccounts: remainingAccounts.concat([\n      ...additionalArgs.swapAccountMetas,\n      { pubkey: additionalArgs.nextObservationState, isSigner: false, isWritable: true },\n    ]),\n  });\n}\n\ntype WhirlpoolSwapInstructionArgs = {\n  aToB: boolean;\n  whirlpool: PublicKey;\n  tokenVaultA: PublicKey;\n  tokenVaultB: PublicKey;\n  tickArray0: PublicKey;\n  tickArray1: PublicKey;\n  tickArray2: PublicKey;\n  oracle: PublicKey;\n};\n\nexport function createWhirlpoolSwapInstruction({\n  additionalArgs,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { additionalArgs: WhirlpoolSwapInstructionArgs } & CreateSwapInstructionParams): TransactionInstruction {\n  const [tokenOwnerAccountA, tokenOwnerAccountB] = additionalArgs.aToB\n    ? [userSourceTokenAccount, userDestinationTokenAccount]\n    : [userDestinationTokenAccount, userSourceTokenAccount];\n\n  return JUPITER_PROGRAM.instruction.whirlpoolSwap(\n    inAmount,\n    minimumOutAmount,\n    additionalArgs.aToB,\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: {\n        swapProgram: WHIRLPOOL_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        tokenAuthority: userTransferAuthority,\n        whirlpool: additionalArgs.whirlpool,\n        tokenOwnerAccountA,\n        tokenVaultA: additionalArgs.tokenVaultA,\n        tokenOwnerAccountB,\n        tokenVaultB: additionalArgs.tokenVaultB,\n        tickArray0: additionalArgs.tickArray0,\n        tickArray1: additionalArgs.tickArray1,\n        tickArray2: additionalArgs.tickArray2,\n        oracle: additionalArgs.oracle,\n      },\n      remainingAccounts: prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount),\n    },\n  );\n}\n\ntype MarinadeFinanceDepositInstructionArgs = {\n  address: PublicKey;\n  marinadeStateResponse: MarinadeStateResponse;\n  liqPoolSolLegPda: PublicKey;\n  liqPoolMsolLegAuthority: PublicKey;\n  reservePda: PublicKey;\n  msolMintAuthority: PublicKey;\n};\n\nexport function createMarinadeFinanceDepositInstruction({\n  additionalArgs,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { additionalArgs: MarinadeFinanceDepositInstructionArgs } & CreateSwapInstructionParams): TransactionInstruction {\n  const transferFrom = userTransferAuthority;\n  const tempWsolTokenAccount = findProgramAddressSync(\n    [Buffer.from('temp-wsol-token-account'), transferFrom.toBuffer()],\n    JUPITER_PROGRAM_ID,\n  )[0];\n  const tempSolPda = findProgramAddressSync(\n    [Buffer.from('temp-sol-pda'), userTransferAuthority.toBuffer()],\n    JUPITER_PROGRAM_ID,\n  )[0];\n\n  return JUPITER_PROGRAM.instruction.marinadeFinanceDeposit(inAmount, minimumOutAmount, platformFee?.feeBps ?? 0, {\n    accounts: {\n      marinadeFinanceProgram: MARINADE_PROGRAM_ID,\n      state: additionalArgs.address,\n      userTransferAuthority,\n      msolMint: additionalArgs.marinadeStateResponse.msolMint,\n      liqPoolSolLegPda: additionalArgs.liqPoolSolLegPda,\n      liqPoolMsolLeg: additionalArgs.marinadeStateResponse.liqPool.msolLeg,\n      liqPoolMsolLegAuthority: additionalArgs.liqPoolMsolLegAuthority,\n      reservePda: additionalArgs.reservePda,\n      transferFrom: tempSolPda,\n      mintTo: userDestinationTokenAccount,\n      msolMintAuthority: additionalArgs.msolMintAuthority,\n      systemProgram: SystemProgram.programId,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      userWsolTokenAccount: userSourceTokenAccount,\n      tempWsolTokenAccount,\n      wsolMint: NATIVE_MINT,\n      rent: SYSVAR_RENT_PUBKEY,\n    },\n    remainingAccounts: prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount),\n  });\n}\n\ntype MarinadeFinanceLiquidUnstakeInstructionArgs = {\n  address: PublicKey;\n  marinadeStateResponse: MarinadeStateResponse;\n  liqPoolSolLegPda: PublicKey;\n};\n\nexport function createMarinadeFinanceLiquidUnstakeInstruction({\n  additionalArgs,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: {\n  additionalArgs: MarinadeFinanceLiquidUnstakeInstructionArgs;\n} & CreateSwapInstructionParams): TransactionInstruction {\n  const tempSolPda = findProgramAddressSync(\n    [Buffer.from('temp-sol-pda'), userTransferAuthority.toBuffer()],\n    JUPITER_PROGRAM_ID,\n  )[0];\n\n  return JUPITER_PROGRAM.instruction.marinadeFinanceLiquidUnstake(\n    inAmount,\n    minimumOutAmount,\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: {\n        marinadeFinanceProgram: MARINADE_PROGRAM_ID,\n        state: additionalArgs.address,\n        msolMint: additionalArgs.marinadeStateResponse.msolMint,\n        liqPoolSolLegPda: additionalArgs.liqPoolSolLegPda,\n        liqPoolMsolLeg: additionalArgs.marinadeStateResponse.liqPool.msolLeg,\n        treasuryMsolAccount: additionalArgs.marinadeStateResponse.treasuryMsolAccount,\n        getMsolFrom: userSourceTokenAccount,\n        getMsolFromAuthority: userTransferAuthority,\n        transferSolTo: tempSolPda,\n        systemProgram: SystemProgram.programId,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        userWsolTokenAccount: userDestinationTokenAccount,\n      },\n      remainingAccounts: prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount),\n    },\n  );\n}\n\nexport function createWhirlpoolSwapExactOutputInstruction({\n  additionalArgs,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  outAmount,\n  maximumInAmount,\n  tokenLedger,\n  platformFee,\n}: { additionalArgs: WhirlpoolSwapInstructionArgs } & CreateSwapExactOutputInstructionParams): TransactionInstruction {\n  const [tokenOwnerAccountA, tokenOwnerAccountB] = additionalArgs.aToB\n    ? [userSourceTokenAccount, userDestinationTokenAccount]\n    : [userDestinationTokenAccount, userSourceTokenAccount];\n\n  return JUPITER_PROGRAM.instruction.whirlpoolSwapExactOutput(\n    outAmount,\n    maximumInAmount,\n    additionalArgs.aToB,\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: {\n        swapProgram: WHIRLPOOL_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        tokenAuthority: userTransferAuthority,\n        whirlpool: additionalArgs.whirlpool,\n        tokenOwnerAccountA,\n        tokenVaultA: additionalArgs.tokenVaultA,\n        tokenOwnerAccountB,\n        tokenVaultB: additionalArgs.tokenVaultB,\n        tickArray0: additionalArgs.tickArray0,\n        tickArray1: additionalArgs.tickArray1,\n        tickArray2: additionalArgs.tickArray2,\n        oracle: additionalArgs.oracle,\n      },\n      remainingAccounts: prepareRemainingAccounts(new BN(0), tokenLedger, platformFee?.feeAccount),\n    },\n  );\n}\n\nfunction prepareRemainingAccounts(\n  inAmount: BN | null,\n  tokenLedger: PublicKey,\n  feeAccount: PublicKey | undefined,\n): AccountMeta[] {\n  const remainingAccounts = [];\n\n  if (inAmount === null) {\n    remainingAccounts.push({\n      pubkey: tokenLedger,\n      isSigner: false,\n      isWritable: true,\n    });\n  }\n  if (feeAccount) {\n    remainingAccounts.push({\n      pubkey: feeAccount,\n      isSigner: false,\n      isWritable: true,\n    });\n  }\n\n  return remainingAccounts;\n}\n","import { PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport JSBI from 'jsbi';\nimport { AccountInfoMap, Amm, QuoteParams, SwapParams } from '../amm';\n// Modified from saber's registry to contain the underlying mint decimal to avoid pointless queries\nimport addDecimalsJson from './add-decimals-complete-state.mainnet-beta.json';\nimport {\n  createSaberAddDecimalsDepositInstruction,\n  createSaberAddDecimalsWithdrawInstruction,\n} from '../jupiterInstruction';\nimport { ZERO } from '@jup-ag/math';\n\nexport interface AddDecimals {\n  wrapper: PublicKey;\n  underlying: PublicKey;\n  underlyingDecimals: number;\n  wrapperUnderlyingTokens: PublicKey;\n  mint: PublicKey;\n  decimals: number;\n}\n\nexport function getSaberWrappedDecimalsAmms() {\n  return addDecimalsJson.map((addDecimalJson) => {\n    const addDecimals = {\n      wrapper: new PublicKey(addDecimalJson.wrapper),\n      underlying: new PublicKey(addDecimalJson.underlying),\n      underlyingDecimals: addDecimalJson.underlyingDecimals,\n      wrapperUnderlyingTokens: new PublicKey(addDecimalJson.wrapperUnderlyingTokens),\n      mint: new PublicKey(addDecimalJson.mint),\n      decimals: addDecimalJson.decimals,\n    };\n\n    return new SaberAddDecimalsAmm(new WrappedToken(addDecimals));\n  });\n}\n\nexport class WrappedToken {\n  multiplier: JSBI;\n\n  constructor(public addDecimals: AddDecimals) {\n    this.multiplier = JSBI.BigInt(10 ** (this.addDecimals.decimals - this.addDecimals.underlyingDecimals));\n  }\n\n  getOutputAmount(inputAmount: JSBI, inputMint: PublicKey): JSBI {\n    if (this.addDecimals.mint.equals(inputMint)) {\n      // withdraw, so divide\n      return this.calculateWithdrawOutputAmount(inputAmount);\n    } else if (this.addDecimals.underlying.equals(inputMint)) {\n      // deposit, so multiply\n      return this.calculateDepositOutputAmount(inputAmount);\n    }\n    throw new Error(`unknown input token: ${inputMint.toString()}`);\n  }\n\n  private calculateDepositOutputAmount(inputAmount: JSBI) {\n    return JSBI.multiply(inputAmount, this.multiplier);\n  }\n\n  private calculateWithdrawOutputAmount(inputAmount: JSBI) {\n    return JSBI.divide(inputAmount, this.multiplier);\n  }\n}\n\n// This isn't technically an Amm but this the smoothest solution to allow its usage without a major refactor of the abstractions for now\nexport class SaberAddDecimalsAmm implements Amm {\n  id: string;\n  label = 'Saber (Decimals)' as const;\n  shouldPrefetch = false;\n  exactOutputSupported = false;\n\n  constructor(public wrappedToken: WrappedToken) {\n    this.id = this.wrappedToken.addDecimals.wrapper.toBase58();\n  }\n\n  getAccountsForUpdate() {\n    return new Array<PublicKey>();\n  }\n\n  update(_accountInfoMap: AccountInfoMap) {}\n\n  getQuote({ sourceMint, amount }: QuoteParams) {\n    const outAmount = this.wrappedToken.getOutputAmount(amount, sourceMint);\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount,\n      feeAmount: ZERO,\n      feeMint: sourceMint.toBase58(),\n      feePct: 0,\n      priceImpactPct: 0,\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams) {\n    if (this.wrappedToken.addDecimals.underlying.equals(swapParams.sourceMint)) {\n      return [\n        createSaberAddDecimalsDepositInstruction({\n          addDecimals: this.wrappedToken.addDecimals,\n          ...swapParams,\n          inAmount: swapParams.amount,\n          minimumOutAmount: swapParams.otherAmountThreshold,\n        }),\n      ];\n    } else {\n      return [\n        createSaberAddDecimalsWithdrawInstruction({\n          addDecimals: this.wrappedToken.addDecimals,\n          ...swapParams,\n          inAmount: swapParams.amount,\n          minimumOutAmount: swapParams.otherAmountThreshold,\n        }),\n      ];\n    }\n  }\n\n  get reserveTokenMints() {\n    return [this.wrappedToken.addDecimals.underlying, this.wrappedToken.addDecimals.mint];\n  }\n}\n","export function getTwoPermutations<T>(array: T[]) {\n  return array.reduce((acc, item) => {\n    array.forEach((otherItem) => {\n      if (item !== otherItem) {\n        acc.push([item, otherItem]);\n      }\n    });\n    return acc;\n  }, new Array<T[]>());\n}\n","export function chunks<T>(array: T[], size: number): T[][] {\n  return Array.apply<number, T[], T[][]>(0, new Array(Math.ceil(array.length / size))).map((_, index) =>\n    array.slice(index * size, (index + 1) * size),\n  );\n}\n","import { AccountInfo, Connection, PublicKey } from '@solana/web3.js';\nimport { chunks } from './chunks';\n\ninterface Result {\n  jsonrpc: string;\n  result: {\n    context: { slot: number };\n    value: (AccountInfo<string[]> | null)[];\n  };\n}\n\nexport async function chunkedGetMultipleAccountInfos(\n  connection: Connection,\n  pks: string[],\n  batchChunkSize: number = 1000,\n  maxAccountsChunkSize: number = 100,\n): Promise<Array<AccountInfo<Buffer> | null>> {\n  return (\n    await Promise.all(\n      chunks(pks, batchChunkSize).map(async (batchPubkeys) => {\n        const batch = chunks(batchPubkeys, maxAccountsChunkSize).map((pubkeys) => ({\n          methodName: 'getMultipleAccounts',\n          args: connection._buildArgs([pubkeys], connection.commitment, 'base64'),\n        }));\n\n        return (\n          // getMultipleAccounts is quite slow, so we use fetch directly\n          connection\n            // @ts-ignore\n            ._rpcBatchRequest(batch)\n            .then((batchResults: Result[]) => {\n              const accounts = batchResults.reduce((acc, res) => {\n                res.result.value.forEach((item) => {\n                  if (item) {\n                    const value = item as unknown as AccountInfo<Buffer>;\n                    value.data = Buffer.from(item.data[0], item.data[1] as 'base64');\n                    value.owner = new PublicKey(item.owner);\n                    acc.push(value);\n                  } else {\n                    acc.push(null);\n                  }\n                });\n                return acc;\n              }, [] as (AccountInfo<Buffer> | null)[]);\n\n              return accounts;\n            })\n            .catch((e: any) => {\n              console.error('Failed to fetch account infos', e);\n              return batchPubkeys.map(() => null);\n            })\n        );\n      }),\n    )\n  ).flat();\n}\n","import { AccountInfo, Connection, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { PlatformFee, QuoteMintToReferrer, TokenMintAddress } from '..';\nimport { AccountInfo as TokenAccountInfo } from '@solana/spl-token';\nimport JSBI from 'jsbi';\nimport { chunkedGetMultipleAccountInfos } from '../utils/chunkedGetMultipleAccountInfos';\nimport type BN from 'bn.js';\n\nexport enum SwapMode {\n  ExactIn = 'ExactIn',\n  ExactOut = 'ExactOut',\n}\n\nexport interface QuoteParams {\n  sourceMint: PublicKey;\n  destinationMint: PublicKey;\n  amount: JSBI;\n  swapMode: SwapMode;\n}\n\nexport interface Quote {\n  notEnoughLiquidity: boolean;\n  minInAmount?: JSBI;\n  minOutAmount?: JSBI;\n  inAmount: JSBI;\n  outAmount: JSBI;\n  feeAmount: JSBI;\n  feeMint: TokenMintAddress;\n  feePct: number;\n  priceImpactPct: number;\n}\n\nexport interface SwapParams {\n  sourceMint: PublicKey;\n  destinationMint: PublicKey;\n  userSourceTokenAccount: PublicKey;\n  userDestinationTokenAccount: PublicKey;\n  userTransferAuthority: PublicKey;\n  /**\n   * amount is used for instruction and can be null when it is an intermediate swap, only the first swap has an amount\n   */\n  amount: BN | null;\n  /**\n   * inAmount is the calculated amount and is not recomended to be used for constructing instruction.\n   */\n  inAmount: JSBI;\n  otherAmountThreshold: BN;\n  swapMode: SwapMode;\n  tokenLedger: PublicKey;\n  openOrdersAddress?: PublicKey;\n  platformFee?: PlatformFee;\n  quoteMintToReferrer?: QuoteMintToReferrer;\n}\n\nexport type AccountInfoMap = Map<string, AccountInfo<Buffer> | null>;\n\nexport interface Amm {\n  /* Label for UI usage */\n  label: string;\n  /* Unique id to recognize the AMM */\n  id: string;\n  /* Reserve token mints for the purpose of routing */\n  reserveTokenMints: PublicKey[];\n  /* State if we need to prefetch the accounts 1 time */\n  shouldPrefetch: boolean;\n  /* Exact output swap mode is supported */\n  exactOutputSupported: boolean;\n\n  getAccountsForUpdate(): PublicKey[];\n  update(accountInfoMap: AccountInfoMap): void;\n  getQuote(quoteParams: QuoteParams): Quote;\n  createSwapInstructions(swapParams: SwapParams): TransactionInstruction[];\n}\n\nexport const mapAddressToAccountInfos = (accountInfoMap: AccountInfoMap, addresses: PublicKey[]) => {\n  const accountInfos = addresses.map((address) => {\n    const accountInfo = accountInfoMap.get(address.toString());\n    if (!accountInfo) {\n      throw new Error(`Account info ${address.toBase58()} missing`);\n    }\n    return accountInfo;\n  });\n\n  return accountInfos;\n};\n\nexport const tokenAccountsToJSBIs = (tokenAccounts: TokenAccountInfo[]): JSBI[] => {\n  return tokenAccounts.map((tokenAccount) => {\n    return JSBI.BigInt(tokenAccount.amount);\n  });\n};\n\nexport const prefetchAmms = async (amms: Amm[], connection: Connection) => {\n  const accounts = amms.map((amm) => amm.getAccountsForUpdate().map((item) => item.toBase58())).flat();\n  const accountInfosMap = new Map<string, AccountInfo<Buffer>>();\n  const accountInfos = await chunkedGetMultipleAccountInfos(connection, accounts);\n\n  accountInfos.forEach((item, index) => {\n    const publicKey = accounts[index];\n    if (item) {\n      accountInfosMap.set(publicKey, item);\n    }\n  });\n\n  for (let amm of amms) {\n    amm.update(accountInfosMap);\n  }\n};\n","// Only a few hardcoded pools for now, until we query the whole lot through api\nimport { struct, nu64 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/spl-token';\nimport { PublicKey } from '@solana/web3.js';\nimport { publicKey, uint128, uint64 } from '../../utils/layout';\n\ninterface AmmInfoLayoutV4 {\n  status: number;\n  nonce: number;\n  orderNum: number;\n  depth: number;\n  coinDecimals: number;\n  pcDecimals: number;\n  state: number;\n  resetFlag: number;\n  minSize: number;\n  volMaxCutRatio: number;\n  amountWaveRatio: number;\n  coinLotSize: number;\n  pcLotSize: number;\n  minPriceMultiplier: number;\n  maxPriceMultiplier: number;\n  systemDecimalsValue: number;\n  minSeparateNumerator: number;\n  minSeparateDenominator: number;\n  tradeFeeNumerator: number;\n  tradeFeeDenominator: number;\n  pnlNumerator: number;\n  pnlDenominator: number;\n  swapFeeNumerator: u64;\n  swapFeeDenominator: u64;\n  needTakePnlCoin: number;\n  needTakePnlPc: number;\n  totalPnlPc: number;\n  totalPnlCoin: number;\n  poolTotalDepositPc: u64;\n  poolTotalDepositCoin: u64;\n  swapCoinInAmount: u64;\n  swapPcOutAmount: u64;\n  swapCoin2PcFee: number;\n  swapPcInAmount: u64;\n  swapCoinOutAmount: u64;\n  swapPc2CoinFee: number;\n  poolCoinTokenAccount: PublicKey;\n  poolPcTokenAccount: PublicKey;\n  coinMintAddress: PublicKey;\n  pcMintAddress: PublicKey;\n  lpMintAddress: PublicKey;\n  ammOpenOrders: PublicKey;\n  serumMarket: PublicKey;\n  serumProgramId: PublicKey;\n  ammTargetOrders: PublicKey;\n  poolWithdrawQueue: PublicKey;\n  poolTempLpTokenAccount: PublicKey;\n  ammOwner: PublicKey;\n  pnlOwner: PublicKey;\n}\n\nexport const AMM_INFO_LAYOUT_V4 = struct<AmmInfoLayoutV4>([\n  nu64('status'),\n  nu64('nonce'),\n  nu64('orderNum'),\n  nu64('depth'),\n  nu64('coinDecimals'),\n  nu64('pcDecimals'),\n  nu64('state'),\n  nu64('resetFlag'),\n  nu64('minSize'),\n  nu64('volMaxCutRatio'),\n  nu64('amountWaveRatio'),\n  nu64('coinLotSize'),\n  nu64('pcLotSize'),\n  nu64('minPriceMultiplier'),\n  nu64('maxPriceMultiplier'),\n  nu64('systemDecimalsValue'),\n  // Fees\n  nu64('minSeparateNumerator'),\n  nu64('minSeparateDenominator'),\n  nu64('tradeFeeNumerator'),\n  nu64('tradeFeeDenominator'),\n  nu64('pnlNumerator'),\n  nu64('pnlDenominator'),\n  nu64('swapFeeNumerator'),\n  nu64('swapFeeDenominator'),\n  // OutPutData\n  nu64('needTakePnlCoin'),\n  nu64('needTakePnlPc'),\n  nu64('totalPnlPc'),\n  nu64('totalPnlCoin'),\n  uint128('poolTotalDepositPc'),\n  uint128('poolTotalDepositCoin'),\n  uint128('swapCoinInAmount'),\n  uint128('swapPcOutAmount'),\n  nu64('swapCoin2PcFee'),\n  uint128('swapPcInAmount'),\n  uint128('swapCoinOutAmount'),\n  nu64('swapPc2CoinFee'),\n\n  publicKey('poolCoinTokenAccount'),\n  publicKey('poolPcTokenAccount'),\n  publicKey('coinMintAddress'),\n  publicKey('pcMintAddress'),\n  publicKey('lpMintAddress'),\n  publicKey('ammOpenOrders'),\n  publicKey('serumMarket'),\n  publicKey('serumProgramId'),\n  publicKey('ammTargetOrders'),\n  publicKey('poolWithdrawQueue'),\n  publicKey('poolTempLpTokenAccount'),\n  publicKey('ammOwner'),\n  publicKey('pnlOwner'),\n]);\n","// https://github.com/raydium-io/raydium-ui/blob/4048286f79fc4b71c3ffbfd9095470ab0c7d3862/src/utils/liquidity.ts#L30-L82\n\nimport { Fraction, TokenSwapConstantProduct, ZERO_FRACTION } from '@jup-ag/math';\nimport { Market, OpenOrders } from '@project-serum/serum';\nimport { u64 } from '@solana/spl-token';\nimport { AccountInfo, PublicKey } from '@solana/web3.js';\nimport Decimal from 'decimal.js';\nimport JSBI from 'jsbi';\nimport { createProgramAddressSyncUnsafe } from '../../utils/pda';\nimport { AccountInfoMap, Amm, mapAddressToAccountInfos, Quote, QuoteParams, SwapParams } from '../amm';\nimport { createRaydiumSwapInstruction } from '../jupiterInstruction';\nimport { AMM_INFO_LAYOUT_V4 } from './pools';\n\n// Explained here\n// https://discordapp.com/channels/813741812598439958/813750197423308820/900288485028683776\n// total_pc = amminfo.pc_vault.balance + amminfo.openorder.total_quote - amminfo.need_taken_pnl_pc\n// total_coin = amminfo.coin_vault.balance + amminfo.openorder.total_base - amminfo.need_taken_pnl_coin\n\ntype SerumMarketKeys = {\n  serumBids: PublicKey;\n  serumAsks: PublicKey;\n  serumEventQueue: PublicKey;\n  serumCoinVaultAccount: PublicKey;\n  serumPcVaultAccount: PublicKey;\n  serumVaultSigner: PublicKey;\n};\n\ntype SerumMarketKeysString = Record<keyof SerumMarketKeys, string>;\nexport class RaydiumAmm implements Amm {\n  id: string;\n  label = 'Raydium' as const;\n  shouldPrefetch = false;\n  exactOutputSupported = false;\n\n  coinMint: PublicKey;\n  pcMint: PublicKey;\n\n  status: number;\n  serumProgramId: PublicKey;\n  serumMarket: PublicKey;\n  ammOpenOrders: PublicKey;\n  ammTargetOrders: PublicKey;\n  poolCoinTokenAccount: PublicKey;\n  poolPcTokenAccount: PublicKey;\n\n  serumMarketKeys: SerumMarketKeys;\n\n  coinReserve: u64 | undefined;\n  pcReserve: u64 | undefined;\n\n  private feePct: Decimal;\n  private calculator: TokenSwapConstantProduct;\n\n  constructor(public ammId: PublicKey, ammAccountInfo: AccountInfo<Buffer>, params: SerumMarketKeysString) {\n    this.id = ammId.toBase58();\n    const decoded = AMM_INFO_LAYOUT_V4.decode(ammAccountInfo.data);\n\n    this.status = decoded.status;\n    this.coinMint = new PublicKey(decoded.coinMintAddress);\n    this.pcMint = new PublicKey(decoded.pcMintAddress);\n\n    this.poolCoinTokenAccount = new PublicKey(decoded.poolCoinTokenAccount);\n    this.poolPcTokenAccount = new PublicKey(decoded.poolPcTokenAccount);\n\n    this.serumProgramId = new PublicKey(decoded.serumProgramId);\n    this.serumMarket = new PublicKey(decoded.serumMarket);\n    this.ammOpenOrders = new PublicKey(decoded.ammOpenOrders);\n    this.ammTargetOrders = new PublicKey(decoded.ammTargetOrders);\n\n    this.serumMarketKeys = (Object.keys(params) as Array<keyof SerumMarketKeysString>).reduce((acc, item) => {\n      const pk = params[item];\n      if (!pk) throw new Error(`Could not find ${item} in params`);\n      acc[item] = new PublicKey(params[item]);\n      return acc;\n    }, {} as SerumMarketKeys);\n\n    const swapFeeNumerator = decoded.swapFeeNumerator;\n    const swapFeeDenominator = decoded.swapFeeDenominator;\n\n    this.feePct = new Decimal(swapFeeNumerator.toString()).div(swapFeeDenominator.toString());\n\n    this.calculator = new TokenSwapConstantProduct(\n      new Fraction(JSBI.BigInt(swapFeeNumerator), JSBI.BigInt(swapFeeDenominator)),\n      ZERO_FRACTION,\n    );\n  }\n\n  static decodeSerumMarketKeysString(\n    serumProgramId: PublicKey,\n    serumMarket: PublicKey,\n    serumMarketInfo: AccountInfo<Buffer>,\n  ): SerumMarketKeysString {\n    const decodedMarket = Market.getLayout(serumProgramId).decode(serumMarketInfo.data);\n    const serumVaultSigner = createProgramAddressSyncUnsafe(\n      [serumMarket.toBuffer(), decodedMarket.vaultSignerNonce.toArrayLike(Buffer, 'le', 8)],\n      serumProgramId,\n    );\n\n    return {\n      serumBids: decodedMarket.bids.toBase58(),\n      serumAsks: decodedMarket.asks.toBase58(),\n      serumEventQueue: decodedMarket.eventQueue.toBase58(),\n      serumCoinVaultAccount: decodedMarket.baseVault.toBase58(),\n      serumPcVaultAccount: decodedMarket.quoteVault.toBase58(),\n      serumVaultSigner: serumVaultSigner.toBase58(),\n    };\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [this.ammId, this.poolCoinTokenAccount, this.poolPcTokenAccount, this.ammOpenOrders];\n  }\n\n  update(accountInfoMap: AccountInfoMap) {\n    const [ammAccountInfo, poolCoinTokenAccountInfo, poolPcTokenAccountInfo, ammOpenOrdersAccountInfo] =\n      mapAddressToAccountInfos(accountInfoMap, this.getAccountsForUpdate());\n\n    const [coinAmount, pcAmount] = [\n      RaydiumAmm.tokenAmountAccessor(poolCoinTokenAccountInfo),\n      RaydiumAmm.tokenAmountAccessor(poolPcTokenAccountInfo),\n    ];\n\n    const openOrders = OpenOrders.fromAccountInfo(\n      this.ammOpenOrders,\n      ammOpenOrdersAccountInfo,\n      ammOpenOrdersAccountInfo.owner,\n    );\n\n    const decoded = AMM_INFO_LAYOUT_V4.decode(ammAccountInfo.data);\n\n    this.coinReserve = coinAmount.add(openOrders.baseTokenTotal).sub(new u64(String(decoded.needTakePnlCoin)));\n\n    this.pcReserve = pcAmount.add(openOrders.quoteTokenTotal).sub(new u64(String(decoded.needTakePnlPc)));\n  }\n\n  private static tokenAmountAccessor(tokenAccountInfo: AccountInfo<Buffer>): u64 {\n    return u64.fromBuffer(tokenAccountInfo.data.slice(64, 64 + 8));\n  }\n\n  getQuote({ sourceMint, amount }: QuoteParams): Quote {\n    const { coinReserve, pcReserve } = this;\n    if (!coinReserve || !pcReserve) {\n      throw new Error('Pool token accounts balances not refreshed or empty');\n    }\n\n    const outputIndex = this.coinMint.equals(sourceMint) ? 1 : 0;\n    const result = this.calculator.exchange([JSBI.BigInt(coinReserve), JSBI.BigInt(pcReserve)], amount, outputIndex);\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: result.expectedOutputAmount,\n      feeAmount: result.fees,\n      feeMint: sourceMint.toBase58(),\n      feePct: this.feePct.toNumber(),\n      priceImpactPct: result.priceImpact.toNumber(),\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams) {\n    return [\n      createRaydiumSwapInstruction({\n        raydiumAmm: this,\n        ...swapParams,\n        inAmount: swapParams.amount,\n        minimumOutAmount: swapParams.otherAmountThreshold,\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.coinMint, this.pcMint];\n  }\n}\n","import { ZERO } from '@jup-ag/math';\nimport { Market, Orderbook } from '@project-serum/serum';\nimport { PublicKey } from '@solana/web3.js';\nimport BN from 'bn.js';\nimport Decimal from 'decimal.js';\nimport JSBI from 'jsbi';\n\nconst TAKER_FEE_PCT = 0.0004;\nconst STABLE_TAKER_FEE_PCT = 0.0001;\n\n// Stable markets are hardcoded in the program\nconst STABLE_MARKET_ADDRESSES = [\n  '77quYg4MGneUdjgXCunt9GgM1usmrxKY31twEy3WHwcS', // USDT/USDC\n  '5cLrMai1DsLRYc1Nio9qMTicsWtvzjzZfJPXyAoF4t1Z', // mSOL/SOL\n  'EERNEEnBqdGzBS8dd46wwNY5F2kwnaCQ3vsq2fNKGogZ', // UST/USDC\n  '8sFf9TW3KzxLiBXcDcjAxqabEsRroo4EiRr3UG1xbJ9m', // UST/USDT\n  '2iDSTGhjJEiRxNaLF27CY6daMYPs5hgYrP2REHd5YD62', // stSOL/SOL\n];\n\ninterface IMarketMeta {\n  /** buy or sell side */\n  side: 'buy' | 'sell';\n  /** indicate that your order is too huge for the market */\n  notEnoughLiquidity: boolean;\n  /** minimum in amount and the corresponding out amount */\n  minimum: {\n    in: JSBI;\n    out: JSBI;\n  };\n  /** amount in taken for the trade */\n  inAmount: JSBI;\n  /** the amount out for the trade */\n  outAmount: JSBI;\n  /** the total fee amount */\n  feeAmount: JSBI;\n  /** price impact percentage */\n  priceImpactPct: number;\n  /** fee percentage */\n  feePct: number;\n}\n\n// Provides swap like out amount, with slippage and corresponding minimum amount out\nexport function getOutAmountMeta({\n  market,\n  asks,\n  bids,\n  fromAmount,\n  fromMint,\n  toMint,\n}: {\n  market: Market;\n  asks: Orderbook;\n  bids: Orderbook;\n  fromMint: PublicKey;\n  toMint: PublicKey;\n  fromAmount: JSBI;\n}) {\n  const takerFeePct = STABLE_MARKET_ADDRESSES.includes(market.address.toBase58())\n    ? STABLE_TAKER_FEE_PCT\n    : TAKER_FEE_PCT;\n\n  if (fromMint.equals(market.quoteMintAddress) && toMint.equals(market.baseMintAddress)) {\n    // buy\n    return forecastBuy(market, asks, fromAmount, takerFeePct);\n  } else {\n    return forecastSell(market, bids, fromAmount, takerFeePct);\n  }\n}\n\nexport function forecastBuy(market: Market, orderbook: Orderbook, pcIn: JSBI, takerFeePct: number): IMarketMeta {\n  let coinOut = ZERO;\n  let bestPrice: JSBI = ZERO;\n  let worstPrice: JSBI = ZERO;\n  // total base price\n  let totalCost = ZERO;\n  let totalCoins = ZERO;\n\n  // might be decimal, e.g: 0.001\n  const quoteSizeLots = market.quoteSizeLotsToNumber(new BN(1));\n\n  // Serum buy order take fee in quote tokens\n  let availablePc = quoteSizeLots\n    ? JSBI.BigInt(\n        new Decimal(pcIn.toString())\n          .div(1 + takerFeePct)\n          .div(quoteSizeLots)\n          .floor(),\n      )\n    : ZERO;\n  const baseSizeLots = JSBI.BigInt(market.baseSizeLotsToNumber(new BN(1)).toString());\n\n  for (let [lotPrice, lotQuantity] of getL2(orderbook)) {\n    if (JSBI.equal(bestPrice, ZERO)) {\n      bestPrice = lotPrice;\n    }\n\n    worstPrice = lotPrice;\n\n    const orderCoinAmount = JSBI.multiply(lotQuantity, baseSizeLots);\n    const orderPcAmount = JSBI.multiply(lotQuantity, lotPrice);\n\n    totalCoins = JSBI.add(totalCoins, orderCoinAmount);\n\n    if (JSBI.greaterThanOrEqual(orderPcAmount, availablePc)) {\n      const numberLotsPurchasable = JSBI.divide(availablePc, lotPrice);\n\n      totalCost = JSBI.add(totalCost, JSBI.multiply(lotPrice, numberLotsPurchasable));\n      coinOut = JSBI.add(coinOut, JSBI.multiply(baseSizeLots, numberLotsPurchasable));\n      availablePc = ZERO;\n      break;\n    } else {\n      totalCost = JSBI.add(totalCost, JSBI.multiply(lotPrice, lotQuantity));\n      coinOut = JSBI.add(coinOut, orderCoinAmount);\n      availablePc = JSBI.subtract(availablePc, orderPcAmount);\n    }\n  }\n\n  const bestPriceDecimal = new Decimal(bestPrice.toString());\n  const worstPriceDecimal = new Decimal(worstPrice.toString());\n\n  const priceImpactPct = worstPriceDecimal.sub(bestPriceDecimal).div(bestPriceDecimal).toNumber();\n\n  const bestPriceSizeLots = priceLotsToDecimal(market, new BN(bestPrice.toString()));\n  const totalCostSizeLots = priceLotsToDecimal(market, new BN(totalCost.toString()));\n  const inAmountWithoutFee = totalCostSizeLots.mul(baseSizeLots.toString()).ceil();\n  const fee = totalCostSizeLots.mul(baseSizeLots.toString()).mul(takerFeePct).ceil();\n\n  return {\n    side: 'buy',\n    notEnoughLiquidity: JSBI.lessThanOrEqual(totalCoins, coinOut),\n    minimum: {\n      in: JSBI.BigInt(\n        bestPriceSizeLots\n          .mul(baseSizeLots.toString())\n          .mul(1 + takerFeePct)\n          .ceil(),\n      ),\n      out: baseSizeLots,\n    },\n    inAmount: JSBI.BigInt(inAmountWithoutFee.add(fee)),\n    outAmount: coinOut,\n    feeAmount: JSBI.BigInt(fee),\n    priceImpactPct,\n    feePct: takerFeePct,\n  };\n}\n\nexport function forecastSell(market: Market, orderbook: Orderbook, coinIn: JSBI, takerFeePct: number): IMarketMeta {\n  let pcOut = JSBI.BigInt(0);\n  let bestPrice = JSBI.BigInt(0);\n  let worstPrice = JSBI.BigInt(0);\n  let totalCoin = JSBI.BigInt(0);\n  let availableCoin = coinIn;\n  let inAmount = JSBI.BigInt(0);\n\n  const baseSizeLots = JSBI.BigInt(market.baseSizeLotsToNumber(new BN(1)));\n  const quoteSizeLots = JSBI.BigInt(market.quoteSizeLotsToNumber(new BN(1)));\n\n  for (const [lotPrice, lotQuantity] of getL2(orderbook)) {\n    if (JSBI.equal(bestPrice, ZERO)) {\n      bestPrice = lotPrice;\n    }\n\n    worstPrice = lotPrice;\n\n    const orderCoinAmount = JSBI.multiply(baseSizeLots, lotQuantity);\n    const orderPcAmount = JSBI.multiply(lotQuantity, JSBI.multiply(lotPrice, quoteSizeLots));\n    totalCoin = JSBI.add(totalCoin, orderCoinAmount);\n\n    if (JSBI.greaterThanOrEqual(orderCoinAmount, availableCoin)) {\n      const numberLotsCanSell = JSBI.divide(availableCoin, baseSizeLots);\n      const totalCoinAmountToSell = JSBI.multiply(numberLotsCanSell, lotPrice);\n      pcOut = JSBI.add(pcOut, JSBI.multiply(totalCoinAmountToSell, quoteSizeLots));\n      availableCoin = JSBI.subtract(availableCoin, totalCoinAmountToSell);\n      inAmount = JSBI.add(inAmount, JSBI.multiply(numberLotsCanSell, baseSizeLots));\n      break;\n    } else {\n      pcOut = JSBI.add(pcOut, orderPcAmount);\n      availableCoin = JSBI.subtract(availableCoin, orderCoinAmount);\n      inAmount = JSBI.add(inAmount, orderCoinAmount);\n    }\n  }\n\n  let pcOutAfterFee = new Decimal(pcOut.toString()).mul(1 - takerFeePct).floor();\n\n  const bestPriceDecimal = priceLotsToDecimal(market, new BN(bestPrice.toString()));\n  const worstPriceDecimal = priceLotsToDecimal(market, new BN(worstPrice.toString()));\n\n  const priceImpactPct = bestPriceDecimal.minus(worstPriceDecimal).div(bestPriceDecimal).toNumber();\n\n  return {\n    side: 'sell',\n    notEnoughLiquidity: JSBI.greaterThan(JSBI.BigInt(coinIn), totalCoin),\n    minimum: {\n      in: baseSizeLots,\n      out: JSBI.BigInt(\n        bestPriceDecimal\n          .mul(JSBI.toNumber(baseSizeLots))\n          .mul(1 - takerFeePct)\n          .floor()\n          .toString(),\n      ),\n    },\n    inAmount: inAmount,\n    outAmount: JSBI.BigInt(pcOutAfterFee),\n    feeAmount: JSBI.BigInt(new Decimal(pcOut.toString()).mul(takerFeePct).round()),\n    priceImpactPct,\n    feePct: takerFeePct,\n  };\n}\n\nexport function* getL2(orderbook: Orderbook): Generator<[JSBI, JSBI]> {\n  const descending = orderbook.isBids;\n  for (const { key, quantity } of orderbook.slab.items(descending)) {\n    const price = JSBI.BigInt(key.ushrn(64).toString());\n    yield [price, JSBI.BigInt(quantity.toString())];\n  }\n}\n\nfunction divideBnToDecimal(numerator: BN, denominator: BN): Decimal {\n  const quotient = new Decimal(numerator.div(denominator).toString());\n  const rem = numerator.umod(denominator);\n  const gcd = rem.gcd(denominator);\n  return quotient.add(new Decimal(rem.div(gcd).toString()).div(new Decimal(denominator.div(gcd).toString())));\n}\n\nfunction priceLotsToDecimal(market: Market, price: BN) {\n  // @ts-expect-error _decoded\n  const baseLotSize = market._decoded.baseLotSize;\n  if (baseLotSize.isZero()) return new Decimal(0);\n\n  return divideBnToDecimal(\n    // @ts-expect-error _decoded _baseSplTokenMultiplier is private\n    price.mul(market._decoded.quoteLotSize).mul(market._baseSplTokenMultiplier),\n    // @ts-expect-error _quoteSplTokenMultiplier is private\n    baseLotSize.mul(market._quoteSplTokenMultiplier),\n  );\n}\n","import { Orderbook } from '@project-serum/serum';\nimport { PublicKey } from '@solana/web3.js';\nimport { AccountInfoMap, Amm, mapAddressToAccountInfos, Quote, QuoteParams, SwapParams } from '../amm';\nimport { createSerumSwapInstruction } from '../jupiterInstruction';\nimport { SerumMarket } from '../market';\nimport { getL2, getOutAmountMeta } from './market';\n\nexport class SerumAmm implements Amm {\n  id: string;\n  label = 'Serum' as const;\n  shouldPrefetch = false;\n  exactOutputSupported = false;\n\n  private _orderbooks: { asks: Orderbook; bids: Orderbook } | undefined;\n\n  constructor(public market: SerumMarket) {\n    this.id = market.address.toBase58();\n  }\n\n  get orderbooks() {\n    return this._orderbooks;\n  }\n\n  static getL2 = getL2;\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [this.market.asksAddress, this.market.bidsAddress];\n  }\n\n  update(accountInfoMap: AccountInfoMap): void {\n    const [asksAccountInfo, bidsAccountInfo] = mapAddressToAccountInfos(accountInfoMap, this.getAccountsForUpdate());\n\n    const asks = Orderbook.decode(this.market, asksAccountInfo.data);\n    const bids = Orderbook.decode(this.market, bidsAccountInfo.data);\n\n    this._orderbooks = {\n      asks,\n      bids,\n    };\n  }\n\n  getQuote({ sourceMint, destinationMint, amount }: QuoteParams): Quote {\n    if (!this.orderbooks) {\n      throw new Error('Failed to find orderbooks');\n    }\n\n    const outAmountMeta = getOutAmountMeta({\n      market: this.market,\n      asks: this.orderbooks.asks,\n      bids: this.orderbooks.bids,\n      fromMint: sourceMint,\n      toMint: destinationMint,\n      fromAmount: amount,\n    });\n\n    return {\n      notEnoughLiquidity: outAmountMeta.notEnoughLiquidity,\n      minInAmount: outAmountMeta.minimum.in,\n      minOutAmount: outAmountMeta.minimum.out,\n      inAmount: outAmountMeta.inAmount,\n      outAmount: outAmountMeta.outAmount,\n      feeAmount: outAmountMeta.feeAmount,\n      feeMint: this.market.quoteMintAddress.toBase58(),\n      feePct: outAmountMeta.feePct,\n      priceImpactPct: outAmountMeta.priceImpactPct,\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams) {\n    if (!swapParams.openOrdersAddress) {\n      throw new Error('Missing open orders');\n    }\n\n    return [\n      createSerumSwapInstruction({\n        market: this.market,\n        openOrdersAddress: swapParams.openOrdersAddress,\n        referrer: swapParams?.quoteMintToReferrer?.get(this.market.quoteMintAddress.toBase58()),\n        ...swapParams,\n        inAmount: swapParams.amount,\n        minimumOutAmount: swapParams.otherAmountThreshold,\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.market.baseMintAddress, this.market.quoteMintAddress];\n  }\n}\n","import { PublicKey } from '@solana/web3.js';\nimport { getTwoPermutations } from '../../utils/getTwoPermutations';\nimport { AccountInfoMap, Amm, Quote, QuoteParams, SwapParams } from '../amm';\nimport { RaydiumAmm } from '../raydium/raydiumAmm';\nimport { createRiskCheckAndFeeInstruction } from '../jupiterInstruction';\nimport { SerumAmm } from '../serum/serumAmm';\nimport { SerumMarket } from '../market';\nimport JSBI from 'jsbi';\nimport { ZERO } from '@jup-ag/math';\nimport { BN } from 'bn.js';\n\ninterface SplitSolution {\n  outAmount: JSBI;\n  portion: number;\n  firstQuote: Quote | undefined;\n  secondQuote: Quote | undefined;\n}\n\nfunction isSplitSupported(firstAmm: Amm, secondAmm: Amm) {\n  if (\n    (firstAmm instanceof SerumAmm && secondAmm instanceof RaydiumAmm) ||\n    (firstAmm instanceof RaydiumAmm && secondAmm instanceof SerumAmm) ||\n    (firstAmm instanceof SerumAmm && secondAmm instanceof SerumAmm)\n  ) {\n    return false;\n  }\n  return true;\n}\n\nconst HUNDRED = JSBI.BigInt(100);\n\n// Create an iteration to quote with a stepped split\nexport class SplitTradeAmm implements Amm {\n  market: SerumMarket | null;\n  shouldPrefetch = false;\n  exactOutputSupported = false;\n  private portion1: number = 0;\n  private portion2: number = 0;\n\n  constructor(public firstAmm: Amm, public secondAmm: Amm, public reserveTokenMints: PublicKey[]) {\n    this.market =\n      firstAmm instanceof SerumAmm ? firstAmm.market : secondAmm instanceof SerumAmm ? secondAmm.market : null;\n  }\n\n  static getAmmIdsFromSplitTradeAmmId(id: string): string[] {\n    const ammIds = id.split('-');\n\n    return ammIds.length > 1 ? ammIds : [];\n  }\n\n  static create(firstAmm: Amm, secondAmm: Amm) {\n    if (!isSplitSupported(firstAmm, secondAmm)) return;\n\n    const firstAmmTwoPermutations = getTwoPermutations(firstAmm.reserveTokenMints);\n    const secondAmmTwoPermutations = getTwoPermutations(secondAmm.reserveTokenMints);\n\n    for (const firstAmmTwoPermutation of firstAmmTwoPermutations) {\n      for (const secondAmmTwoPermutation of secondAmmTwoPermutations) {\n        if (firstAmmTwoPermutation.every((value, index) => value.equals(secondAmmTwoPermutation[index]))) {\n          return new SplitTradeAmm(firstAmm, secondAmm, firstAmmTwoPermutation);\n        }\n      }\n    }\n  }\n\n  setPortions(portion1: number, portion2: number) {\n    if (portion1 + portion2 !== 100) {\n      throw new Error('Split trade portions must sum to 100');\n    }\n\n    this.portion1 = portion1;\n    this.portion2 = portion2;\n  }\n\n  get id() {\n    return `${this.firstAmm.id}-${this.secondAmm.id}`;\n  }\n\n  get label() {\n    const labelWithPortions = [\n      { label: this.firstAmm.label, portion: this.portion1 },\n      { label: this.secondAmm.label, portion: this.portion2 },\n    ].sort((a, b) => b.portion - a.portion);\n\n    return labelWithPortions.map(({ label, portion }) => `${label} (${portion}%)`).join(' + ');\n  }\n\n  getAccountsForUpdate() {\n    return [];\n  }\n\n  update(_accountInfoMap: AccountInfoMap) {\n    // Underlying amms are updated\n  }\n\n  getQuote(quoteParams: QuoteParams): Quote {\n    const sourceMintString = quoteParams.sourceMint.toBase58();\n    const amount = quoteParams.amount;\n    // Portion in % directly to please the UI\n    let bestSolution: SplitSolution = {\n      outAmount: ZERO,\n      portion: 0,\n      firstQuote: undefined,\n      secondQuote: undefined,\n    };\n\n    // Increase portion until 100\n    for (let p = 100; (p -= 5); p > 0) {\n      const firstAmount = JSBI.divide(JSBI.multiply(amount, JSBI.BigInt(p)), HUNDRED);\n      const secondAmount = JSBI.subtract(amount, firstAmount);\n\n      const firstQuote = this.firstAmm.getQuote({\n        ...quoteParams,\n        amount: firstAmount,\n      });\n      const secondQuote = this.secondAmm.getQuote({\n        ...quoteParams,\n        amount: secondAmount,\n      });\n      const outAmount = JSBI.add(firstQuote.outAmount, secondQuote.outAmount);\n\n      if (JSBI.lessThan(outAmount, bestSolution.outAmount)) {\n        break;\n      }\n\n      bestSolution = {\n        outAmount,\n        portion: p,\n        firstQuote,\n        secondQuote,\n      };\n    }\n\n    if (!bestSolution.firstQuote || !bestSolution.secondQuote) {\n      throw new Error('Unreachable: There was no better solution than getting 0 outAmount');\n    }\n\n    const { outAmount, portion, firstQuote, secondQuote } = bestSolution;\n    const portion1 = portion;\n    const portion2 = 100 - portion1;\n\n    // For UI display\n    this.portion1 = portion1;\n    this.portion2 = portion2;\n\n    let firstAmmFee = {\n      amount: firstQuote.feeAmount,\n      mint: firstQuote.feeMint,\n    };\n    let secondAmmFee = {\n      amount: secondQuote.feeAmount,\n      mint: secondQuote.feeMint,\n    };\n\n    if (firstAmmFee.mint !== secondAmmFee.mint) {\n      // Then we convert destinationMint fee into a sourceMint, to please the current data structure\n      // This will lead to inexact fees but this doesn't affect the user minimum out amount\n      if (firstAmmFee.mint !== sourceMintString) {\n        firstAmmFee = {\n          amount: JSBI.divide(\n            JSBI.divide(JSBI.multiply(firstAmmFee.amount, JSBI.multiply(amount, JSBI.BigInt(portion1))), HUNDRED),\n            bestSolution.outAmount,\n          ),\n          mint: sourceMintString,\n        };\n      }\n      if (secondAmmFee.mint !== sourceMintString) {\n        secondAmmFee = {\n          amount: JSBI.divide(\n            JSBI.divide(JSBI.multiply(JSBI.multiply(secondAmmFee.amount, amount), JSBI.BigInt(portion2)), HUNDRED),\n            bestSolution.outAmount,\n          ),\n          mint: sourceMintString,\n        };\n      }\n    }\n\n    const feePct = (portion1 * firstQuote.feePct + portion2 * secondQuote.feePct) / 100;\n    const priceImpactPct = (portion1 * firstQuote.priceImpactPct + portion2 * secondQuote.priceImpactPct) / 100;\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: quoteParams.amount,\n      outAmount: outAmount,\n      feeAmount: JSBI.add(firstAmmFee.amount, secondAmmFee.amount),\n      feeMint: firstAmmFee.mint, // Guaranteed identical mint at this point\n      feePct,\n      priceImpactPct,\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams) {\n    const inAmount = swapParams.amount;\n    if (inAmount === null) {\n      throw new Error('Split trade cannot be used with a null inAmount');\n    }\n\n    // We rely on the fact that this.portion1 is set, what if it isn't?\n    const firstAmount = inAmount.mul(new BN(this.portion1)).div(new BN(HUNDRED.toString()));\n    const secondAmount = inAmount.sub(firstAmount);\n\n    return [\n      ...this.firstAmm.createSwapInstructions({\n        ...swapParams,\n        amount: firstAmount,\n        otherAmountThreshold: new BN(0),\n        platformFee: undefined,\n      }),\n      ...this.secondAmm.createSwapInstructions({\n        ...swapParams,\n        amount: secondAmount,\n        otherAmountThreshold: new BN(0),\n        platformFee: undefined,\n      }),\n      createRiskCheckAndFeeInstruction(\n        swapParams.userDestinationTokenAccount,\n        swapParams.userTransferAuthority,\n        new BN(swapParams.otherAmountThreshold.toString()),\n        swapParams.tokenLedger,\n        swapParams.platformFee,\n      ),\n    ];\n  }\n}\n","import { Market as SerumMarket } from '@project-serum/serum';\nimport { PublicKey } from '@solana/web3.js';\nimport { StableSwap } from '@saberhq/stableswap-sdk';\nimport { SaberAddDecimalsAmm } from './saber/saberAddDecimalsAmm';\nimport { SplitTradeAmm } from './split-trade/splitTradeAmm';\nimport { RaydiumAmm } from './raydium/raydiumAmm';\nimport { SerumAmm } from './serum/serumAmm';\nimport { Amm } from './amm';\nimport JSBI from 'jsbi';\n\nexport interface Fee {\n  amount: JSBI;\n  mint: string;\n  pct: number;\n}\n\nexport { SerumMarket, StableSwap };\n\nexport interface MarketInfo {\n  amm: Amm; //name: string, // pair for serum, pool name for mer pool\n  inputMint: PublicKey;\n  outputMint: PublicKey;\n  minInAmount?: JSBI;\n  minOutAmount?: JSBI;\n  inAmount: JSBI;\n  outAmount: JSBI;\n  notEnoughLiquidity: boolean;\n  priceImpactPct: number;\n  lpFee: Fee;\n  platformFee: Fee;\n}\n\n// This is to check if the two markets are supported by the aggregator\nexport const isValidRoute = (ammA: Amm, ammB: Amm) => {\n  // dont match the same amm together\n  if (ammA.id === ammB.id) {\n    return false;\n  }\n  // don't show decimal as input or output\n  else if (ammA instanceof SaberAddDecimalsAmm && ammB instanceof SaberAddDecimalsAmm) {\n    return false;\n  } else if (ammA instanceof SplitTradeAmm || ammB instanceof SplitTradeAmm) {\n    return false;\n  }\n\n  return true;\n};\n\nexport function isSerumAndRaydium(marketInfos: MarketInfo[]) {\n  if (marketInfos.length < 2) return false;\n\n  const [firstAmm, secondAmm] = marketInfos.map((mi) => mi.amm);\n\n  return (\n    (firstAmm instanceof RaydiumAmm && secondAmm instanceof SerumAmm) ||\n    (firstAmm instanceof SerumAmm && secondAmm instanceof RaydiumAmm)\n  );\n}\n","import { calculateAmpFactor, StableSwap } from '@saberhq/stableswap-sdk';\nimport { PublicKey } from '@solana/web3.js';\nimport { Fraction, ONE, Stable, TWO } from '@jup-ag/math';\nimport JSBI from 'jsbi';\nimport Decimal from 'decimal.js';\nimport {\n  AccountInfoMap,\n  Amm,\n  mapAddressToAccountInfos,\n  Quote,\n  QuoteParams,\n  tokenAccountsToJSBIs,\n  SwapParams,\n} from '../amm';\nimport { createSaberSwapInstruction } from '../jupiterInstruction';\nimport { deserializeAccount } from '@mercurial-finance/optimist';\nimport { AccountInfo } from '@solana/spl-token';\n\nexport class SaberAmm implements Amm {\n  id: string;\n  label = 'Saber' as const;\n  shouldPrefetch = false;\n  exactOutputSupported = false;\n\n  private tokenAccounts: AccountInfo[] = [];\n  private calculator: Stable;\n\n  constructor(private stableSwap: StableSwap) {\n    this.id = stableSwap.config.swapAccount.toBase58();\n\n    this.calculator = new Stable(\n      TWO,\n      calculateAmpFactor(this.stableSwap.state),\n      [ONE, ONE],\n      new Fraction(this.stableSwap.state.fees.trade.numerator, this.stableSwap.state.fees.trade.denominator),\n    );\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [this.stableSwap.state.tokenA.reserve, this.stableSwap.state.tokenB.reserve];\n  }\n\n  update(accountInfoMap: AccountInfoMap) {\n    let tokenAccountInfos = mapAddressToAccountInfos(accountInfoMap, this.getAccountsForUpdate());\n\n    this.tokenAccounts = tokenAccountInfos.map((info) => {\n      const tokenAccount = deserializeAccount(info.data);\n      if (!tokenAccount) {\n        throw new Error('Invalid token account data');\n      }\n      return tokenAccount;\n    });\n  }\n\n  getQuote({ sourceMint, destinationMint, amount }: QuoteParams): Quote {\n    if (this.tokenAccounts.length === 0) {\n      throw new Error('Unable to fetch accounts for specified tokens.');\n    }\n\n    const feePct = new Decimal(this.stableSwap.state.fees.trade.asFraction.toFixed(4));\n\n    const [inputIndex, outputIndex] = this.tokenAccounts[0].mint.equals(sourceMint) ? [0, 1] : [1, 0];\n\n    this.calculator.setAmp(calculateAmpFactor(this.stableSwap.state));\n    const result = this.calculator.exchange(tokenAccountsToJSBIs(this.tokenAccounts), amount, inputIndex, outputIndex);\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: result.expectedOutputAmount,\n      feeAmount: result.fees,\n      feeMint: destinationMint.toBase58(),\n      feePct: feePct.toNumber(),\n      priceImpactPct: result.priceImpact.toNumber(),\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams) {\n    return [\n      createSaberSwapInstruction({\n        stableSwap: this.stableSwap,\n        ...swapParams,\n        inAmount: swapParams.amount,\n        minimumOutAmount: swapParams.otherAmountThreshold,\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.stableSwap.state.tokenA.mint, this.stableSwap.state.tokenB.mint];\n  }\n}\n","import { u64 } from '@solana/spl-token';\nimport Decimal from 'decimal.js';\n\nconst ZERO = new u64(0);\n\nexport class Percentage {\n  readonly numerator: u64;\n  readonly denominator: u64;\n\n  constructor(numerator: u64, denominator: u64) {\n    this.numerator = numerator;\n    this.denominator = denominator;\n  }\n\n  public static fromDecimal(number: Decimal): Percentage {\n    return Percentage.fromFraction(number.toDecimalPlaces(1).mul(10).toNumber(), 1000);\n  }\n\n  public static fromFraction(numerator: u64 | number, denominator: u64 | number): Percentage {\n    const num = typeof numerator === 'number' ? new u64(numerator.toString()) : numerator;\n    const denom = typeof denominator === 'number' ? new u64(denominator.toString()) : denominator;\n    return new Percentage(num, denom);\n  }\n\n  public toString = (): string => {\n    return `${this.numerator.toString()}/${this.denominator.toString()}`;\n  };\n\n  public toDecimal() {\n    if (this.denominator.eq(ZERO)) {\n      return new Decimal(0);\n    }\n    return new Decimal(this.numerator.toString()).div(new Decimal(this.denominator.toString()));\n  }\n\n  public add(p2: Percentage): Percentage {\n    const denomGcd = this.denominator.gcd(p2.denominator);\n    const denomLcm = this.denominator.div(denomGcd).mul(p2.denominator);\n\n    const p1DenomAdjustment = denomLcm.div(this.denominator);\n    const p2DenomAdjustment = denomLcm.div(p2.denominator);\n\n    const p1NumeratorAdjusted = this.numerator.mul(p1DenomAdjustment);\n    const p2NumeratorAdjusted = p2.numerator.mul(p2DenomAdjustment);\n\n    const newNumerator = p1NumeratorAdjusted.add(p2NumeratorAdjusted);\n\n    return new Percentage(new u64(newNumerator.toString()), new u64(denomLcm.toString()));\n  }\n}\n","import { struct, blob, u8, Structure } from '@solana/buffer-layout';\nimport { u64 } from '@solana/spl-token';\nimport { AccountInfo, PublicKey } from '@solana/web3.js';\nimport { ALDRIN_SWAP_V2_PROGRAM_ID } from '../../constants';\nimport { publicKey, rustEnum, uint64 } from '../../utils/layout';\nimport { Percentage } from './percentage';\n\ntype FeeStructure = {\n  traderFee: Percentage;\n  ownerFee: Percentage;\n};\n\ninterface FeeLayout {\n  tradeFeeNumerator: u64;\n  tradeFeeDenominator: u64;\n  ownerTradeFeeNumerator: u64;\n  ownerTradeFeeDenominator: u64;\n  ownerWithdrawFeeNumerator: u64;\n  ownerWithdrawFeeDenominator: u64;\n}\n\n// https://github.com/aldrin-exchange/aldrin-sdk/blob/78527e3adfc02e186956f420b5083fa0950e7263/src/pools/layout.ts\nconst FEES_LAYOUT = struct<FeeLayout>(\n  [\n    uint64('tradeFeeNumerator'),\n    uint64('tradeFeeDenominator'),\n    uint64('ownerTradeFeeNumerator'),\n    uint64('ownerTradeFeeDenominator'),\n    uint64('ownerWithdrawFeeNumerator'),\n    uint64('ownerWithdrawFeeDenominator'),\n  ],\n  'fees',\n);\n\nconst POOL_FIELDS_COMMON = [\n  blob(8, 'padding'),\n  publicKey('lpTokenFreezeVault'),\n  publicKey('poolMint'),\n  publicKey('baseTokenVault'),\n  publicKey('baseTokenMint'),\n  publicKey('quoteTokenVault'),\n  publicKey('quoteTokenMint'),\n  publicKey('poolSigner'),\n  u8('poolSignerNonce'),\n  publicKey('authority'),\n  publicKey('initializerAccount'),\n  publicKey('feeBaseAccount'),\n  publicKey('feeQuoteAccount'),\n  publicKey('feePoolTokenAccount'),\n  FEES_LAYOUT,\n];\n\ninterface PoolLayout {\n  padding: any;\n  lpTokenFreezeVault: PublicKey;\n  poolMint: PublicKey;\n  baseTokenVault: PublicKey;\n  baseTokenMint: PublicKey;\n  quoteTokenVault: PublicKey;\n  quoteTokenMint: PublicKey;\n  poolSigner: PublicKey;\n  poolSignerNonce: number;\n  authority: PublicKey;\n  initializerAccount: PublicKey;\n  feeBaseAccount: PublicKey;\n  feeQuoteAccount: PublicKey;\n  feePoolTokenAccount: PublicKey;\n  fees: FeeLayout;\n}\n\nexport const POOL_LAYOUT = struct<PoolLayout>(POOL_FIELDS_COMMON);\n\ninterface PoolV2Layout extends PoolLayout {\n  curveType: number;\n  curve: PublicKey;\n}\n\nexport const POOL_V2_LAYOUT = struct<PoolV2Layout>([...POOL_FIELDS_COMMON, u8('curveType'), publicKey('curve')]);\n\ninterface StableCurveLayout {\n  padding: any;\n  amp: u64;\n}\n\nexport const STABLE_CURVE_LAYOUT = struct<StableCurveLayout>([blob(8, 'padding'), uint64('amp')]);\n\ninterface SwapInstructionLayout {\n  instruction: any;\n  tokens: u64;\n  minTokens: u64;\n  side: 'bid' | 'ask';\n}\n\nexport const SWAP_INSTRUCTION_LAYOUT = struct<SwapInstructionLayout>([\n  blob(8, 'instruction'),\n  uint64('tokens'),\n  uint64('minTokens'),\n  rustEnum([new Structure([], 'bid'), new Structure([], 'ask')], 'side'),\n]);\n\nexport function accountInfoToAldrinPoolState(address: PublicKey, accountInfo: AccountInfo<Buffer>): AldrinPoolState {\n  const isV2 = accountInfo.owner.equals(ALDRIN_SWAP_V2_PROGRAM_ID) ? true : false;\n\n  const decoded: PoolV2Layout | PoolLayout = (isV2 ? POOL_V2_LAYOUT : POOL_LAYOUT).decode(accountInfo.data) as\n    | PoolV2Layout\n    | PoolLayout;\n\n  const curveObject = 'curveType' in decoded ? { curveType: decoded.curveType, curve: decoded.curve } : {};\n\n  return {\n    isV2,\n    address,\n    poolMint: decoded.poolMint,\n    baseTokenVault: decoded.baseTokenVault,\n    baseTokenMint: decoded.baseTokenMint,\n    quoteTokenVault: decoded.quoteTokenVault,\n    quoteTokenMint: decoded.quoteTokenMint,\n    poolSigner: decoded.poolSigner,\n    feeBaseAccount: decoded.feeBaseAccount,\n    feeQuoteAccount: decoded.feeQuoteAccount,\n    feePoolTokenAccount: decoded.feePoolTokenAccount,\n    fees: {\n      traderFee: Percentage.fromFraction(decoded.fees.tradeFeeNumerator, decoded.fees.tradeFeeDenominator),\n      ownerFee: Percentage.fromFraction(decoded.fees.ownerTradeFeeNumerator, decoded.fees.ownerTradeFeeDenominator),\n    },\n    ...curveObject,\n  };\n}\n\nexport interface AldrinPoolState {\n  isV2: Boolean;\n  address: PublicKey;\n  poolMint: PublicKey;\n  baseTokenVault: PublicKey;\n  baseTokenMint: PublicKey;\n  quoteTokenVault: PublicKey;\n  quoteTokenMint: PublicKey;\n  poolSigner: PublicKey;\n  feeBaseAccount: PublicKey;\n  feeQuoteAccount: PublicKey;\n  feePoolTokenAccount: PublicKey;\n  fees: FeeStructure;\n  curveType?: number;\n  curve?: PublicKey;\n}\n","import { Fraction, TokenSwapConstantProduct, TokenSwapStable } from '@jup-ag/math';\nimport { AccountInfo, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport JSBI from 'jsbi';\nimport { deserializeAccount } from '@mercurial-finance/optimist';\nimport {\n  AccountInfoMap,\n  Amm,\n  mapAddressToAccountInfos,\n  Quote,\n  QuoteParams,\n  tokenAccountsToJSBIs,\n  SwapParams,\n} from '../amm';\nimport { createAldrinSwapInstruction, createAldrinV2SwapInstruction } from '../jupiterInstruction';\nimport { accountInfoToAldrinPoolState, AldrinPoolState, STABLE_CURVE_LAYOUT } from './poolState';\nimport { AccountInfo as TokenAccountInfo } from '@solana/spl-token';\nimport Decimal from 'decimal.js';\n\ninterface AldrinParams {\n  amp?: number;\n}\n\nexport class AldrinAmm implements Amm {\n  id: string;\n  label = 'Aldrin' as const;\n  shouldPrefetch = false;\n  exactOutputSupported = false;\n\n  poolState: AldrinPoolState;\n  private tokenAccounts: TokenAccountInfo[] = [];\n  calculator: TokenSwapConstantProduct | TokenSwapStable;\n\n  constructor(address: PublicKey, accountInfo: AccountInfo<Buffer>, private params: AldrinParams) {\n    this.poolState = accountInfoToAldrinPoolState(address, accountInfo);\n    this.id = address.toBase58();\n\n    if (this.poolState.curveType === 1) {\n      const { amp } = this.params;\n      if (!amp) {\n        throw new Error('Amp is required for a stable curve');\n      }\n\n      this.calculator = new TokenSwapStable(\n        JSBI.BigInt(amp),\n        new Fraction(\n          JSBI.BigInt(this.poolState.fees.traderFee.numerator.toString()),\n          JSBI.BigInt(this.poolState.fees.traderFee.denominator.toString()),\n        ),\n        new Fraction(\n          JSBI.BigInt(this.poolState.fees.ownerFee.numerator.toString()),\n          JSBI.BigInt(this.poolState.fees.ownerFee.denominator.toString()),\n        ),\n      );\n    } else {\n      this.calculator = new TokenSwapConstantProduct(\n        new Fraction(\n          JSBI.BigInt(this.poolState.fees.traderFee.numerator.toString()),\n          JSBI.BigInt(this.poolState.fees.traderFee.denominator.toString()),\n        ),\n        new Fraction(\n          JSBI.BigInt(this.poolState.fees.ownerFee.numerator.toString()),\n          JSBI.BigInt(this.poolState.fees.ownerFee.denominator.toString()),\n        ),\n      );\n    }\n  }\n\n  static accountInfoToAldrinPoolState = accountInfoToAldrinPoolState;\n\n  static decodeStableCurveAmp(accountInfo: AccountInfo<Buffer>) {\n    const { amp } = STABLE_CURVE_LAYOUT.decode(accountInfo.data);\n\n    return amp.toNumber() * 2; // times two for their AMP, dont ask me why, it is what it is\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [this.poolState.quoteTokenVault, this.poolState.baseTokenVault];\n  }\n\n  update(accountInfoMap: AccountInfoMap): void {\n    const tokenAccountInfos = mapAddressToAccountInfos(accountInfoMap, this.getAccountsForUpdate());\n\n    this.tokenAccounts = tokenAccountInfos.map((info) => {\n      const tokenAccount = deserializeAccount(info.data);\n      if (!tokenAccount) throw new Error('Invalid token account');\n      return tokenAccount;\n    });\n  }\n\n  getQuote({ sourceMint, amount }: QuoteParams): Quote {\n    if (this.tokenAccounts.length === 0) {\n      throw new Error('Unable to fetch accounts for specified tokens.');\n    }\n\n    let feePct = new Decimal(this.poolState.fees.traderFee.numerator.toString())\n      .div(this.poolState.fees.traderFee.denominator.toString())\n      .add(\n        new Decimal(this.poolState.fees.ownerFee.numerator.toString()).div(\n          this.poolState.fees.ownerFee.denominator.toString(),\n        ),\n      );\n\n    const outputIndex = this.tokenAccounts[0].mint.equals(sourceMint) ? 1 : 0;\n    let result = this.calculator.exchange(tokenAccountsToJSBIs(this.tokenAccounts), amount, outputIndex);\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: result.expectedOutputAmount,\n      feeAmount: result.fees,\n      feeMint: sourceMint.toBase58(),\n      feePct: feePct.toNumber(),\n      priceImpactPct: result.priceImpact.toNumber(),\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams): TransactionInstruction[] {\n    if (this.poolState.isV2) {\n      if (!this.poolState.curve) {\n        throw new Error('Unable to fetch curve account.');\n      }\n\n      const curve = this.poolState.curve;\n      return [\n        createAldrinV2SwapInstruction({\n          poolState: this.poolState,\n          curve,\n          ...swapParams,\n          inAmount: swapParams.amount,\n          minimumOutAmount: swapParams.otherAmountThreshold,\n        }),\n      ];\n    }\n\n    return [\n      createAldrinSwapInstruction({\n        poolState: this.poolState,\n        ...swapParams,\n        inAmount: swapParams.amount,\n        minimumOutAmount: swapParams.otherAmountThreshold,\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.poolState.baseTokenMint, this.poolState.quoteTokenMint];\n  }\n}\n","import {\n  ORCA_PROGRAM_ID,\n  PENGUIN_PROGRAM_ID,\n  SAROS_PROGRAM_ID,\n  STEPN_PROGRAM_ID,\n  STEP_TOKEN_SWAP_PROGRAM_ID,\n} from '../../constants';\n\nexport const PROGRAM_ID_TO_LABEL = new Map<string, string>([\n  [ORCA_PROGRAM_ID.toString(), 'Orca'],\n  [STEP_TOKEN_SWAP_PROGRAM_ID.toString(), 'Step'],\n  [PENGUIN_PROGRAM_ID.toString(), 'Penguin'],\n  [SAROS_PROGRAM_ID.toString(), 'Saros'],\n  [STEPN_PROGRAM_ID.toString(), 'Stepn'],\n]);\n","import { struct, u8, blob } from '@solana/buffer-layout';\nimport { u64 } from '@solana/spl-token';\nimport { AccountInfo, PublicKey } from '@solana/web3.js';\nimport { STEP_TOKEN_SWAP_PROGRAM_ID } from '../../constants';\nimport { publicKey, uint64 } from '../../utils/layout';\nimport { createProgramAddressSyncUnsafe } from '../../utils/pda';\n\ninterface TokenSwapLayout {\n  version: number;\n  isInitialized: number;\n  bumpSeed: number;\n  tokenProgramId: PublicKey;\n  tokenAccountA: PublicKey;\n  tokenAccountB: PublicKey;\n  tokenPool: PublicKey;\n  mintA: PublicKey;\n  mintB: PublicKey;\n  feeAccount: PublicKey;\n  tradeFeeNumerator: u64;\n  tradeFeeDenominator: u64;\n  ownerTradeFeeNumerator: u64;\n  ownerTradeFeeDenominator: u64;\n  ownerWithdrawFeeNumerator: u64;\n  ownerWithdrawFeeDenominator: u64;\n  hostFeeNumerator: u64;\n  hostFeeDenominator: u64;\n  curveType: number;\n  curveParameters: Uint8Array;\n}\n\nconst TokenSwapLayout = struct<TokenSwapLayout>([\n  u8('version'),\n  u8('isInitialized'),\n  u8('bumpSeed'),\n  publicKey('tokenProgramId'),\n  publicKey('tokenAccountA'),\n  publicKey('tokenAccountB'),\n  publicKey('tokenPool'),\n  publicKey('mintA'),\n  publicKey('mintB'),\n  publicKey('feeAccount'),\n  uint64('tradeFeeNumerator'),\n  uint64('tradeFeeDenominator'),\n  uint64('ownerTradeFeeNumerator'),\n  uint64('ownerTradeFeeDenominator'),\n  uint64('ownerWithdrawFeeNumerator'),\n  uint64('ownerWithdrawFeeDenominator'),\n  uint64('hostFeeNumerator'),\n  uint64('hostFeeDenominator'),\n  u8('curveType'),\n  blob(32, 'curveParameters'),\n]);\n\ninterface StepTokenSwapLayout extends TokenSwapLayout {\n  poolNonce: u64;\n}\n\nconst StepTokenSwapLayout = struct<StepTokenSwapLayout>([\n  u8('version'),\n  u8('isInitialized'),\n  u8('bumpSeed'),\n  publicKey('tokenProgramId'),\n  publicKey('tokenAccountA'),\n  publicKey('tokenAccountB'),\n  publicKey('tokenPool'),\n  publicKey('mintA'),\n  publicKey('mintB'),\n  publicKey('feeAccount'),\n  uint64('tradeFeeNumerator'),\n  uint64('tradeFeeDenominator'),\n  uint64('ownerTradeFeeNumerator'),\n  uint64('ownerTradeFeeDenominator'),\n  uint64('ownerWithdrawFeeNumerator'),\n  uint64('ownerWithdrawFeeDenominator'),\n  u8('curveType'),\n  blob(32, 'curveParameters'),\n  u8('poolNonce'),\n]);\n\nexport interface TokenSwapState {\n  address: PublicKey;\n  programId: PublicKey;\n  tokenProgramId: PublicKey;\n  poolToken: PublicKey;\n  feeAccount: PublicKey;\n  authority: PublicKey;\n  tokenAccountA: PublicKey;\n  tokenAccountB: PublicKey;\n  mintA: PublicKey;\n  mintB: PublicKey;\n  tradeFeeNumerator: u64;\n  tradeFeeDenominator: u64;\n  ownerTradeFeeNumerator: u64;\n  ownerTradeFeeDenominator: u64;\n  ownerWithdrawFeeNumerator: u64;\n  ownerWithdrawFeeDenominator: u64;\n  curveType: number;\n  curveParameters: Uint8Array;\n  poolNonce?: u64;\n}\n\nexport function accountInfoToTokenSwapState(\n  address: PublicKey,\n  tokenSwapAccountInfo: AccountInfo<Buffer>,\n): TokenSwapState {\n  const programId = tokenSwapAccountInfo.owner;\n\n  // The layout difference only affects fields we do not actively use\n  const tokenSwapData = (\n    programId.equals(STEP_TOKEN_SWAP_PROGRAM_ID)\n      ? StepTokenSwapLayout.decode(tokenSwapAccountInfo.data)\n      : TokenSwapLayout.decode(tokenSwapAccountInfo.data)\n  ) as TokenSwapLayout | StepTokenSwapLayout;\n\n  if (!tokenSwapData.isInitialized) {\n    throw new Error(`Invalid token swap state`);\n  }\n\n  const authority = createProgramAddressSyncUnsafe(\n    [address.toBuffer(), Buffer.from([tokenSwapData.bumpSeed])],\n    programId,\n  );\n\n  const poolToken = new PublicKey(tokenSwapData.tokenPool);\n  const feeAccount = new PublicKey(tokenSwapData.feeAccount);\n  const tokenAccountA = new PublicKey(tokenSwapData.tokenAccountA);\n  const tokenAccountB = new PublicKey(tokenSwapData.tokenAccountB);\n  const mintA = new PublicKey(tokenSwapData.mintA);\n  const mintB = new PublicKey(tokenSwapData.mintB);\n  const tokenProgramId = new PublicKey(tokenSwapData.tokenProgramId);\n\n  const tradeFeeNumerator = tokenSwapData.tradeFeeNumerator;\n  const tradeFeeDenominator = tokenSwapData.tradeFeeDenominator;\n  const ownerTradeFeeNumerator = tokenSwapData.ownerTradeFeeNumerator;\n  const ownerTradeFeeDenominator = tokenSwapData.ownerTradeFeeDenominator;\n  const ownerWithdrawFeeNumerator = tokenSwapData.ownerWithdrawFeeNumerator;\n  const ownerWithdrawFeeDenominator = tokenSwapData.ownerWithdrawFeeDenominator;\n\n  const curveType = tokenSwapData.curveType;\n  const curveParameters = tokenSwapData.curveParameters;\n\n  const poolNonce = 'poolNonce' in tokenSwapData ? tokenSwapData.poolNonce : undefined;\n\n  return {\n    address,\n    programId,\n    tokenProgramId,\n    poolToken,\n    feeAccount,\n    authority,\n    tokenAccountA,\n    tokenAccountB,\n    mintA,\n    mintB,\n    tradeFeeNumerator,\n    tradeFeeDenominator,\n    ownerTradeFeeNumerator,\n    ownerTradeFeeDenominator,\n    ownerWithdrawFeeNumerator,\n    ownerWithdrawFeeDenominator,\n    curveType,\n    curveParameters,\n    poolNonce,\n  };\n}\n","import { AccountInfo, PublicKey } from '@solana/web3.js';\nimport Decimal from 'decimal.js';\nimport {\n  AccountInfoMap,\n  Amm,\n  mapAddressToAccountInfos,\n  Quote,\n  QuoteParams,\n  SwapParams,\n  tokenAccountsToJSBIs,\n} from '../amm';\nimport { createTokenSwapInstruction } from '../jupiterInstruction';\nimport { accountInfoToTokenSwapState, TokenSwapState } from './tokenSwapLayout';\nimport { deserializeAccount } from '@mercurial-finance/optimist';\nimport { Fraction, TokenSwapConstantProduct, TokenSwapStable } from '@jup-ag/math';\nimport JSBI from 'jsbi';\nimport { AccountInfo as TokenAccountInfo } from '@solana/spl-token';\nimport { STEP_TOKEN_SWAP_PROGRAM_ID } from '../../constants';\n\nenum CurveType {\n  ConstantProduct = 0,\n  Stable = 2,\n}\n\n// Abstract any SPL token swap based AMM\nexport class SplTokenSwapAmm implements Amm {\n  id: string;\n  shouldPrefetch = false;\n  exactOutputSupported = false;\n\n  private tokenSwapState: TokenSwapState;\n  private curveType: CurveType;\n\n  private tokenAccounts: TokenAccountInfo[] = [];\n  calculator: TokenSwapConstantProduct | TokenSwapStable;\n\n  constructor(address: PublicKey, swapStateAccountInfo: AccountInfo<Buffer>, public label: string) {\n    this.id = address.toBase58();\n    this.tokenSwapState = accountInfoToTokenSwapState(address, swapStateAccountInfo);\n\n    this.curveType = this.tokenSwapState.curveType;\n\n    if (!(this.curveType in CurveType)) {\n      throw new Error(`curveType ${this.tokenSwapState.curveType} is not supported`);\n    }\n\n    if (this.tokenSwapState.curveType === CurveType.ConstantProduct) {\n      this.calculator = new TokenSwapConstantProduct(\n        new Fraction(\n          JSBI.BigInt(this.tokenSwapState.tradeFeeNumerator.toString()),\n          JSBI.BigInt(this.tokenSwapState.tradeFeeDenominator.toString()),\n        ),\n        new Fraction(\n          JSBI.BigInt(this.tokenSwapState.ownerTradeFeeNumerator.toString()),\n          JSBI.BigInt(this.tokenSwapState.ownerTradeFeeDenominator.toString()),\n        ),\n      );\n    } else {\n      this.calculator = new TokenSwapStable(\n        JSBI.BigInt(this.tokenSwapState.curveParameters[0]),\n        new Fraction(\n          JSBI.BigInt(this.tokenSwapState.tradeFeeNumerator.toString()),\n          JSBI.BigInt(this.tokenSwapState.tradeFeeDenominator.toString()),\n        ),\n        new Fraction(\n          JSBI.BigInt(this.tokenSwapState.ownerTradeFeeNumerator.toString()),\n          JSBI.BigInt(this.tokenSwapState.ownerTradeFeeDenominator.toString()),\n        ),\n      );\n    }\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [this.tokenSwapState.tokenAccountA, this.tokenSwapState.tokenAccountB];\n  }\n\n  update(accountInfoMap: AccountInfoMap): void {\n    const tokenAccountInfos = mapAddressToAccountInfos(accountInfoMap, this.getAccountsForUpdate());\n\n    this.tokenAccounts = tokenAccountInfos.map((info) => {\n      const tokenAccount = deserializeAccount(info.data);\n      if (!tokenAccount) {\n        throw new Error('Invalid token account');\n      }\n      return tokenAccount;\n    });\n  }\n\n  getQuote({ sourceMint, amount }: QuoteParams): Quote {\n    if (this.tokenAccounts.length === 0) {\n      throw new Error('Unable to fetch accounts for specified tokens.');\n    }\n\n    let feePct = new Decimal(this.tokenSwapState.tradeFeeNumerator.toString())\n      .div(this.tokenSwapState.tradeFeeDenominator.toString())\n      .add(\n        new Decimal(this.tokenSwapState.ownerTradeFeeNumerator.toString()).div(\n          this.tokenSwapState.ownerTradeFeeDenominator.toString(),\n        ),\n      );\n\n    const outputIndex = this.tokenAccounts[0].mint.equals(sourceMint) ? 1 : 0;\n    let result = this.calculator.exchange(tokenAccountsToJSBIs(this.tokenAccounts), amount, outputIndex);\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: result.expectedOutputAmount,\n      feeAmount: result.fees,\n      feeMint: sourceMint.toBase58(),\n      feePct: feePct.toNumber(),\n      priceImpactPct: result.priceImpact.toNumber(),\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams) {\n    return [\n      createTokenSwapInstruction({\n        tokenSwapState: this.tokenSwapState,\n        ...swapParams,\n        inAmount: swapParams.amount,\n        minimumOutAmount: swapParams.otherAmountThreshold,\n        isStep: this.tokenSwapState.programId.equals(STEP_TOKEN_SWAP_PROGRAM_ID),\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.tokenSwapState.mintA, this.tokenSwapState.mintB];\n  }\n}\n","import { struct, u8, u32 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/spl-token';\nimport { AccountInfo, PublicKey } from '@solana/web3.js';\nimport { uint64, publicKey } from '../../utils/layout';\nimport { createProgramAddressSyncUnsafe } from '../../utils/pda';\n\nexport const FEE_DENOMINATOR = Math.pow(10, 10);\n\ninterface MercurialSwapLayout {\n  version: number;\n  isInitialized: number;\n  nonce: number;\n  amplificationCoefficient: u64;\n  feeNumerator: u64;\n  adminFeeNumerator: u64;\n  tokenAccountsLength: number;\n  precisionFactor: u64;\n  precisionMultiplierA: u64;\n  precisionMultiplierB: u64;\n  precisionMultiplierC: u64;\n  precisionMultiplierD: u64;\n  tokenAccountA: PublicKey;\n  tokenAccountB: PublicKey;\n  tokenAccountC: PublicKey;\n  tokenAccountD: PublicKey;\n}\n\nexport const MercurialSwapLayout = struct<MercurialSwapLayout>([\n  u8('version'),\n  u8('isInitialized'),\n  u8('nonce'),\n  uint64('amplificationCoefficient'),\n  uint64('feeNumerator'),\n  uint64('adminFeeNumerator'),\n  u32('tokenAccountsLength'),\n  uint64('precisionFactor'),\n  uint64('precisionMultiplierA'),\n  uint64('precisionMultiplierB'),\n  uint64('precisionMultiplierC'),\n  uint64('precisionMultiplierD'),\n  publicKey('tokenAccountA'),\n  publicKey('tokenAccountB'),\n  publicKey('tokenAccountC'),\n  publicKey('tokenAccountD'),\n]);\n\nexport interface MercurialSwapLayoutState {\n  programId: PublicKey;\n  authority: PublicKey;\n  isInitialized: boolean;\n  nonce: number;\n  ammId: PublicKey;\n  amplificationCoefficient: number;\n  feeNumerator: number;\n  tokenAccountsLength: number;\n  precisionFactor: number;\n  precisionMultipliers: number[];\n  tokenAccounts: PublicKey[];\n}\n\nexport const accountInfoToMercurialSwapLayout = (\n  address: PublicKey,\n  accountInfo: AccountInfo<Buffer>,\n): MercurialSwapLayoutState => {\n  const programId = accountInfo.owner;\n  const decoded = MercurialSwapLayout.decode(accountInfo.data);\n  const tokenAccountsLength = decoded.tokenAccountsLength;\n  const authority = createProgramAddressSyncUnsafe([address.toBuffer(), Buffer.from([decoded.nonce])], programId);\n\n  const precisionMultipliers = [\n    decoded.precisionMultiplierA.toNumber(),\n    decoded.precisionMultiplierB.toNumber(),\n    decoded.precisionMultiplierC.toNumber(),\n    decoded.precisionMultiplierD.toNumber(),\n  ].slice(0, tokenAccountsLength);\n\n  const tokenAccounts = [\n    decoded.tokenAccountA,\n    decoded.tokenAccountB,\n    decoded.tokenAccountC,\n    decoded.tokenAccountD,\n  ].slice(0, tokenAccountsLength);\n\n  return {\n    programId,\n    authority,\n    isInitialized: Boolean(decoded.isInitialized),\n    nonce: decoded.nonce,\n    ammId: address,\n    amplificationCoefficient: decoded.amplificationCoefficient.toNumber(),\n    feeNumerator: decoded.feeNumerator.toNumber(),\n    tokenAccountsLength,\n    precisionFactor: decoded.precisionFactor.toNumber(),\n    precisionMultipliers,\n    tokenAccounts,\n  };\n};\n","import { Fraction, Stable } from '@jup-ag/math';\nimport { AccountInfo, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport JSBI from 'jsbi';\nimport {\n  AccountInfoMap,\n  Amm,\n  mapAddressToAccountInfos,\n  Quote,\n  QuoteParams,\n  tokenAccountsToJSBIs,\n  SwapParams,\n} from '../amm';\nimport { createMercurialExchangeInstruction } from '../jupiterInstruction';\nimport { deserializeAccount } from '@mercurial-finance/optimist';\nimport { AccountInfo as TokenAccountInfo } from '@solana/spl-token';\nimport { accountInfoToMercurialSwapLayout, FEE_DENOMINATOR, MercurialSwapLayoutState } from './swapLayout';\n\ninterface MercurialParams {\n  tokenMints: string[];\n}\n\nexport class MercurialAmm implements Amm {\n  id: string;\n  label = 'Mercurial';\n  shouldPrefetch = false;\n  exactOutputSupported = false;\n\n  swapLayout: MercurialSwapLayoutState;\n  private tokenAccounts: TokenAccountInfo[] = [];\n  private calculator: Stable;\n\n  static decodeSwapLayout = accountInfoToMercurialSwapLayout;\n\n  constructor(address: PublicKey, accountInfo: AccountInfo<Buffer>, private params: MercurialParams) {\n    this.id = address.toBase58();\n    this.swapLayout = accountInfoToMercurialSwapLayout(address, accountInfo);\n    this.calculator = new Stable(\n      JSBI.BigInt(this.swapLayout.tokenAccountsLength),\n      JSBI.BigInt(this.swapLayout.amplificationCoefficient),\n      this.swapLayout.precisionMultipliers.map((precisionMultiplier) => JSBI.BigInt(precisionMultiplier)),\n      new Fraction(JSBI.BigInt(this.swapLayout.feeNumerator), JSBI.BigInt(FEE_DENOMINATOR)),\n    );\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return this.swapLayout.tokenAccounts;\n  }\n\n  update(accountInfoMap: AccountInfoMap) {\n    let tokenAccountInfos = mapAddressToAccountInfos(accountInfoMap, this.getAccountsForUpdate());\n\n    this.tokenAccounts = tokenAccountInfos\n      .map((info) => deserializeAccount(info.data))\n      .filter((x): x is TokenAccountInfo => x !== null);\n  }\n\n  getQuote({ sourceMint, destinationMint, amount }: QuoteParams): Quote {\n    if (this.tokenAccounts.length === 0) {\n      throw new Error('Unable to fetch accounts for specified tokens.');\n    }\n\n    const inputIndex = this.tokenAccounts.findIndex((tokenAccount) => tokenAccount.mint.equals(sourceMint));\n    const outputIndex = this.tokenAccounts.findIndex((tokenAccount) => tokenAccount.mint.equals(destinationMint));\n    const result = this.calculator.exchange(tokenAccountsToJSBIs(this.tokenAccounts), amount, inputIndex, outputIndex);\n\n    const feePct = this.swapLayout.feeNumerator / FEE_DENOMINATOR;\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: result.expectedOutputAmount,\n      feeAmount: result.fees,\n      feeMint: destinationMint.toBase58(),\n      feePct: feePct,\n      priceImpactPct: result.priceImpact.toNumber(),\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams): TransactionInstruction[] {\n    return [\n      createMercurialExchangeInstruction({\n        swapLayout: this.swapLayout,\n        ...swapParams,\n        inAmount: swapParams.amount,\n        minimumOutAmount: swapParams.otherAmountThreshold,\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return this.params.tokenMints.map((tokenMint) => new PublicKey(tokenMint));\n  }\n}\n","import { Fraction, TokenSwapConstantProduct } from '@jup-ag/math';\nimport { AccountInfo, Connection, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport JSBI from 'jsbi';\nimport { deserializeAccount } from '@mercurial-finance/optimist';\nimport {\n  AccountInfoMap,\n  Amm,\n  mapAddressToAccountInfos,\n  Quote,\n  QuoteParams,\n  tokenAccountsToJSBIs,\n  SwapParams,\n} from '../amm';\nimport { createCropperSwapInstruction } from '../jupiterInstruction';\n\nimport { AccountInfo as TokenAccountInfo } from '@solana/spl-token';\nimport {\n  accountInfoToCropperPoolState,\n  CropperPoolState,\n  stateAccountInfoToCropperState,\n  CROPPER_STATE_ADDRESS,\n} from './swapLayout';\nimport Decimal from 'decimal.js';\n\ninterface CropperParams {\n  tokenAFeeAccount: string;\n  tokenBFeeAccount: string;\n  returnFeeNumerator: number;\n  fixedFeeNumerator: number;\n  feeDenominator: number;\n}\n\ninterface CropperParamsWithPublicKey extends Omit<CropperParams, 'tokenAFeeAccount' | 'tokenBFeeAccount'> {\n  tokenAFeeAccount: PublicKey;\n  tokenBFeeAccount: PublicKey;\n}\n\nexport class CropperAmm implements Amm {\n  id: string;\n  label = 'Cropper' as const;\n  shouldPrefetch = false;\n  exactOutputSupported = false;\n\n  poolState: CropperPoolState;\n  private tokenAccounts: TokenAccountInfo[] = [];\n  private calculator: TokenSwapConstantProduct;\n  private feePct: Decimal;\n  private params: CropperParamsWithPublicKey;\n\n  // Hardcoded because no where to query this\n  static async getStateFromStateAccount(connection: Connection) {\n    const accountInfo = await connection.getAccountInfo(CROPPER_STATE_ADDRESS);\n\n    if (!accountInfo) {\n      throw new Error('State account not found');\n    }\n\n    return stateAccountInfoToCropperState(accountInfo);\n  }\n\n  static decodePoolState = accountInfoToCropperPoolState;\n\n  constructor(address: PublicKey, accountInfo: AccountInfo<Buffer>, params: CropperParams) {\n    this.id = address.toBase58();\n    this.poolState = accountInfoToCropperPoolState(address, accountInfo);\n\n    this.params = {\n      ...params,\n      tokenAFeeAccount: new PublicKey(params.tokenAFeeAccount),\n      tokenBFeeAccount: new PublicKey(params.tokenBFeeAccount),\n    };\n\n    this.feePct = new Decimal(this.params.fixedFeeNumerator)\n      .div(this.params.feeDenominator)\n      .add(new Decimal(this.params.returnFeeNumerator).div(this.params.feeDenominator));\n\n    this.calculator = new TokenSwapConstantProduct(\n      new Fraction(JSBI.BigInt(this.params.fixedFeeNumerator), JSBI.BigInt(this.params.feeDenominator)),\n      new Fraction(JSBI.BigInt(this.params.returnFeeNumerator), JSBI.BigInt(this.params.feeDenominator)),\n    );\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [this.poolState.tokenAAccount, this.poolState.tokenBAccount];\n  }\n\n  update(accountInfoMap: AccountInfoMap): void {\n    const tokenAccountInfos = mapAddressToAccountInfos(accountInfoMap, this.getAccountsForUpdate());\n\n    this.tokenAccounts = tokenAccountInfos.map((info) => {\n      const tokenAccount = deserializeAccount(info.data);\n      if (!tokenAccount) {\n        throw new Error('Invalid token account');\n      }\n      return tokenAccount;\n    });\n  }\n\n  getQuote({ sourceMint, amount }: QuoteParams): Quote {\n    if (this.tokenAccounts.length === 0) {\n      throw new Error('Unable to fetch accounts for specified tokens.');\n    }\n\n    const outputIndex = this.tokenAccounts[0].mint.equals(sourceMint) ? 1 : 0;\n    const result = this.calculator.exchange(tokenAccountsToJSBIs(this.tokenAccounts), amount, outputIndex);\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: result.expectedOutputAmount,\n      feeAmount: result.fees,\n      feeMint: sourceMint.toBase58(),\n      feePct: this.feePct.toNumber(),\n      priceImpactPct: result.priceImpact.toNumber(),\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams): TransactionInstruction[] {\n    const feeAccount = swapParams.sourceMint.equals(this.poolState.mintA)\n      ? this.params.tokenAFeeAccount\n      : this.params.tokenBFeeAccount;\n\n    return [\n      createCropperSwapInstruction({\n        poolState: this.poolState,\n        feeAccount,\n        ...swapParams,\n        inAmount: swapParams.amount,\n        minimumOutAmount: swapParams.otherAmountThreshold,\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.poolState.mintA, this.poolState.mintB];\n  }\n}\n","import { TokenSwapAccountLayout } from '@jup-ag/crema-sdk';\nimport { AccountInfo, PublicKey } from '@solana/web3.js';\nimport Decimal from 'decimal.js';\nimport { createProgramAddressSyncUnsafe } from '../../utils/pda';\n\nexport interface CremaPoolState {\n  programId: PublicKey;\n  authority: PublicKey;\n  version: number;\n  isInitialized: boolean;\n  nonce: number;\n  ammId: PublicKey;\n  tokenProgramId: PublicKey;\n  tokenAAccount: PublicKey;\n  tokenBAccount: PublicKey;\n  ticksKey: PublicKey;\n  mintA: PublicKey;\n  mintB: PublicKey;\n  fee: Decimal;\n  currentSqrtPrice: Decimal;\n  currentLiquity: Decimal;\n}\n\nexport const accountInfoToCremaPoolState = (address: PublicKey, accountInfo: AccountInfo<Buffer>): CremaPoolState => {\n  const programId = accountInfo.owner;\n\n  const decoded = TokenSwapAccountLayout.decode(accountInfo.data);\n  const authority = createProgramAddressSyncUnsafe([address.toBuffer(), Buffer.from([decoded.nonce])], programId);\n\n  return {\n    programId,\n    authority,\n    version: decoded.version,\n    isInitialized: Boolean(decoded.isInitialized),\n    nonce: decoded.nonce,\n    ammId: address,\n    tokenProgramId: decoded.tokenProgramId,\n    tokenAAccount: decoded.swapTokenA,\n    tokenBAccount: decoded.swapTokenB,\n    ticksKey: decoded.ticksKey,\n    mintA: decoded.tokenAMint,\n    mintB: decoded.tokenBMint,\n    fee: decoded.fee,\n    currentSqrtPrice: decoded.currentSqrtPrice,\n    currentLiquity: decoded.currentLiquity,\n  };\n};\n","import { AccountInfoMap, Amm, mapAddressToAccountInfos, Quote, QuoteParams, SwapParams } from '../amm';\nimport { AccountInfo, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { accountInfoToCremaPoolState, CremaPoolState } from './swapLayout';\nimport { createCremaSwapInstruction } from '../jupiterInstruction';\nimport { calculateSwapA2B, calculateSwapB2A, parseTicksAccount, Tick } from '@jup-ag/crema-sdk';\nimport Decimal from 'decimal.js';\nimport { ZERO } from '@jup-ag/math';\nimport JSBI from 'jsbi';\n\nexport class CremaAmm implements Amm {\n  id: string;\n  label = 'Crema';\n  shouldPrefetch = false;\n  exactOutputSupported = false;\n\n  private ticks: Tick[] | undefined;\n  private poolState: CremaPoolState;\n\n  constructor(address: PublicKey, accountInfo: AccountInfo<Buffer>) {\n    this.poolState = accountInfoToCremaPoolState(address, accountInfo);\n    this.id = address.toBase58();\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [this.poolState.ammId, this.poolState.ticksKey];\n  }\n\n  update(accountInfoMap: AccountInfoMap): void {\n    const [tokenSwapAccountInfo, ticksAccountInfo] = mapAddressToAccountInfos(\n      accountInfoMap,\n      this.getAccountsForUpdate(),\n    );\n\n    this.poolState = accountInfoToCremaPoolState(this.poolState.ammId, tokenSwapAccountInfo);\n\n    const ticksInfo = parseTicksAccount(this.poolState.ticksKey, ticksAccountInfo);\n    if (!ticksInfo) throw new Error(`Ticks account invalid: ${this.poolState.ticksKey.toBase58()}`);\n    this.ticks = ticksInfo.data.ticks;\n  }\n\n  getQuote({ sourceMint, amount }: QuoteParams): Quote {\n    if (!this.ticks) {\n      throw new Error('Unable to fetch accounts for ticks.');\n    }\n\n    // Crema SDK doesn't support 0 amount input\n    if (JSBI.equal(amount, ZERO)) {\n      return {\n        notEnoughLiquidity: false,\n        inAmount: amount,\n        outAmount: ZERO,\n        feeAmount: ZERO,\n        feeMint: sourceMint.toBase58(),\n        feePct: this.poolState.fee.toNumber(),\n        priceImpactPct: 0,\n      };\n    }\n\n    const result = this.poolState.mintA.equals(sourceMint)\n      ? this.preSwapA(new Decimal(amount.toString()))\n      : this.preSwapB(new Decimal(amount.toString()));\n\n    if (result.revert) {\n      throw new Error('Crema error: insufficient liquidity');\n    }\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: JSBI.BigInt(result.amountOut.toString()),\n      feeAmount: JSBI.BigInt(result.feeUsed.toString()),\n      feeMint: sourceMint.toBase58(),\n      feePct: this.poolState.fee.toNumber(),\n      priceImpactPct: result.impact.toNumber(),\n    };\n  }\n\n  preSwapA(amountIn: Decimal): {\n    amountOut: Decimal;\n    amountUsed: Decimal;\n    feeUsed: Decimal;\n    afterPrice: Decimal;\n    afterLiquity: Decimal;\n    impact: Decimal;\n    revert: boolean;\n  } {\n    if (!this.ticks) {\n      throw new Error('Unable to fetch accounts for ticks.');\n    }\n\n    const result = calculateSwapA2B(\n      this.ticks,\n      this.poolState.currentSqrtPrice,\n      this.poolState.fee,\n      this.poolState.currentLiquity,\n      amountIn,\n    );\n\n    const currentPriceA = this.poolState.currentSqrtPrice.pow(2);\n    const transactionPriceA = result.amountOut.div(result.amountUsed);\n    const impact = transactionPriceA.sub(currentPriceA).div(currentPriceA).abs();\n    const revert = result.amountUsed.lessThan(amountIn);\n\n    return {\n      ...result,\n      impact,\n      revert,\n    };\n  }\n\n  preSwapB(amountIn: Decimal): {\n    amountOut: Decimal;\n    amountUsed: Decimal;\n    feeUsed: Decimal;\n    afterPrice: Decimal;\n    afterLiquity: Decimal;\n    impact: Decimal;\n    revert: boolean;\n  } {\n    if (!this.ticks) {\n      throw new Error('Unable to fetch accounts for ticks.');\n    }\n\n    const result = calculateSwapB2A(\n      this.ticks,\n      this.poolState.currentSqrtPrice,\n      this.poolState.fee,\n      this.poolState.currentLiquity,\n      amountIn,\n    );\n\n    const currentPriceA = this.poolState.currentSqrtPrice.pow(2);\n    const currentPriceB = new Decimal(1).div(currentPriceA);\n    const transactionPriceB = result.amountOut.div(result.amountUsed);\n    const impact = transactionPriceB.sub(currentPriceB).div(currentPriceB).abs();\n    const revert = result.amountUsed.lessThan(amountIn);\n\n    return {\n      ...result,\n      impact,\n      revert,\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams): TransactionInstruction[] {\n    return [\n      createCremaSwapInstruction({\n        poolState: this.poolState,\n        ...swapParams,\n        inAmount: swapParams.amount,\n        minimumOutAmount: swapParams.otherAmountThreshold,\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.poolState.mintA, this.poolState.mintB];\n  }\n}\n","import { struct, u8, Layout, blob } from '@solana/buffer-layout';\nimport { PublicKey, AccountInfo } from '@solana/web3.js';\nimport { u64 } from '@solana/spl-token';\nimport { publicKey, uint64 } from '../../utils/layout';\n\ninterface SenchaSwapLayout {\n  discriminator: any;\n  factory: PublicKey;\n  bump: number;\n  index: u64;\n  admin: PublicKey;\n  token0Reserves: PublicKey;\n  token0Mint: PublicKey;\n  token0Fees: PublicKey;\n  token1Reserves: PublicKey;\n  token1Mint: PublicKey;\n  token1Fees: PublicKey;\n  isPaused: number;\n  poolMint: PublicKey;\n  tradeFeeKbps: u64;\n  withdrawFeeKbps: u64;\n  adminTradeFeeKbps: u64;\n  adminWithdrawFeeKbps: u64;\n}\n\nexport const SenchaSwapLayout = struct<SenchaSwapLayout>([\n  blob(8, 'discriminator'),\n  publicKey('factory'),\n  u8('bump'),\n  uint64('index'),\n  publicKey('admin'),\n  publicKey('token0Reserves'),\n  publicKey('token0Mint'),\n  publicKey('token0Fees'),\n  publicKey('token1Reserves'),\n  publicKey('token1Mint'),\n  publicKey('token1Fees'),\n  u8('isPaused'),\n  publicKey('poolMint'),\n  uint64('tradeFeeKbps'),\n  uint64('withdrawFeeKbps'),\n  uint64('adminTradeFeeKbps'),\n  uint64('adminWithdrawFeeKbps'),\n]);\n\nexport interface SenchaPoolState {\n  programId: PublicKey;\n  isPaused: boolean;\n  bump: number;\n  ammId: PublicKey;\n  token0Reserves: PublicKey;\n  token1Reserves: PublicKey;\n  token0Mint: PublicKey;\n  token1Mint: PublicKey;\n  token0Fees: PublicKey;\n  token1Fees: PublicKey;\n  poolMint: PublicKey;\n  tradeFeeKbps: number;\n}\n\nexport const accountInfoToSenchaPoolState = (address: PublicKey, accountInfo: AccountInfo<Buffer>): SenchaPoolState => {\n  const programId = accountInfo.owner;\n  const decoded = SenchaSwapLayout.decode(accountInfo.data);\n\n  return {\n    programId,\n    isPaused: Boolean(decoded.isPaused),\n    bump: decoded.bump,\n    ammId: address,\n    token0Reserves: decoded.token0Reserves,\n    token1Reserves: decoded.token1Reserves,\n    token0Mint: decoded.token0Mint,\n    token1Mint: decoded.token1Mint,\n    token0Fees: decoded.token0Fees,\n    token1Fees: decoded.token1Fees,\n    poolMint: decoded.poolMint,\n    tradeFeeKbps: decoded.tradeFeeKbps.toNumber(),\n  };\n};\n","import { AccountInfo, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport {\n  AccountInfoMap,\n  Amm,\n  mapAddressToAccountInfos,\n  Quote,\n  QuoteParams,\n  tokenAccountsToJSBIs,\n  SwapParams,\n} from '../amm';\nimport { accountInfoToSenchaPoolState, SenchaPoolState } from './swapLayout';\nimport { AccountInfo as TokenAccountInfo } from '@solana/spl-token';\nimport { deserializeAccount } from '@mercurial-finance/optimist';\nimport { createSenchaSwapInstruction } from '../jupiterInstruction';\nimport { Fraction, TokenSwapConstantProduct, ZERO } from '@jup-ag/math';\nimport JSBI from 'jsbi';\n\nexport class SenchaAmm implements Amm {\n  id: string;\n  label = 'Sencha' as const;\n  shouldPrefetch = false;\n  exactOutputSupported = false;\n\n  poolState: SenchaPoolState;\n  private calculator: TokenSwapConstantProduct;\n  private tokenAccounts: TokenAccountInfo[] = [];\n\n  constructor(address: PublicKey, accountInfo: AccountInfo<Buffer>) {\n    this.id = address.toBase58();\n    this.poolState = accountInfoToSenchaPoolState(address, accountInfo);\n    this.calculator = new TokenSwapConstantProduct(\n      new Fraction(\n        JSBI.BigInt(this.poolState.tradeFeeKbps),\n        JSBI.BigInt(10000000), // 100% = 10000000kbps\n      ),\n      new Fraction(ZERO, ZERO),\n      false,\n    );\n  }\n\n  get isPaused() {\n    return this.poolState.isPaused;\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [this.poolState.token0Reserves, this.poolState.token1Reserves];\n  }\n\n  update(accountInfoMap: AccountInfoMap): void {\n    const tokenAccountInfos = mapAddressToAccountInfos(accountInfoMap, this.getAccountsForUpdate());\n\n    this.tokenAccounts = tokenAccountInfos.map((info) => {\n      const tokenAccount = deserializeAccount(info.data);\n      if (!tokenAccount) {\n        throw new Error('Invalid token account');\n      }\n      return tokenAccount;\n    });\n  }\n\n  getQuote({ sourceMint, amount }: QuoteParams): Quote {\n    if (this.tokenAccounts.length === 0) {\n      throw new Error('Unable to fetch accounts for specified tokens.');\n    }\n\n    const outputIndex = this.tokenAccounts[0].mint.equals(sourceMint) ? 1 : 0;\n    let result = this.calculator.exchange(tokenAccountsToJSBIs(this.tokenAccounts), amount, outputIndex);\n\n    let feePct = this.poolState.tradeFeeKbps / 10000000; // 100% kbps\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: result.expectedOutputAmount,\n      feeAmount: result.fees,\n      feeMint: sourceMint.toBase58(),\n      feePct,\n      priceImpactPct: result.priceImpact.toNumber(),\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams): TransactionInstruction[] {\n    return [\n      createSenchaSwapInstruction({\n        poolState: this.poolState,\n        ...swapParams,\n        inAmount: swapParams.amount,\n        minimumOutAmount: swapParams.otherAmountThreshold,\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.poolState.token0Mint, this.poolState.token1Mint];\n  }\n}\n","import { AccountInfo, PublicKey } from '@solana/web3.js';\nimport { findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { LIFINITY_AMM_LAYOUT, IPoolInfo } from '@jup-ag/lifinity-sdk';\n\nexport interface LifinitySwapLayoutState {\n  programId: PublicKey;\n  authority: PublicKey;\n  amm: PublicKey;\n  tokenAMint: PublicKey;\n  tokenBMint: PublicKey;\n  poolMint: PublicKey;\n  feeAccount: PublicKey;\n  pythAccount: PublicKey;\n  pythPcAccount: PublicKey;\n  configAccount: PublicKey;\n  poolCoinTokenAccount: PublicKey;\n  poolCoinMint: PublicKey;\n  poolPcTokenAccount: PublicKey;\n  poolPcMint: PublicKey;\n}\n\nexport const swapStateToPoolInfo = (state: LifinitySwapLayoutState): IPoolInfo => {\n  return {\n    amm: state.amm.toBase58(),\n    configAccount: state.configAccount.toBase58(),\n    feeAccount: state.feeAccount.toBase58(),\n    pythAccount: state.pythAccount.toBase58(),\n    pythPcAccount: state.pythPcAccount.toBase58(),\n    poolCoinMint: state.poolCoinMint.toBase58(),\n    poolCoinTokenAccount: state.poolCoinTokenAccount.toBase58(),\n    poolMint: state.poolMint.toBase58(),\n    poolPcTokenAccount: state.poolPcTokenAccount.toBase58(),\n    poolPcMint: state.poolPcMint.toBase58(),\n    // We don't use decimals at the moment, so default to 0, if we need to use it later, we can add it from API\n    poolCoinDecimal: 0,\n    poolPcDecimal: 0,\n    poolMintDecimal: 0,\n    pythBaseDecimal: 0,\n  };\n};\n\nexport const accountInfoLifinitySwapLayout = (\n  address: PublicKey,\n  accountInfo: AccountInfo<Buffer>,\n): LifinitySwapLayoutState => {\n  const programId = accountInfo.owner;\n  const decoded = LIFINITY_AMM_LAYOUT.decode(accountInfo.data);\n  const [authority] = findProgramAddressSync([address.toBuffer()], programId);\n\n  return {\n    programId,\n    authority,\n    amm: address,\n    tokenAMint: decoded.tokenAMint,\n    tokenBMint: decoded.tokenBMint,\n    poolMint: decoded.poolMint,\n    feeAccount: decoded.poolFeeAccount,\n    pythAccount: decoded.pythAccount,\n    pythPcAccount: decoded.pythPcAccount,\n    configAccount: decoded.configAccount,\n    poolCoinTokenAccount: decoded.tokenAAccount,\n    poolCoinMint: decoded.tokenAMint,\n    poolPcTokenAccount: decoded.tokenBAccount,\n    poolPcMint: decoded.tokenBMint,\n  };\n};\n","import { getCurveAmount, getParsedData, IAmmData, ICurveAmount, IPoolInfo, TradeDirection } from '@jup-ag/lifinity-sdk';\nimport { AccountInfo, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { AccountInfoMap, Amm, Quote, QuoteParams, SwapParams } from '../amm';\nimport { accountInfoLifinitySwapLayout, LifinitySwapLayoutState, swapStateToPoolInfo } from './swapLayout';\nimport { createLifinitySwapInstruction } from '../jupiterInstruction';\nimport Decimal from 'decimal.js';\nimport JSBI from 'jsbi';\n\nexport class LifinityAmm implements Amm {\n  id: string;\n  label = 'Lifinity' as const;\n  shouldPrefetch = false;\n  exactOutputSupported = false;\n\n  private swapState: LifinitySwapLayoutState;\n  private poolInfo: IPoolInfo;\n  private accountInfos: Array<{ publicKey: PublicKey; account: AccountInfo<Buffer> }> = [];\n\n  constructor(address: PublicKey, private ammAccountInfo: AccountInfo<Buffer>) {\n    this.id = address.toBase58();\n    this.swapState = accountInfoLifinitySwapLayout(address, ammAccountInfo);\n    this.poolInfo = swapStateToPoolInfo(this.swapState);\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [\n      this.swapState.poolCoinTokenAccount,\n      this.swapState.poolPcTokenAccount,\n      this.swapState.configAccount,\n      this.swapState.pythAccount,\n      this.swapState.pythPcAccount,\n    ];\n  }\n\n  update(accountInfoMap: AccountInfoMap): void {\n    this.getAccountsForUpdate().forEach((publicKey, idx) => {\n      const account = accountInfoMap.get(publicKey.toBase58());\n      if (account) {\n        this.accountInfos[idx] = {\n          publicKey,\n          account,\n        };\n      }\n    });\n  }\n\n  getQuote({ sourceMint, amount }: QuoteParams): Quote {\n    if (this.accountInfos.length !== this.getAccountsForUpdate().length) {\n      throw new Error('Accounts not loaded');\n    }\n\n    const tradeDirection = this.swapState.poolCoinMint.equals(sourceMint) ? TradeDirection.AtoB : TradeDirection.BtoA;\n    const { amm, pyth, pythPc, fees, coinBalance, pcBalance, config }: IAmmData = getParsedData(\n      [{ publicKey: this.swapState.amm, account: this.ammAccountInfo }, ...this.accountInfos],\n      this.poolInfo,\n    );\n\n    if (\n      !pyth.status.equals(1) ||\n      // pythPc can be undefined from the lifinity SDK\n      (pythPc && !pythPc.status.equals(1))\n    ) {\n      throw new Error('Pyth accounts are outdated');\n    }\n\n    const amountIn = new Decimal(amount.toString());\n    const result: ICurveAmount = getCurveAmount(\n      amountIn,\n      pyth.publishSlot.toNumber(), // Use pyth publish slot to not throw error\n      amm,\n      fees,\n      coinBalance,\n      pcBalance,\n      config,\n      pyth,\n      pythPc,\n      tradeDirection,\n    );\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: JSBI.BigInt(result.amountSwapped.toString()),\n      feeAmount: JSBI.BigInt(result.fee.ceil().toString()),\n      feeMint: sourceMint.toBase58(),\n      feePct: result.feePercent.toNumber(),\n      priceImpactPct: result.priceImpact.toNumber(),\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams): TransactionInstruction[] {\n    return [\n      createLifinitySwapInstruction({\n        swapState: this.swapState,\n        ...swapParams,\n        inAmount: swapParams.amount,\n        minimumOutAmount: swapParams.otherAmountThreshold,\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.swapState.poolCoinMint, this.swapState.poolPcMint];\n  }\n}\n","import { AccountInfo, PublicKey } from '@solana/web3.js';\nimport Decimal from 'decimal.js';\nimport { AccountInfoMap, Amm, SwapMode, Quote, QuoteParams, SwapParams } from '../amm';\nimport { createWhirlpoolSwapInstruction, createWhirlpoolSwapExactOutputInstruction } from '../jupiterInstruction';\nimport { findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { WHIRLPOOL_PROGRAM_ID } from '../../constants';\nimport {\n  parseWhirlpool,\n  parseTickArray,\n  WhirlpoolData,\n  getSwapQuote,\n  getTickArrayPks,\n  TickArrayData,\n  getTickArrayPublicKeysForSwap,\n  getDefaultSqrtPriceLimit,\n} from '@jup-ag/whirlpool-sdk';\nimport BN from 'bn.js';\nimport JSBI from 'jsbi';\n\nconst FEE_RATE_MUL_VALUE = 1_000_000;\n\nfunction fromX64(num: BN): Decimal {\n  return new Decimal(num.toString()).mul(Decimal.pow(2, -64));\n}\n\nfunction parseWhirlpoolSafe(address: PublicKey, data: Buffer) {\n  const whirlpoolData = parseWhirlpool(data);\n  if (!whirlpoolData) throw new Error(`Failed to parse whirlpool ${address.toBase58()}`);\n  return whirlpoolData;\n}\n\nexport class WhirlpoolAmm implements Amm {\n  id: string;\n  label = 'Orca (Whirlpools)';\n  shouldPrefetch = true;\n  exactOutputSupported = true;\n\n  private whirlpoolData: WhirlpoolData;\n  private tickArrays: Map<string, TickArrayData> = new Map();\n  private tickPks: PublicKey[];\n  private oracle: PublicKey;\n  private feePct: Decimal;\n\n  constructor(private address: PublicKey, whirlpoolAccountInfo: AccountInfo<Buffer>) {\n    this.id = address.toBase58();\n    this.whirlpoolData = parseWhirlpoolSafe(address, whirlpoolAccountInfo.data);\n\n    this.oracle = findProgramAddressSync([Buffer.from('oracle'), address.toBuffer()], WHIRLPOOL_PROGRAM_ID)[0];\n    this.feePct = new Decimal(this.whirlpoolData.feeRate).div(FEE_RATE_MUL_VALUE);\n    this.tickPks = getTickArrayPks(address, this.whirlpoolData);\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    // The tickCurrentIndex is technically behind here, belonging to the last refresh\n    return [this.address, ...this.tickPks];\n  }\n\n  update(accountInfoMap: AccountInfoMap): void {\n    const whirlpoolAccountInfo = accountInfoMap.get(this.address.toBase58());\n    if (!whirlpoolAccountInfo) throw new Error(`Missing ${this.address.toBase58()}`);\n    this.whirlpoolData = parseWhirlpoolSafe(this.address, whirlpoolAccountInfo.data);\n    this.tickPks = getTickArrayPks(this.address, this.whirlpoolData);\n\n    this.tickArrays.clear();\n    for (const tickArrayPk of this.tickPks) {\n      const tickArrayAddress = tickArrayPk.toBase58();\n      const tickArrayAccountInfo = accountInfoMap.get(tickArrayAddress);\n      if (!tickArrayAccountInfo) {\n        // This can happen if we reach an uninitialized tick, and it is likely to occur right now\n        continue;\n      }\n      const tickArray = parseTickArray(tickArrayAccountInfo.data);\n      if (!tickArray) throw new Error(`Could not parse tick array ${tickArrayAddress}`);\n      this.tickArrays.set(tickArrayAddress, tickArray);\n    }\n  }\n\n  getQuote({ sourceMint, destinationMint, amount, swapMode }: QuoteParams): Quote {\n    const swapQuote = getSwapQuote({\n      poolAddress: this.address,\n      whirlpool: this.whirlpoolData,\n      tickArrays: this.tickArrays,\n      tokenMint: swapMode === SwapMode.ExactIn ? sourceMint : destinationMint,\n      tokenAmount: new BN(amount.toString()),\n      isInput: swapMode === SwapMode.ExactIn,\n    });\n\n    const inAmount = JSBI.BigInt(swapQuote.amountIn.toString());\n    const outAmount = JSBI.BigInt(swapQuote.amountOut.toString());\n    const feeAmount = JSBI.BigInt(this.feePct.mul(inAmount.toString()).floor().toString());\n    const quotePrice = swapQuote.aToB\n      ? new Decimal(swapQuote.amountOut.toString()).div(swapQuote.amountIn.toString())\n      : new Decimal(swapQuote.amountIn.toString()).div(swapQuote.amountOut.toString());\n\n    const currentPrice = fromX64(this.whirlpoolData.sqrtPrice).pow(2);\n    const priceImpactPct = currentPrice.minus(quotePrice).div(currentPrice).abs().toNumber();\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount,\n      outAmount,\n      feeAmount,\n      feeMint: sourceMint.toBase58(),\n      feePct: this.feePct.toNumber(),\n      priceImpactPct: Number(priceImpactPct),\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams) {\n    const aToB = swapParams.sourceMint.equals(this.whirlpoolData.tokenMintA);\n    const targetSqrtPrice = getDefaultSqrtPriceLimit(aToB);\n    const [tickArray0, tickArray1, tickArray2] = getTickArrayPublicKeysForSwap(\n      this.whirlpoolData.tickCurrentIndex,\n      targetSqrtPrice,\n      this.whirlpoolData.tickSpacing,\n      this.address,\n      this.tickArrays,\n      WHIRLPOOL_PROGRAM_ID,\n      aToB,\n    );\n\n    const ix =\n      swapParams.swapMode === SwapMode.ExactIn\n        ? createWhirlpoolSwapInstruction({\n            additionalArgs: {\n              aToB,\n              whirlpool: this.address,\n              tickArray0,\n              tickArray1,\n              tickArray2,\n              oracle: this.oracle,\n              ...this.whirlpoolData,\n            },\n            ...swapParams,\n            inAmount: swapParams.amount,\n            minimumOutAmount: swapParams.otherAmountThreshold,\n          })\n        : (() => {\n            if (swapParams.amount === null) throw Error('amount cannot be null with exact output');\n\n            return createWhirlpoolSwapExactOutputInstruction({\n              additionalArgs: {\n                aToB,\n                whirlpool: this.address,\n                tickArray0,\n                tickArray1,\n                tickArray2,\n                oracle: this.oracle,\n                ...this.whirlpoolData,\n              },\n              ...swapParams,\n              outAmount: swapParams.amount,\n              maximumInAmount: swapParams.otherAmountThreshold,\n            });\n          })();\n\n    return [ix];\n  }\n\n  get reserveTokenMints() {\n    return [this.whirlpoolData.tokenMintA, this.whirlpoolData.tokenMintB];\n  }\n}\n","// TODO: Move this to SDK rather than being maintained by us\nimport {\n  CyclosCore,\n  buildTick,\n  generateBitmapWord,\n  nextInitializedBit,\n  tickPosition,\n  TickDataProvider,\n  PoolVars,\n  TICK_SEED,\n  u32ToSeed,\n  BITMAP_SEED,\n  TickMath,\n  u16ToSeed,\n} from '@jup-ag/cykura-sdk';\nimport * as anchor from '@project-serum/anchor';\nimport { BN, IdlAccounts } from '@project-serum/anchor';\nimport { findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { AccountInfo, PublicKey } from '@solana/web3.js';\nimport JSBI from 'jsbi';\n\nexport type TickBitmapState = IdlAccounts<CyclosCore>['tickBitmapState'];\nexport type TickState = IdlAccounts<CyclosCore>['tickState'];\n\nexport class SolanaTickDataProvider implements TickDataProvider {\n  program: anchor.Program<CyclosCore>;\n  pool: PoolVars;\n\n  bitmapCache: Map<\n    number,\n    {\n      address: PublicKey;\n      word: anchor.BN;\n    }\n  >;\n\n  tickCache: Map<\n    number,\n    {\n      address: PublicKey;\n      liquidityNet: JSBI;\n    }\n  >;\n\n  accountsToFetch: { bitmaps: PublicKey[]; ticks: PublicKey[] } = { bitmaps: [], ticks: [] };\n\n  constructor(program: anchor.Program<CyclosCore>, pool: PoolVars) {\n    this.program = program;\n    this.pool = pool;\n    this.bitmapCache = new Map();\n    this.tickCache = new Map();\n  }\n\n  /**\n   * Caches ticks and bitmap accounts near the current price\n   * @param tickCurrent The current pool tick\n   * @param tickSpacing The pool tick spacing\n   */\n  async eagerLoadCache(tickCurrent: number, tickSpacing: number) {\n    // fetch 10 bitmaps on each side in a single fetch. Find active ticks and read them together\n    const compressed = JSBI.toNumber(JSBI.divide(JSBI.BigInt(tickCurrent), JSBI.BigInt(tickSpacing)));\n    const { wordPos } = tickPosition(compressed);\n\n    try {\n      const bitmapsToFetch = [];\n      const { wordPos: WORD_POS_MIN } = tickPosition(Math.floor(TickMath.MIN_TICK / tickSpacing));\n      const { wordPos: WORD_POS_MAX } = tickPosition(Math.floor(TickMath.MAX_TICK / tickSpacing));\n      const minWord = Math.max(wordPos - 10, WORD_POS_MIN);\n      const maxWord = Math.min(wordPos + 10, WORD_POS_MAX);\n      for (let i = minWord; i < maxWord; i++) {\n        bitmapsToFetch.push(this.getBitmapAddressSync(i));\n      }\n\n      const fetchedBitmaps = (await this.program.account.tickBitmapState.fetchMultiple(\n        bitmapsToFetch,\n      )) as (TickBitmapState | null)[];\n\n      const tickAddresses = [];\n      for (let i = 0; i < maxWord - minWord; i++) {\n        const currentWordPos = i + minWord;\n        const wordArray = fetchedBitmaps[i]?.word;\n        const word = wordArray ? generateBitmapWord(wordArray) : new BN(0);\n        this.bitmapCache.set(currentWordPos, {\n          address: bitmapsToFetch[i],\n          word,\n        });\n        if (word && !word.eqn(0)) {\n          for (let j = 0; j < 256; j++) {\n            if (word.shrn(j).and(new BN(1)).eqn(1)) {\n              const tick = ((currentWordPos << 8) + j) * tickSpacing;\n              const tickAddress = this.getTickAddressSync(tick);\n              tickAddresses.push(tickAddress);\n            }\n          }\n        }\n      }\n\n      const fetchedTicks = (await this.program.account.tickState.fetchMultiple(tickAddresses)) as (TickState | null)[];\n      for (const i in tickAddresses) {\n        const fetchedTick = fetchedTicks[i];\n        if (!fetchedTick) continue;\n\n        const { tick, liquidityNet } = fetchedTick;\n        this.tickCache.set(tick, {\n          address: tickAddresses[i],\n          liquidityNet: JSBI.BigInt(liquidityNet),\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  /**\n   * Return accounts to cache and returns early if there is insufficient data\n   * @param tickCurrent The current pool tick\n   * @param tickSpacing The pool tick spacing\n   */\n  lazyLoadAccountsToCache(tickCurrent: number, tickSpacing: number): PublicKey[] {\n    // fetch 10 bitmaps on each side in a single fetch. Find active ticks and read them together\n    const compressed = JSBI.toNumber(JSBI.divide(JSBI.BigInt(tickCurrent), JSBI.BigInt(tickSpacing)));\n    const { wordPos } = tickPosition(compressed);\n\n    const bitmapsToFetch: PublicKey[] = [];\n    const bitmaps: ({ address: PublicKey; word: anchor.BN } | undefined)[] = [];\n    const { wordPos: WORD_POS_MIN } = tickPosition(Math.floor(TickMath.MIN_TICK / tickSpacing));\n    const { wordPos: WORD_POS_MAX } = tickPosition(Math.floor(TickMath.MAX_TICK / tickSpacing));\n    const minWord = Math.max(wordPos - 10, WORD_POS_MIN);\n    const maxWord = Math.min(wordPos + 10, WORD_POS_MAX);\n    for (let i = minWord; i < maxWord; i++) {\n      bitmapsToFetch.push(this.getBitmapAddressSync(i));\n      const bitmap = this.bitmapCache.get(i);\n      bitmaps.push(bitmap);\n    }\n\n    const tickAddressesToFetch = [];\n    for (let i = 0; i < maxWord - minWord; i++) {\n      const currentWordPos = i + minWord;\n      // We might not have the bitmap yet in the first iteration\n      const word = bitmaps[i]?.word ?? new BN(0);\n      this.bitmapCache.set(currentWordPos, {\n        address: bitmapsToFetch[i],\n        word,\n      });\n      if (word && !word.eqn(0)) {\n        for (let j = 0; j < 256; j++) {\n          if (word.shrn(j).and(new BN(1)).eqn(1)) {\n            const tick = ((currentWordPos << 8) + j) * tickSpacing;\n            const tickAddress = this.getTickAddressSync(tick);\n            tickAddressesToFetch.push(tickAddress);\n          }\n        }\n      }\n    }\n\n    this.accountsToFetch = { bitmaps: bitmapsToFetch, ticks: tickAddressesToFetch };\n    return [...bitmapsToFetch, ...tickAddressesToFetch];\n  }\n\n  getTick(tick: number): {\n    address: anchor.web3.PublicKey;\n    liquidityNet: JSBI;\n  } {\n    let savedTick = this.tickCache.get(tick);\n    if (!savedTick) {\n      throw new Error('Tick not cached');\n    }\n\n    return {\n      address: savedTick.address,\n      liquidityNet: savedTick.liquidityNet,\n    };\n  }\n\n  async getTickAddress(tick: number): Promise<anchor.web3.PublicKey> {\n    return this.getTickAddressSync(tick);\n  }\n\n  getTickAddressSync(tick: number): anchor.web3.PublicKey {\n    return findProgramAddressSync(\n      [TICK_SEED, this.pool.token0.toBuffer(), this.pool.token1.toBuffer(), u32ToSeed(this.pool.fee), u32ToSeed(tick)],\n      this.program.programId,\n    )[0];\n  }\n\n  async getBitmapAddress(wordPos: number): Promise<anchor.web3.PublicKey> {\n    return this.getBitmapAddressSync(wordPos);\n  }\n\n  getBitmapAddressSync(wordPos: number): anchor.web3.PublicKey {\n    return findProgramAddressSync(\n      [\n        BITMAP_SEED,\n        this.pool.token0.toBuffer(),\n        this.pool.token1.toBuffer(),\n        u32ToSeed(this.pool.fee),\n        u16ToSeed(wordPos),\n      ],\n      this.program.programId,\n    )[0];\n  }\n\n  /**\n   * Fetches the cached bitmap for the word\n   * @param wordPos\n   */\n  getBitmap(wordPos: number): {\n    address: anchor.web3.PublicKey;\n    word: anchor.BN;\n  } {\n    let savedBitmap = this.bitmapCache.get(wordPos);\n    if (!savedBitmap) {\n      throw new Error('Bitmap not cached');\n    }\n\n    return savedBitmap;\n  }\n\n  /**\n   * Finds the next initialized tick in the given word. Fetched bitmaps are saved in a\n   * cache for quicker lookups in future.\n   * @param tick The current tick\n   * @param lte Whether to look for a tick less than or equal to the current one, or a tick greater than or equal to\n   * @param tickSpacing The tick spacing for the pool\n   * @returns\n   */\n  nextInitializedTickWithinOneWord(\n    tick: number,\n    lte: boolean,\n    tickSpacing: number,\n  ): [number, boolean, number, number, PublicKey] {\n    let compressed = JSBI.toNumber(JSBI.divide(JSBI.BigInt(tick), JSBI.BigInt(tickSpacing)));\n    if (tick < 0 && tick % tickSpacing !== 0) {\n      compressed -= 1;\n    }\n    if (!lte) {\n      compressed += 1;\n    }\n\n    const { wordPos, bitPos } = tickPosition(compressed);\n    const cachedBitmap = this.getBitmap(wordPos);\n\n    const { next: nextBit, initialized } = nextInitializedBit(cachedBitmap.word, bitPos, lte);\n    const nextTick = buildTick(wordPos, nextBit, tickSpacing);\n    return [nextTick, initialized, wordPos, bitPos, cachedBitmap.address];\n  }\n\n  // Change this to be a blind decoder rather than decode what we know\n  updateCachedAccountInfos(accountInfoMap: Map<string, AccountInfo<Buffer> | null>) {\n    for (const bitmapAddress of this.accountsToFetch.bitmaps) {\n      const bitmapAccountInfo = accountInfoMap.get(bitmapAddress.toBase58());\n      if (bitmapAccountInfo) {\n        const tickBitmapState = this.program.coder.accounts.decode<TickBitmapState>(\n          'tickBitmapState',\n          bitmapAccountInfo.data,\n        );\n\n        this.bitmapCache.set(tickBitmapState.wordPos, {\n          address: bitmapAddress,\n          word: generateBitmapWord(tickBitmapState.word),\n        });\n      }\n    }\n\n    for (const tickAddress of this.accountsToFetch.ticks) {\n      const tickStateAccountInfo = accountInfoMap.get(tickAddress.toBase58());\n      if (tickStateAccountInfo) {\n        const tickState = this.program.coder.accounts.decode<TickState>('tickState', tickStateAccountInfo.data);\n        this.tickCache.set(tickState.tick, {\n          address: tickAddress,\n          liquidityNet: JSBI.BigInt(tickState.liquidityNet),\n        });\n      }\n    }\n  }\n}\n","import { AccountInfo, AccountMeta, Connection, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport JSBI from 'jsbi';\nimport * as anchor from '@project-serum/anchor';\nimport { AccountInfoMap, Amm, Quote, QuoteParams, SwapParams } from '../amm';\nimport { Pool as CykuraPool, CyclosCore, IDL, OBSERVATION_SEED, u32ToSeed, u16ToSeed } from '@jup-ag/cykura-sdk';\nimport { CurrencyAmount, Token } from '@jup-ag/cykura-sdk-core';\nimport { IdlAccounts, Wallet } from '@project-serum/anchor';\nimport { SolanaTickDataProvider } from './solanaTickDataProvider';\nimport { CYKURA_PROGRAM_ID } from '../../constants';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { createCykuraSwapInstruction } from '../jupiterInstruction';\nimport { toDecimal } from '@jup-ag/math';\n\nexport type PoolState = IdlAccounts<CyclosCore>['poolState'];\n\nconst FEE_DENOMINATOR = JSBI.BigInt(1_000_000);\n\nconst provider = new anchor.AnchorProvider(null as unknown as Connection, null as unknown as Wallet, {\n  skipPreflight: false,\n});\nconst CYCLOS_CORE = new anchor.Program<CyclosCore>(IDL, CYKURA_PROGRAM_ID, provider);\n\nexport class CykuraAmm implements Amm {\n  label = 'Cykura' as const;\n  id: string;\n  shouldPrefetch = true;\n  exactOutputSupported = false;\n\n  private poolState: PoolState;\n  private pool: CykuraPool;\n  private tickDataProvider: SolanaTickDataProvider;\n  private tokens: { token0: Token; token1: Token };\n  public vaults: { vault0: PublicKey; vault1: PublicKey };\n  private feePct: number;\n  private fee: JSBI;\n\n  constructor(private address: PublicKey, accountInfoOrPoolState: AccountInfo<Buffer> | PoolState) {\n    this.id = address.toBase58();\n    let poolState: PoolState;\n    if ('data' in accountInfoOrPoolState) {\n      poolState = CYCLOS_CORE.coder.accounts.decode<PoolState>('poolState', accountInfoOrPoolState.data);\n    } else {\n      poolState = accountInfoOrPoolState;\n    }\n\n    this.poolState = poolState;\n\n    const { token0, token1, fee, sqrtPriceX32, liquidity, tick } = this.poolState;\n\n    this.tickDataProvider = new SolanaTickDataProvider(CYCLOS_CORE, {\n      token0,\n      token1,\n      fee,\n    });\n\n    this.tokens = {\n      token0: new Token(101, token0, 0, '', ''),\n      token1: new Token(101, token1, 0, '', ''),\n    };\n\n    this.pool = new CykuraPool(\n      this.tokens.token0,\n      this.tokens.token1,\n      fee,\n      JSBI.BigInt(sqrtPriceX32.toString()),\n      JSBI.BigInt(liquidity.toString()),\n      tick,\n      this.tickDataProvider,\n    );\n\n    this.vaults = {\n      vault0: findProgramAddressSync(\n        [this.address.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), token0.toBuffer()],\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n      )[0],\n      vault1: findProgramAddressSync(\n        [this.address.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), token1.toBuffer()],\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n      )[0],\n    };\n\n    this.fee = JSBI.BigInt(this.poolState.fee);\n    this.feePct = this.poolState.fee / JSBI.toNumber(FEE_DENOMINATOR);\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [\n      this.address,\n      ...this.tickDataProvider.lazyLoadAccountsToCache(this.pool.tickCurrent, this.pool.tickSpacing),\n    ];\n  }\n\n  update(accountInfoMap: AccountInfoMap) {\n    const poolAccountInfo = accountInfoMap.get(this.address.toBase58());\n    if (!poolAccountInfo) {\n      throw new Error(`Could not find poolAccountInfo ${this.address.toBase58()}`);\n    }\n    this.poolState = CYCLOS_CORE.coder.accounts.decode<PoolState>('poolState', poolAccountInfo.data);\n    const { fee, sqrtPriceX32, liquidity, tick } = this.poolState;\n    this.pool = new CykuraPool(\n      this.tokens.token0,\n      this.tokens.token1,\n      fee,\n      JSBI.BigInt(sqrtPriceX32.toString()),\n      JSBI.BigInt(liquidity.toString()),\n      tick,\n      this.tickDataProvider,\n    );\n\n    this.tickDataProvider.updateCachedAccountInfos(accountInfoMap);\n  }\n\n  getQuote({ sourceMint, amount }: QuoteParams): Quote {\n    const inputToken = sourceMint.equals(this.poolState.token0) ? this.tokens.token0 : this.tokens.token1;\n    const [currentOutAmount, newPool, swapAccountMetas] = this.pool.getOutputAmount(\n      CurrencyAmount.fromRawAmount(inputToken, amount),\n    );\n\n    const priceImpactDecimal = toDecimal(JSBI.subtract(this.pool.sqrtRatioX32, newPool.sqrtRatioX32)).div(\n      this.pool.sqrtRatioX32.toString(),\n    );\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: currentOutAmount.quotient,\n      // Might not be spot on but avoids many conversions\n      feeAmount: JSBI.divide(JSBI.multiply(amount, this.fee), FEE_DENOMINATOR),\n      feeMint: sourceMint.toBase58(),\n      feePct: this.feePct,\n      priceImpactPct: priceImpactDecimal.toNumber(),\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams): TransactionInstruction[] {\n    const [inputVault, outputVault] = swapParams.sourceMint.equals(this.poolState.token0)\n      ? [this.vaults.vault0, this.vaults.vault1]\n      : [this.vaults.vault1, this.vaults.vault0];\n\n    const lastObservationState = findProgramAddressSync(\n      [\n        OBSERVATION_SEED,\n        this.poolState.token0.toBuffer(),\n        this.poolState.token1.toBuffer(),\n        u32ToSeed(this.poolState.fee),\n        u16ToSeed(this.poolState.observationIndex),\n      ],\n      CYKURA_PROGRAM_ID,\n    )[0];\n\n    const inputToken = swapParams.sourceMint.equals(this.poolState.token0) ? this.tokens.token0 : this.tokens.token1;\n\n    const [, , swapAccountMetas] = this.pool.getOutputAmount(\n      CurrencyAmount.fromRawAmount(inputToken, swapParams.inAmount),\n    );\n\n    const nextObservationState = findProgramAddressSync(\n      [\n        OBSERVATION_SEED,\n        this.poolState.token0.toBuffer(),\n        this.poolState.token1.toBuffer(),\n        u32ToSeed(this.poolState.fee),\n        u16ToSeed((this.poolState.observationIndex + 1) % this.poolState.observationCardinalityNext),\n      ],\n      CYKURA_PROGRAM_ID,\n    )[0];\n\n    const additionalArgs = {\n      poolAddress: this.address,\n      inputVault,\n      outputVault,\n      nextObservationState,\n      lastObservationState,\n      swapAccountMetas: swapAccountMetas,\n    };\n    return [\n      createCykuraSwapInstruction({\n        ...swapParams,\n        inAmount: swapParams.amount,\n        minimumOutAmount: swapParams.otherAmountThreshold,\n        additionalArgs,\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.poolState.token0, this.poolState.token1];\n  }\n}\n","import BN from 'bn.js';\n\n/**\n * Compute a linear fee base on liquidity amount.\n * fee(0) = max fee -> fee(x >= target) = min fee\n *\n * @param {number} lpMinFeeBasisPoints\n * @param {number} lpMaxFeeBasisPoints\n * @param {BN} lpLiquidityTarget\n * @param {BN} lamportsAvailable\n * @param {BN} lamportsToObtain\n */\nexport function unstakeNowFeeBp(\n  lpMinFeeBasisPoints: number,\n  lpMaxFeeBasisPoints: number,\n  lpLiquidityTarget: BN,\n  lamportsAvailable: BN,\n  lamportsToObtain: BN,\n): number {\n  // if trying to get more than existing\n  if (lamportsToObtain.gte(lamportsAvailable)) {\n    return lpMaxFeeBasisPoints;\n  }\n  // result after operation\n  const lamportsAfter = lamportsAvailable.sub(lamportsToObtain);\n  // if GTE target => min fee\n  if (lamportsAfter.gte(lpLiquidityTarget)) {\n    return lpMinFeeBasisPoints;\n  } else {\n    const delta = lpMaxFeeBasisPoints - lpMinFeeBasisPoints;\n    return lpMaxFeeBasisPoints - proportionalBN(new BN(delta), lamportsAfter, lpLiquidityTarget).toNumber();\n  }\n}\n\n/**\n * Returns `amount` * `numerator` / `denominator`.\n * BN library we use does not handle fractions, so the value is `floored`\n *\n * @param {BN} amount\n * @param {BN} numerator\n * @param {BN} denominator\n */\nexport function proportionalBN(amount: BN, numerator: BN, denominator: BN): BN {\n  if (denominator.isZero()) {\n    return amount;\n  }\n  return amount.mul(numerator).div(denominator);\n}\n","import { AccountInfo, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { AccountInfoMap, Amm, mapAddressToAccountInfos, Quote, QuoteParams, SwapParams } from '../amm';\nimport {\n  createMarinadeFinanceDepositInstruction,\n  createMarinadeFinanceLiquidUnstakeInstruction,\n} from '../jupiterInstruction';\nimport { deserializeAccount } from '@mercurial-finance/optimist';\nimport { NATIVE_MINT } from '@solana/spl-token';\nimport BN from 'bn.js';\nimport { Idl, Program } from '@project-serum/anchor';\nimport * as marinadeFinanceIdlSchema from './idl/marinade-finance-idl.json';\nimport { MarinadeStateResponse, ProgramDerivedAddressSeed } from './marinade-state.types';\nimport { findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { proportionalBN, unstakeNowFeeBp } from './helpers';\nimport { MARINADE_PROGRAM_ID } from '../../constants';\nimport JSBI from 'jsbi';\n\nexport class MarinadeAmm implements Amm {\n  address: PublicKey;\n  id: string;\n  label = 'Marinade';\n  shouldPrefetch = true; // Pricing is very state dependent and using stale data will lead to a stale quote\n  exactOutputSupported = false;\n\n  marinadeFinanceProgram: Program;\n  marinadeStateResponse: MarinadeStateResponse;\n  liqPoolSolLegPdaAddress: PublicKey;\n  marinadeState: MarinadeState | undefined;\n\n  constructor(address: PublicKey, accountInfo: AccountInfo<Buffer>) {\n    this.id = address.toBase58();\n    this.marinadeFinanceProgram = new Program(marinadeFinanceIdlSchema as Idl, MARINADE_PROGRAM_ID, {} as any);\n    this.marinadeStateResponse = this.marinadeFinanceProgram.coder.accounts.decode('State', accountInfo.data);\n    this.address = address;\n\n    this.liqPoolSolLegPdaAddress = this.findProgramDerivedAddress(ProgramDerivedAddressSeed.LIQ_POOL_SOL_ACCOUNT);\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [this.address, this.liqPoolSolLegPdaAddress, this.marinadeStateResponse.liqPool.msolLeg];\n  }\n\n  update(accountInfoMap: AccountInfoMap) {\n    const [stateAccountInfo, liqPoolSolLegPda, liqPoolMSOLLegAccountInfo] = mapAddressToAccountInfos(\n      accountInfoMap,\n      this.getAccountsForUpdate(),\n    );\n\n    this.marinadeStateResponse = this.marinadeFinanceProgram.coder.accounts.decode('State', stateAccountInfo.data);\n    const liqPoolMSOLLeg = deserializeAccount(liqPoolMSOLLegAccountInfo.data);\n    if (!liqPoolMSOLLeg)\n      throw new Error(\n        `liqPoolMSOLLeg token account cannot be deserialized ${this.marinadeStateResponse.liqPool.msolLeg.toBase58()}`,\n      );\n\n    this.marinadeState = new MarinadeState(\n      this.marinadeStateResponse,\n      new BN(liqPoolSolLegPda.lamports),\n      liqPoolMSOLLeg.amount,\n    );\n  }\n\n  getQuote({ sourceMint, amount }: QuoteParams): Quote {\n    if (!this.marinadeState) throw new Error('Update was not run to create a complete marinadeState');\n\n    const amountBN = new BN(amount.toString());\n    const result = sourceMint.equals(NATIVE_MINT)\n      ? this.marinadeState.depositQuote(amountBN)\n      : this.marinadeState.liquidUnstakeQuote(amountBN);\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: JSBI.BigInt(result.outAmount.toString()),\n      feeAmount: JSBI.BigInt(result.feeAmount.toString()),\n      feeMint: this.marinadeStateResponse.msolMint.toBase58(),\n      feePct: result.feePct,\n      priceImpactPct: 0,\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams): TransactionInstruction[] {\n    return [\n      swapParams.sourceMint.equals(NATIVE_MINT)\n        ? createMarinadeFinanceDepositInstruction({\n            ...swapParams,\n            additionalArgs: {\n              address: this.address,\n              marinadeStateResponse: this.marinadeStateResponse,\n              liqPoolSolLegPda: this.liqPoolSolLegPdaAddress,\n              liqPoolMsolLegAuthority: this.findProgramDerivedAddress(\n                ProgramDerivedAddressSeed.LIQ_POOL_MSOL_AUTHORITY,\n              ),\n              reservePda: this.findProgramDerivedAddress(ProgramDerivedAddressSeed.RESERVE_ACCOUNT),\n              msolMintAuthority: this.findProgramDerivedAddress(ProgramDerivedAddressSeed.LIQ_POOL_MSOL_MINT_AUTHORITY),\n            },\n            inAmount: swapParams.amount,\n            minimumOutAmount: swapParams.otherAmountThreshold,\n          })\n        : createMarinadeFinanceLiquidUnstakeInstruction({\n            ...swapParams,\n            additionalArgs: {\n              address: this.address,\n              marinadeStateResponse: this.marinadeStateResponse,\n              liqPoolSolLegPda: this.liqPoolSolLegPdaAddress,\n            },\n            inAmount: swapParams.amount,\n            minimumOutAmount: swapParams.otherAmountThreshold,\n          }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [NATIVE_MINT, this.marinadeStateResponse.msolMint];\n  }\n\n  private findProgramDerivedAddress(seed: ProgramDerivedAddressSeed, extraSeeds: Buffer[] = []): PublicKey {\n    const seeds = [this.address.toBuffer(), Buffer.from(seed), ...extraSeeds];\n    const [result] = findProgramAddressSync(seeds, this.marinadeFinanceProgram.programId);\n    return result;\n  }\n}\n\nclass MarinadeState {\n  constructor(\n    private state: MarinadeStateResponse,\n    private liqPoolSolLegPdaLamports: BN,\n    private liqPoolMSOLLegAmount: BN,\n  ) {}\n\n  // https://github.com/marinade-finance/liquid-staking-program/blob/main/programs/marinade-finance/src/state/deposit.rs#L61-L170\n  depositQuote(lamports: BN) {\n    let userLamports = lamports;\n    const userMSOLBuyOrder = this.calcMSOLFromLamports(userLamports);\n    const swapMSOLMax = BN.min(userMSOLBuyOrder, this.liqPoolMSOLLegAmount);\n\n    let outAmountBN = new BN(0);\n\n    // if we can sell from the LiqPool\n    userLamports = (() => {\n      if (swapMSOLMax.gt(new BN(0))) {\n        const lamportsForTheLiqPool = userMSOLBuyOrder.eq(swapMSOLMax)\n          ? userLamports\n          : this.calcLamportsFromMSOLAmount(swapMSOLMax);\n\n        // transfered mSOL to the user\n        outAmountBN = outAmountBN.add(swapMSOLMax);\n\n        return saturatingSub(userLamports, lamportsForTheLiqPool);\n      } else {\n        return userLamports;\n      }\n    })();\n\n    // check if we have more lamports from the user\n    if (userLamports.gt(new BN(0))) {\n      this.checkStakingCap(userLamports);\n      const MSOLToMint = this.calcMSOLFromLamports(userLamports);\n      outAmountBN = outAmountBN.add(MSOLToMint);\n    }\n\n    return {\n      outAmount: outAmountBN,\n      feeAmount: 0,\n      feePct: 0,\n      priceImpactPct: 0,\n    };\n  }\n\n  private checkStakingCap(transferingLamports: BN) {\n    const resultAmount = this.totalLamportsUnderControl().add(transferingLamports);\n\n    if (resultAmount.gt(this.state.stakingSolCap)) throw new Error('Staking cap reached');\n  }\n\n  private calcMSOLFromLamports(stakeLamports: BN) {\n    return sharesFromValue(stakeLamports, this.totalVirtualStakedLamports(), this.state.msolSupply);\n  }\n\n  private calcLamportsFromMSOLAmount(msolAmount: BN) {\n    return valueFromShares(msolAmount, this.totalVirtualStakedLamports(), this.state.msolSupply);\n  }\n\n  private totalVirtualStakedLamports() {\n    return saturatingSub(this.totalLamportsUnderControl(), this.state.circulatingTicketBalance);\n  }\n\n  private totalLamportsUnderControl() {\n    return this.state.validatorSystem.totalActiveBalance\n      .add(this.totalCoolingDown())\n      .add(this.state.availableReserveBalance);\n  }\n\n  private totalCoolingDown() {\n    return this.state.stakeSystem.delayedUnstakeCoolingDown.add(this.state.emergencyCoolingDown);\n  }\n\n  // https://github.com/marinade-finance/liquid-staking-program/blob/main/programs/marinade-finance/src/state/liquid_unstake.rs#L68-L171\n  liquidUnstakeQuote(msolAmount: BN) {\n    const maxLamports = saturatingSub(this.liqPoolSolLegPdaLamports, this.state.rentExemptForTokenAcc);\n\n    const lamportsToObtain = this.calcLamportsFromMSOLAmount(msolAmount);\n    const liquidUnstakeFeeBp = unstakeNowFeeBp(\n      this.state.liqPool.lpMinFee.basisPoints,\n      this.state.liqPool.lpMaxFee.basisPoints,\n      this.state.liqPool.lpLiquidityTarget,\n      maxLamports,\n      lamportsToObtain,\n    );\n\n    const msolFee = msolAmount.mul(new BN(liquidUnstakeFeeBp)).div(new BN(10_000));\n    const workingLamportsValue = this.calcLamportsFromMSOLAmount(msolAmount.sub(msolFee));\n    if (workingLamportsValue.add(this.state.rentExemptForTokenAcc).gt(this.liqPoolSolLegPdaLamports))\n      throw new Error('Insufficient liquidity');\n\n    return {\n      outAmount: workingLamportsValue,\n      feeAmount: msolFee,\n      feePct: liquidUnstakeFeeBp / 10_000,\n      priceImpactPct: 0,\n    };\n  }\n}\nfunction valueFromShares(shares: BN, totalValue: BN, totalShares: BN) {\n  return proportionalBN(shares, totalValue, totalShares);\n}\n\nfunction sharesFromValue(value: BN, totalValue: BN, totalShares: BN) {\n  return totalShares.eq(new BN(0)) ? value : proportionalBN(value, totalShares, totalValue);\n}\n\nfunction saturatingSub(left: BN, right: BN): BN {\n  return left.gt(right) ? left.sub(right) : new BN(0);\n}\n","import { AccountInfo, PublicKey } from '@solana/web3.js';\nimport {\n  ALDRIN_SWAP_V2_PROGRAM_ID,\n  ALDRIN_SWAP_PROGRAM_ID,\n  DEVNET_SERUM_DEX_PROGRAM,\n  MAINNET_SERUM_DEX_PROGRAM,\n  RAYDIUM_AMM_V4_PROGRAM_ID,\n  CROPPER_PROGRAM_ID,\n  CREMA_PROGRAM_ID,\n  SENCHA_PROGRAM_ID,\n  MERCURIAL_SWAP_PROGRAM_ID,\n  LIFINITY_PROGRAM_ID,\n  WHIRLPOOL_PROGRAM_ID,\n  CYKURA_PROGRAM_ID,\n  MARINADE_PROGRAM_ID,\n} from '../constants';\nimport { Amm } from './amm';\nimport { SerumMarket, StableSwap } from './market';\nimport { SWAP_PROGRAM_ID as SABER_SWAP_PROGRAM_ID } from '@saberhq/stableswap-sdk';\nimport { SaberAmm } from './saber/saberAmm';\nimport { SerumAmm } from './serum/serumAmm';\nimport { AldrinAmm } from './aldrin/aldrinAmm';\nimport { PROGRAM_ID_TO_LABEL } from './spl-token-swap/splTokenSwapPools';\nimport { SplTokenSwapAmm } from './spl-token-swap/splTokenSwapAmm';\nimport { MercurialAmm } from './mercurial/mercurialAmm';\nimport { RaydiumAmm } from './raydium/raydiumAmm';\nimport { CropperAmm } from './cropper/cropperAmm';\nimport { CremaAmm } from './crema/cremaAmm';\nimport { SenchaAmm } from './sencha/senchaAmm';\nimport { LifinityAmm } from './lifinity/lifinityAmm';\nimport { WhirlpoolAmm } from './whirlpool/whirlpoolAmm';\nimport { CykuraAmm } from './cykura/cykuraAmm';\nimport { MarinadeAmm } from './marinade/marinadeAmm';\nimport { createProgramAddressSyncUnsafe } from '../utils/pda';\n\nexport function ammFactory(address: PublicKey, accountInfo: AccountInfo<Buffer>, params?: any): Amm | undefined {\n  const programId = new PublicKey(accountInfo.owner);\n\n  if (programId.equals(MAINNET_SERUM_DEX_PROGRAM) || programId.equals(DEVNET_SERUM_DEX_PROGRAM)) {\n    const decoded = SerumMarket.getLayout(programId).decode(accountInfo.data);\n    if (!decoded.accountFlags.initialized || !decoded.accountFlags.market) {\n      throw new Error('Invalid market');\n    }\n    const serumMarket = new SerumMarket(decoded, 0, 0, {}, programId);\n    return new SerumAmm(serumMarket);\n  } else if (programId.equals(RAYDIUM_AMM_V4_PROGRAM_ID)) {\n    const raydiumAmm = new RaydiumAmm(address, accountInfo, params);\n    if (raydiumAmm.status === 1) {\n      return raydiumAmm;\n    }\n  } else if (programId.equals(MERCURIAL_SWAP_PROGRAM_ID)) {\n    return new MercurialAmm(address, accountInfo, params);\n  } else if (programId.equals(SABER_SWAP_PROGRAM_ID)) {\n    const nonce = accountInfo.data.slice(2, 3);\n    const stableSwap = StableSwap.loadWithData(\n      address,\n      accountInfo.data,\n      createProgramAddressSyncUnsafe([address.toBuffer(), nonce], SABER_SWAP_PROGRAM_ID),\n    );\n\n    if (stableSwap.state.isPaused || !stableSwap.state.isInitialized) return;\n\n    return new SaberAmm(stableSwap);\n  } else if (programId.equals(CREMA_PROGRAM_ID)) {\n    return new CremaAmm(address, accountInfo);\n  } else if (programId.equals(ALDRIN_SWAP_PROGRAM_ID) || programId.equals(ALDRIN_SWAP_V2_PROGRAM_ID)) {\n    return new AldrinAmm(address, accountInfo, params);\n  } else if ([...PROGRAM_ID_TO_LABEL.keys()].includes(programId.toBase58())) {\n    const label = PROGRAM_ID_TO_LABEL.get(accountInfo.owner.toBase58()) ?? 'Unknown';\n    return new SplTokenSwapAmm(address, accountInfo, label);\n  } else if (programId.equals(CROPPER_PROGRAM_ID)) {\n    return new CropperAmm(address, accountInfo, params);\n  } else if (programId.equals(SENCHA_PROGRAM_ID)) {\n    const senchaAmm = new SenchaAmm(address, accountInfo);\n    if (senchaAmm.isPaused) return;\n    return senchaAmm;\n  } else if (programId.equals(LIFINITY_PROGRAM_ID)) {\n    return new LifinityAmm(address, accountInfo);\n  } else if (programId.equals(WHIRLPOOL_PROGRAM_ID)) {\n    return new WhirlpoolAmm(address, accountInfo);\n  } else if (programId.equals(CYKURA_PROGRAM_ID)) {\n    return new CykuraAmm(address, accountInfo);\n  } else if (programId.equals(MARINADE_PROGRAM_ID)) {\n    return new MarinadeAmm(address, accountInfo);\n  }\n  // Not supported by frontend\n  return;\n}\n","import { AccountInfo, Connection, PublicKey } from '@solana/web3.js';\nimport { isValidRoute, MarketInfo } from './market';\nimport { MIN_SEGMENT_SIZE_FOR_INTERMEDIATE_MINTS } from '../constants';\nimport { RaydiumAmm } from './raydium/raydiumAmm';\nimport fetch from 'cross-fetch';\nimport { TokenRouteSegments } from './types';\nimport { Amm, prefetchAmms, SwapMode } from './amm';\nimport { SerumAmm } from './serum/serumAmm';\nimport { ammFactory } from './ammFactory';\nimport { getSaberWrappedDecimalsAmms } from './saber/saberAddDecimalsAmm';\nimport { SplitTradeAmm } from './split-trade/splitTradeAmm';\nimport { getTwoPermutations } from '../utils/getTwoPermutations';\nimport { chunkedGetMultipleAccountInfos } from '../utils/chunkedGetMultipleAccountInfos';\nimport JSBI from 'jsbi';\n\nexport interface TransactionFeeInfo {\n  signatureFee: number;\n  openOrdersDeposits: number[];\n  ataDeposits: number[];\n  /* Overall amount that will be deducted from user wallet after the swap */\n  totalFeeAndDeposits: number;\n  /* Amount for fee, deposits and temporary token accounts */\n  minimumSOLForTransaction: number;\n}\n\nexport interface RouteInfo {\n  marketInfos: MarketInfo[];\n  inAmount: JSBI;\n  outAmount: JSBI;\n  amount: JSBI; // The target amount, expect input or expect output\n  otherAmountThreshold: JSBI;\n  swapMode: SwapMode;\n  priceImpactPct: number;\n  getDepositAndFee: () => Promise<TransactionFeeInfo | undefined>;\n}\n\ntype MarketsCache = Array<\n  Omit<AccountInfo<Buffer>, 'data' | 'owner'> & {\n    data: [string, 'base64'];\n    owner: string;\n    pubkey: string;\n  }\n>;\n\ntype KeyedAccountInfo = AccountInfo<Buffer> & {\n  pubkey: PublicKey;\n  // api can pass some extra params\n  params?: any;\n};\n\nexport const fetchMarketCache = async (url: string) => {\n  const marketsCache = (await (await fetch(url)).json()) as MarketsCache;\n  return marketsCache;\n};\n\n/** For testing purposes when api does not have the new pools */\nexport async function fetchExtraKeyedAccountInfos(connection: Connection, pks: PublicKey[]) {\n  const extraKeyedAccountInfos = (\n    await chunkedGetMultipleAccountInfos(\n      connection,\n      pks.map((item) => item.toBase58()),\n    )\n  ).map((item, index) => {\n    const pubkey = pks[index];\n    if (!item) throw new Error(`Failed to fetch pool ${pubkey.toBase58()}`);\n    return { pubkey, ...item };\n  });\n  return extraKeyedAccountInfos;\n}\n\nexport async function getAllAmms(connection: Connection, marketsCache: MarketsCache): Promise<Amm[]> {\n  const marketCacheToAccountInfo = (marketsCache: MarketsCache): Array<KeyedAccountInfo> => {\n    return marketsCache.map((market) => {\n      const {\n        data: [accountInfo, format],\n        pubkey,\n        ...rest\n      } = market;\n      return {\n        ...rest,\n        pubkey: new PublicKey(pubkey),\n        data: Buffer.from(accountInfo, format),\n        owner: new PublicKey(rest.owner),\n      };\n    });\n  };\n\n  const marketKeyedAccountInfos = marketCacheToAccountInfo(marketsCache);\n\n  // this is used for development\n  const extraKeys: Array<PublicKey> = [];\n\n  if (extraKeys.length) {\n    const extraKeyedAccountInfos = await fetchExtraKeyedAccountInfos(connection, extraKeys);\n    marketKeyedAccountInfos.push(...extraKeyedAccountInfos);\n  }\n\n  const amms = marketKeyedAccountInfos.reduce((acc, keyedAccountInfo) => {\n    const amm = ammFactory(keyedAccountInfo.pubkey, keyedAccountInfo, keyedAccountInfo.params);\n    // Amm might not be recognized by the current version of the frontend\n    // or be in a state we don't want\n    if (amm) {\n      acc.push(amm);\n    }\n    return acc;\n  }, new Array<Amm>());\n\n  await prefetchAmms(\n    amms.filter((amm) => amm.shouldPrefetch),\n    connection,\n  );\n\n  amms.push(...getSaberWrappedDecimalsAmms());\n\n  return amms;\n}\n\nexport function ammCrossProtocolPairs(arr: Amm[], callback: (a: Amm, b: Amm) => void) {\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      // Don't pair amm with same label\n      if (arr[i].label !== arr[j].label) {\n        callback(arr[i], arr[j]);\n      }\n    }\n  }\n}\n\nconst mintCache: Record<string, string> = {};\n\n// Since the mints are mostly repeated we want to avoid converting the same pk again\n// This seems to bring getTokenRouteSegments from 100ms => 50ms\nfunction getOrUpdatePublicKeyCache(pk: PublicKey) {\n  //@ts-ignore\n  const pkBase64 = pk._bn.toString();\n  const cached = mintCache[pkBase64];\n  if (cached) {\n    return cached;\n  } else {\n    const pkBase58 = pk.toBase58();\n    mintCache[pkBase64] = pkBase58;\n    return pkBase58;\n  }\n}\n\nexport function getTokenRouteSegments(amms: Amm[]): TokenRouteSegments {\n  const tokenRouteSegments = new Map<string, Map<string, Amm[]>>();\n\n  amms.forEach((amm) => {\n    const reserveTokenMintPermutations = getTwoPermutations(amm.reserveTokenMints);\n    reserveTokenMintPermutations.forEach(([firstReserveMint, secondReserveMint]) => {\n      const firstMintBase58 = getOrUpdatePublicKeyCache(firstReserveMint);\n      const secondMintBase58 = getOrUpdatePublicKeyCache(secondReserveMint);\n      addSegment(firstMintBase58, secondMintBase58, amm, tokenRouteSegments);\n    });\n  });\n\n  return tokenRouteSegments;\n}\n\nfunction addSegment(inMint: string, outMint: string, amm: Amm, tokenRouteSegments: TokenRouteSegments) {\n  let segments = tokenRouteSegments.get(inMint);\n\n  if (!segments) {\n    segments = new Map<string, Amm[]>([[outMint, []]]);\n    tokenRouteSegments.set(inMint, segments);\n  }\n\n  let amms = segments.get(outMint);\n  if (!amms) {\n    amms = [];\n    segments.set(outMint, amms);\n  }\n\n  amms.push(amm);\n}\n\nexport type Route = {\n  amms: Amm[];\n  mints: PublicKey[];\n};\n\n/*\n * Construct TokenRouteSegment that is only used for the selected inputMint and outputMint\n * Example:\n *   SOL => USDC, the map would consist of\n *     - SOL => USDC => Amm[]\n *     - SOL => USDT => Amm[]\n *     - USDT => SOL => Amm[]\n */\nexport function computeInputRouteSegments({\n  inputMint,\n  outputMint,\n  tokenRouteSegments,\n  intermediateTokens,\n  swapMode,\n  onlyDirectRoutes,\n}: {\n  inputMint: string;\n  outputMint: string;\n  tokenRouteSegments: TokenRouteSegments;\n  intermediateTokens?: string[];\n  swapMode: SwapMode;\n  onlyDirectRoutes?: boolean;\n}): TokenRouteSegments {\n  const inputRouteSegments: TokenRouteSegments = new Map();\n\n  const inputSegment = tokenRouteSegments.get(inputMint);\n  const outputSegment = tokenRouteSegments.get(outputMint);\n\n  if (inputSegment && outputSegment) {\n    const minSegmentSize = Math.min(inputSegment.size, outputSegment.size);\n    // this is used to minimize the looping part\n    // if SOL => MER, SOL has 100 keys but MER has 6 keys so only the first 6 loops are required always\n    const shouldStartWithInputSegment = inputSegment.size < outputSegment.size;\n\n    const inputInnerMap = new Map<string, Amm[]>();\n    const outputInnerMap = new Map<string, Amm[]>();\n    let [startSegment, endSegment, startMint, endMint] = shouldStartWithInputSegment\n      ? [inputSegment, outputSegment, inputMint, outputMint]\n      : [outputSegment, inputSegment, outputMint, inputMint];\n\n    for (let [mint, amms] of startSegment.entries()) {\n      let filteredAmms = swapMode === SwapMode.ExactIn ? amms : amms.filter((amm) => amm.exactOutputSupported);\n\n      if (mint === endMint) {\n        inputInnerMap.set(mint, filteredAmms);\n        outputInnerMap.set(startMint, filteredAmms);\n        continue;\n      }\n\n      if (\n        onlyDirectRoutes ||\n        swapMode === SwapMode.ExactOut ||\n        shouldSkipOutputMint(intermediateTokens, minSegmentSize, mint)\n      ) {\n        continue;\n      }\n\n      const intersectionAmms = endSegment.get(mint);\n      if (intersectionAmms) {\n        let filteredIntersectionAmms =\n          swapMode === SwapMode.ExactIn ? intersectionAmms : intersectionAmms.filter((amm) => amm.exactOutputSupported);\n\n        inputRouteSegments.set(\n          mint,\n          new Map([\n            [startMint, filteredAmms],\n            [endMint, filteredIntersectionAmms],\n          ]),\n        );\n        inputInnerMap.set(mint, filteredAmms);\n        outputInnerMap.set(mint, filteredIntersectionAmms);\n      }\n    }\n    inputRouteSegments.set(startMint, inputInnerMap);\n    inputRouteSegments.set(endMint, outputInnerMap);\n  }\n\n  return inputRouteSegments;\n}\n\nexport function computeRouteMap(\n  tokenRouteSegments: TokenRouteSegments,\n  intermediateTokens?: string[],\n  onlyDirectRoutes?: boolean,\n): Map<string, string[]> {\n  const routeMap = new Map<string, string[]>();\n\n  for (const [tokenMint, firstLevelOutputs] of tokenRouteSegments) {\n    const validOutputMints = new Set<string>();\n\n    for (const [firstLevelOutputMint, firstLevelAmms] of firstLevelOutputs) {\n      validOutputMints.add(firstLevelOutputMint);\n\n      if (onlyDirectRoutes) {\n        continue;\n      }\n      // add the single level output as possible valid mints as well\n      const secondLevelOutputs = tokenRouteSegments.get(firstLevelOutputMint) ?? new Map<string, Amm[]>();\n\n      for (const [secondLevelOutputMint, secondLevelAmms] of secondLevelOutputs) {\n        // Prevent output mint == input mint when routing\n        if (secondLevelOutputMint === tokenMint) {\n          continue;\n        }\n\n        const outputMintSize = tokenRouteSegments.get(secondLevelOutputMint)?.size ?? 0;\n        const minSegmentSize = Math.min(firstLevelOutputs.size, outputMintSize);\n\n        // if intermediateTokens is specified and it doesnt include in the intermediateTokens, skip it\n        if (shouldSkipOutputMint(intermediateTokens, minSegmentSize, firstLevelOutputMint)) {\n          continue;\n        }\n\n        let found = false;\n        for (const firstLevelAmm of firstLevelAmms) {\n          for (const secondLevelAmm of secondLevelAmms) {\n            if (isValidRoute(firstLevelAmm, secondLevelAmm)) {\n              validOutputMints.add(secondLevelOutputMint);\n              found = true;\n              break;\n            }\n          }\n          if (found) break;\n        }\n      }\n    }\n    routeMap.set(tokenMint, Array.from(validOutputMints));\n  }\n\n  return routeMap;\n}\n\ninterface SplitTradeRequiredParams {\n  hasSerumOpenOrderInstruction: boolean;\n}\n\nfunction shouldSkipOutputMint(\n  intermediateTokens: string[] | undefined,\n  minSegmentSize: number,\n  outputMint: string,\n): boolean {\n  return Boolean(\n    intermediateTokens &&\n      minSegmentSize > MIN_SEGMENT_SIZE_FOR_INTERMEDIATE_MINTS &&\n      !intermediateTokens.includes(outputMint),\n  );\n}\n\nexport function isSplitSetupRequired(\n  marketInfos: MarketInfo[],\n  { hasSerumOpenOrderInstruction }: SplitTradeRequiredParams,\n): { needSetup: boolean; needCleanup: boolean } {\n  let firstAmm: Amm;\n  let secondAmm: Amm;\n\n  if (marketInfos.length === 1) {\n    const amm = marketInfos[0].amm;\n    if (amm instanceof SplitTradeAmm) {\n      firstAmm = amm.firstAmm;\n      secondAmm = amm.secondAmm;\n    } else {\n      return { needSetup: false, needCleanup: false };\n    }\n  } else {\n    [firstAmm, secondAmm] = marketInfos.map((marketInfo) => marketInfo.amm);\n  }\n\n  if (firstAmm instanceof RaydiumAmm || secondAmm instanceof RaydiumAmm) {\n    return { needSetup: true, needCleanup: true };\n  } else if (firstAmm instanceof SerumAmm && secondAmm instanceof SerumAmm) {\n    return { needSetup: true, needCleanup: true };\n  } else if (hasSerumOpenOrderInstruction) {\n    return { needSetup: true, needCleanup: false };\n  }\n\n  return { needSetup: false, needCleanup: false };\n}\n\n// We cannot add platform fee to all possible routing due to transaction size limit\nexport function isPlatformFeeSupported(swapMode: SwapMode, amms: Amm[]): boolean {\n  if (swapMode === SwapMode.ExactOut) return false;\n\n  if (amms.length > 1) {\n    const [firstMarket, secondMarket] = amms;\n\n    if (firstMarket instanceof RaydiumAmm && secondMarket instanceof RaydiumAmm) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function getRouteInfoUniqueId(routeInfo: RouteInfo) {\n  return routeInfo.marketInfos.map((marketInfo) => `${marketInfo.amm.id}-${marketInfo.inputMint}`).join('-');\n}\n","import { Signer, Transaction, TransactionInstruction, TransactionSignature } from '@solana/web3.js';\n\nexport const getEmptyInstruction: () => Instruction = () => ({\n  instructions: [],\n  cleanupInstructions: [],\n  signers: [],\n});\n\nexport type Instruction = {\n  instructions: TransactionInstruction[];\n  cleanupInstructions: TransactionInstruction[];\n  signers: Signer[];\n};\n\nexport type TransactionPayload = {\n  transaction: Transaction;\n  signers: Signer[];\n  execute: () => Promise<TransactionSignature>;\n};\n","import { deserializeAccount } from '@mercurial-finance/optimist';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, Token, TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { Connection, PublicKey, SystemProgram, TransactionInstruction } from '@solana/web3.js';\nimport JSBI from 'jsbi';\nimport { WRAPPED_SOL_MINT } from '../constants';\nimport { getEmptyInstruction, Instruction } from './instruction';\nimport { Owner } from './Owner';\n\n// Leverage the existing ATA when present\nexport async function createAndCloseWSOLAccount({\n  connection,\n  amount,\n  owner: { publicKey },\n}: {\n  connection: Connection;\n  owner: Owner;\n  amount: JSBI;\n}): Promise<Instruction & { address: PublicKey }> {\n  const result = getEmptyInstruction();\n  result.instructions = [];\n\n  const toAccount = await Token.getAssociatedTokenAddress(\n    ASSOCIATED_TOKEN_PROGRAM_ID,\n    TOKEN_PROGRAM_ID,\n    WRAPPED_SOL_MINT,\n    publicKey,\n    true,\n  );\n\n  const info = await connection.getAccountInfo(toAccount);\n\n  if (info === null) {\n    result.instructions.push(\n      createAssociatedTokenAccountInstruction(publicKey, toAccount, publicKey, WRAPPED_SOL_MINT),\n    );\n  }\n\n  // Fund account and sync\n  result.instructions.push(\n    SystemProgram.transfer({\n      fromPubkey: publicKey,\n      toPubkey: toAccount,\n      lamports: JSBI.toNumber(amount),\n    }),\n  );\n  result.instructions.push(\n    // This is not exposed by the types, but indeed it exists\n    (Token as any).createSyncNativeInstruction(TOKEN_PROGRAM_ID, toAccount),\n  );\n\n  result.cleanupInstructions = [\n    Token.createCloseAccountInstruction(TOKEN_PROGRAM_ID, toAccount, publicKey, publicKey, []),\n  ];\n\n  return {\n    address: toAccount,\n    ...result,\n  };\n}\n\nexport async function findOrCreateAssociatedAccountByMint({\n  connection,\n  payer,\n  owner: { publicKey },\n  mintAddress,\n  unwrapSOL,\n}: {\n  connection: Connection;\n  payer: PublicKey;\n  owner: Owner;\n  mintAddress: PublicKey | string;\n  unwrapSOL: boolean;\n}): Promise<Instruction & { address: PublicKey }> {\n  const mint = typeof mintAddress === 'string' ? new PublicKey(mintAddress) : mintAddress;\n  const toAccount = await Token.getAssociatedTokenAddress(\n    ASSOCIATED_TOKEN_PROGRAM_ID,\n    TOKEN_PROGRAM_ID,\n    mint,\n    publicKey,\n    true,\n  );\n  const cleanupInstructions: TransactionInstruction[] = [];\n  const instructions: TransactionInstruction[] = [];\n\n  const info = await connection.getAccountInfo(toAccount);\n\n  if (info === null) {\n    instructions.push(createAssociatedTokenAccountInstruction(payer, toAccount, publicKey, mint));\n  } else {\n    const tokenAccountInfo = deserializeAccount(info.data);\n\n    if (tokenAccountInfo && !tokenAccountInfo.owner.equals(publicKey)) {\n      // What to do at the top level in UIs and SDK?\n      throw new Error(`/!\\ ATA ${toAccount.toBase58()} is not owned by ${publicKey.toBase58()}`);\n    }\n  }\n\n  // We close it when wrapped SOL\n  if (mint.equals(WRAPPED_SOL_MINT) && unwrapSOL) {\n    cleanupInstructions.push(\n      Token.createCloseAccountInstruction(TOKEN_PROGRAM_ID, toAccount, publicKey, publicKey, []),\n    );\n  }\n\n  return {\n    address: toAccount,\n    instructions: instructions,\n    cleanupInstructions,\n    signers: [],\n  };\n}\n\n// 0.1.x @solana/spl-token does not have the version without the rent sysvar\n// Source: https://github.com/solana-labs/solana-program-library/blob/dc5684445f0b42ba36a0157f06c561d967a7cb34/associated-token-account/program/src/instruction.rs#L16-L25\nexport function createAssociatedTokenAccountInstruction(\n  payer: PublicKey,\n  associatedToken: PublicKey,\n  owner: PublicKey,\n  mint: PublicKey,\n  programId = TOKEN_PROGRAM_ID,\n  associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID,\n): TransactionInstruction {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedToken, isSigner: false, isWritable: true },\n    { pubkey: owner, isSigner: false, isWritable: false },\n    { pubkey: mint, isSigner: false, isWritable: false },\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n    { pubkey: programId, isSigner: false, isWritable: false },\n  ];\n\n  return new TransactionInstruction({\n    keys,\n    programId: associatedTokenProgramId,\n    data: Buffer.alloc(0),\n  });\n}\n","import { Connection, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { isPlatformFeeSupported, RouteInfo } from './routes';\nimport { getEmptyInstruction, Instruction } from '../utils/instruction';\nimport { findOrCreateAssociatedAccountByMint } from '../utils/token';\nimport { createSetTokenLedgerInstruction } from './jupiterInstruction';\nimport { Owner } from '../utils/Owner';\nimport { PlatformFee } from './types';\nimport { QuoteMintToReferrer } from '..';\nimport { isSerumAndRaydium } from './market';\nimport { ZERO } from '@jup-ag/math';\nimport { BN } from 'bn.js';\n\ntype RouteToInstructionsParams = {\n  user: Owner;\n  tokenLedger: PublicKey;\n  openOrdersAddresses: (PublicKey | undefined)[];\n  userSourceTokenAccountAddress: PublicKey;\n  userIntermediaryTokenAccountAddress: PublicKey | undefined;\n  userDestinationTokenAccountAddress: PublicKey;\n  routeInfo: RouteInfo;\n  platformFee: PlatformFee | undefined;\n  quoteMintToReferrer: QuoteMintToReferrer;\n};\n\nasync function routeToInstructions({\n  user,\n  tokenLedger,\n  openOrdersAddresses,\n  userSourceTokenAccountAddress,\n  userIntermediaryTokenAccountAddress,\n  userDestinationTokenAccountAddress,\n  routeInfo,\n  platformFee,\n  quoteMintToReferrer,\n}: RouteToInstructionsParams): Promise<Instruction> {\n  const otherAmountThreshold = routeInfo.otherAmountThreshold;\n  const amount = routeInfo.amount;\n\n  const legs = routeInfo.marketInfos.length;\n  if (legs === 2 && !userIntermediaryTokenAccountAddress) {\n    throw new Error('Missing intermediary token account');\n  }\n\n  // Drop referrer if space is scarce\n  const effectiveQuoteMintToReferrer =\n    platformFee && isSerumAndRaydium(routeInfo.marketInfos) ? undefined : quoteMintToReferrer;\n\n  const userIntermediateTokenAccountAddresses = userIntermediaryTokenAccountAddress\n    ? [userIntermediaryTokenAccountAddress]\n    : [];\n  const userTokenAccountAddresses = [\n    userSourceTokenAccountAddress,\n    ...userIntermediateTokenAccountAddresses,\n    userDestinationTokenAccountAddress,\n  ];\n\n  const platformFeeSupported = isPlatformFeeSupported(\n    routeInfo.swapMode,\n    routeInfo.marketInfos.map((mi) => mi.amm),\n  );\n\n  const instructions: TransactionInstruction[] = [\n    createSetTokenLedgerInstruction(tokenLedger, userTokenAccountAddresses[1]),\n  ];\n\n  for (const [index, marketInfo] of routeInfo.marketInfos.entries()) {\n    const amm = marketInfo.amm;\n    const legAmount = index === 0 ? new BN(amount.toString()) : null;\n    const isLastLeg = index === legs - 1;\n    const legOtherAmountThreshold = new BN((isLastLeg ? otherAmountThreshold : ZERO).toString());\n    const legPlatformFee = isLastLeg && platformFeeSupported ? platformFee : undefined;\n\n    const [userSourceTokenAccount, userDestinationTokenAccount] = userTokenAccountAddresses.slice(index);\n\n    instructions.push(\n      ...amm.createSwapInstructions({\n        sourceMint: marketInfo.inputMint,\n        destinationMint: marketInfo.outputMint,\n        userSourceTokenAccount,\n        userDestinationTokenAccount,\n        userTransferAuthority: user.publicKey,\n        inAmount: marketInfo.inAmount,\n        amount: legAmount,\n        otherAmountThreshold: legOtherAmountThreshold,\n        swapMode: routeInfo.swapMode,\n        tokenLedger,\n        openOrdersAddress: openOrdersAddresses[index],\n        platformFee: legPlatformFee,\n        quoteMintToReferrer: effectiveQuoteMintToReferrer,\n      }),\n    );\n  }\n\n  const { signers, cleanupInstructions } = getEmptyInstruction();\n\n  if (user.isKeyPair && user.signer) {\n    signers.push(user.signer);\n  }\n  return {\n    signers,\n    cleanupInstructions,\n    instructions,\n  };\n}\n\nexport const routeAtaInstructions = async ({\n  connection,\n  marketInfos,\n  owner,\n  unwrapSOL,\n}: {\n  connection: Connection;\n  marketInfos: RouteInfo['marketInfos'];\n  owner: Owner;\n  unwrapSOL: boolean;\n}) => {\n  const getUserIntermediateTokenAccountAddress = async () => {\n    const userIntermediateTokenAccountAddress =\n      marketInfos.length === 2\n        ? await findOrCreateAssociatedAccountByMint({\n            connection,\n            owner: owner,\n            payer: owner.publicKey,\n            mintAddress: marketInfos[0].outputMint,\n            unwrapSOL,\n          })\n        : undefined;\n    return userIntermediateTokenAccountAddress;\n  };\n\n  const getUserDestinationTokenAccountAddress = () => {\n    return findOrCreateAssociatedAccountByMint({\n      connection,\n      owner: owner,\n      payer: owner.publicKey,\n      mintAddress: marketInfos.length === 2 ? marketInfos[1].outputMint : marketInfos[0].outputMint,\n      unwrapSOL,\n    });\n  };\n\n  const [userIntermediaryTokenAccountResult, userDestinationTokenAccountResult] = await Promise.all([\n    getUserIntermediateTokenAccountAddress(),\n    getUserDestinationTokenAccountAddress(),\n  ]);\n\n  return {\n    userIntermediaryTokenAccountResult,\n    userDestinationTokenAccountResult,\n  };\n};\n\nexport default routeToInstructions;\n","import { Connection, PublicKey } from '@solana/web3.js';\nimport { SerumMarket } from '../market';\nimport { getEmptyInstruction, Instruction } from '../../utils/instruction';\nimport { wait } from '../../utils/wait';\nimport { createOpenOrdersInstruction } from '../jupiterInstruction';\n\nexport type MarketToOpenOrdersAddress = Map<string, PublicKey>;\n\nexport async function getOrCreateOpenOrdersAddress(\n  connection: Connection,\n  user: PublicKey,\n  serumMarket: SerumMarket,\n  marketToOpenOrdersAddress?: MarketToOpenOrdersAddress,\n): Promise<(Instruction & { address: PublicKey }) | undefined> {\n  const result = getEmptyInstruction();\n\n  const marketAddress = serumMarket.address.toString();\n\n  if (marketToOpenOrdersAddress) {\n    // check existing map\n    let openOrdersAddress = marketToOpenOrdersAddress.get(marketAddress);\n\n    if (openOrdersAddress) {\n      let openOrdersAccountInfo = null;\n\n      // We verify if it indeed exists, with low commitment to pick it up, to address the unsafe behaviour below\n      openOrdersAccountInfo = await connection.getAccountInfo(openOrdersAddress, 'confirmed');\n\n      if (openOrdersAccountInfo) {\n        return {\n          ...result,\n          address: openOrdersAddress,\n        };\n      }\n    }\n  }\n\n  const [newOpenOrdersAddress, ix] = createOpenOrdersInstruction(serumMarket, user);\n\n  const newOpenOrdersAddressInfo = await connection.getAccountInfo(newOpenOrdersAddress);\n\n  if (!newOpenOrdersAddressInfo) {\n    result.instructions = [ix];\n  }\n\n  // This is unsafe, since we don't know yet if it has succeeded\n  marketToOpenOrdersAddress?.set(serumMarket.address.toString(), newOpenOrdersAddress);\n\n  return {\n    ...result,\n    address: newOpenOrdersAddress,\n  };\n}\n","import { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { Connection, FeeCalculator, PublicKey } from '@solana/web3.js';\nimport type { SerumOpenOrdersMap } from '..';\nimport { WRAPPED_SOL_MINT } from '../constants';\nimport { deserializeAccount } from '@mercurial-finance/optimist';\nimport { RouteInfo, TransactionFeeInfo } from './routes';\nimport { routeAtaInstructions } from './routeToInstructions';\nimport { getOrCreateOpenOrdersAddress } from './serum/openOrders';\nimport { SerumAmm } from './serum/serumAmm';\nimport { SplitTradeAmm } from './split-trade/splitTradeAmm';\nimport { PlatformFeeAndAccounts, SetupInstructions } from './types';\nimport { Owner } from '../utils/Owner';\n\nconst SERUM_OPEN_ACCOUNT_LAMPORTS = 23_352_760;\nconst OPEN_TOKEN_ACCOUNT_LAMPORTS = 2_039_280;\n\nfunction sum(values: number[]) {\n  return values.reduce((value, acc) => {\n    acc += value;\n    return acc;\n  }, 0);\n}\n\nconst calculateTransactionDepositAndFee = ({\n  intermediate,\n  destination,\n  openOrders,\n  hasWrapUnwrapSOL,\n  feeCalculator,\n}: SetupInstructions & {\n  hasWrapUnwrapSOL: boolean;\n  feeCalculator: FeeCalculator;\n}): TransactionFeeInfo => {\n  const openOrdersDeposits = openOrders\n    .filter((ooi) => ooi && ooi.instructions.length > 0)\n    .map(() => SERUM_OPEN_ACCOUNT_LAMPORTS);\n  const ataDeposits = [intermediate, destination]\n    .filter((item) => item?.instructions.length && item.cleanupInstructions.length === 0)\n    .map(() => OPEN_TOKEN_ACCOUNT_LAMPORTS);\n\n  const signatureFee =\n    ([...openOrders?.map((oo) => oo?.signers), intermediate?.signers, destination.signers].filter(Boolean).flat()\n      .length +\n      1) *\n    feeCalculator.lamportsPerSignature;\n\n  const totalFeeAndDeposits = sum([signatureFee, ...openOrdersDeposits, ...ataDeposits]);\n\n  // We need to account for temporary wrapped SOL token accounts as intermediary or output\n  const minimumSOLForTransaction = sum([\n    signatureFee,\n    ...openOrdersDeposits,\n    ...[intermediate, destination]\n      .filter((item) => (item?.instructions.length ?? 0) > 0)\n      .map(() => OPEN_TOKEN_ACCOUNT_LAMPORTS),\n    hasWrapUnwrapSOL ? OPEN_TOKEN_ACCOUNT_LAMPORTS : 0,\n  ]);\n\n  return {\n    signatureFee,\n    openOrdersDeposits,\n    ataDeposits,\n    totalFeeAndDeposits,\n    minimumSOLForTransaction,\n  };\n};\n\nexport const getDepositAndFeeFromInstructions = async ({\n  connection,\n  owner,\n  inputMint,\n  marketInfos,\n  feeCalculator,\n  serumOpenOrdersPromise,\n  wrapUnwrapSOL: unwrapSOL,\n}: {\n  connection: Connection;\n  owner: Owner;\n  inputMint: PublicKey;\n  marketInfos: RouteInfo['marketInfos'];\n  feeCalculator: FeeCalculator;\n  /* promise because we can choose not to await it when we dont need it */\n  serumOpenOrdersPromise: Promise<SerumOpenOrdersMap>;\n  wrapUnwrapSOL: boolean;\n}) => {\n  const hasWrapUnwrapSOL = inputMint.equals(WRAPPED_SOL_MINT) && unwrapSOL;\n\n  const openOrdersInstructionsPromise = Promise.all(\n    marketInfos.map(async (marketInfo) => {\n      const amm = marketInfo.amm;\n      if (amm instanceof SerumAmm || amm instanceof SplitTradeAmm) {\n        if (!amm.market) return;\n        return await getOrCreateOpenOrdersAddress(\n          connection,\n          owner.publicKey,\n          amm.market,\n          await serumOpenOrdersPromise,\n        );\n      }\n      return;\n    }),\n  );\n\n  const promise = routeAtaInstructions({ connection, marketInfos, owner, unwrapSOL }).then(\n    ({ userIntermediaryTokenAccountResult, userDestinationTokenAccountResult }) => {\n      return openOrdersInstructionsPromise.then((openOrdersInstructions) => ({\n        intermediate: userIntermediaryTokenAccountResult,\n        destination: userDestinationTokenAccountResult,\n        openOrders: openOrdersInstructions,\n      }));\n    },\n  );\n\n  const instructionResult = await promise;\n\n  return calculateTransactionDepositAndFee({\n    ...instructionResult,\n    hasWrapUnwrapSOL,\n    feeCalculator,\n  });\n};\n\nexport const NO_PLATFORM_FEE: PlatformFeeAndAccounts = {\n  feeBps: 0,\n  feeAccounts: new Map<string, PublicKey>(),\n};\n\nexport async function getPlatformFeeAccounts(\n  connection: Connection,\n  feeAccountOwner: PublicKey,\n): Promise<Map<string, PublicKey>> {\n  const tokenAccounts = (\n    await connection.getTokenAccountsByOwner(feeAccountOwner, {\n      programId: TOKEN_PROGRAM_ID,\n    })\n  ).value;\n\n  const feeAccounts = tokenAccounts.reduce((acc, tokenAccount) => {\n    const deserializedtokenAccount = deserializeAccount(tokenAccount.account.data);\n    if (deserializedtokenAccount) {\n      acc.set(deserializedtokenAccount.mint.toBase58(), tokenAccount.pubkey);\n    }\n    return acc;\n  }, new Map<string, PublicKey>());\n\n  return feeAccounts;\n}\n","import {\n  Connection,\n  PublicKey,\n  Transaction,\n  Signer,\n  TransactionInstruction,\n  BlockhashWithExpiryBlockHeight,\n  TransactionBlockhashCtor,\n} from '@solana/web3.js';\nimport { Instruction, TransactionPayload } from './instruction';\nimport { Owner } from './Owner';\n\nexport class TransactionBuilder {\n  private connection: Connection;\n  private feePayer: PublicKey;\n  private instructions: Instruction[];\n  private owner: Owner;\n\n  constructor(connection: Connection, feePayer: PublicKey, owner: Owner) {\n    this.connection = connection;\n    this.feePayer = feePayer;\n    this.instructions = [];\n    this.owner = owner;\n  }\n\n  addInstruction(instruction: Instruction): TransactionBuilder {\n    this.instructions.push(instruction);\n    return this;\n  }\n\n  async build(blockhashWithExpiryBlockHeight?: BlockhashWithExpiryBlockHeight): Promise<TransactionPayload> {\n    if (!blockhashWithExpiryBlockHeight) {\n      blockhashWithExpiryBlockHeight = await this.connection.getLatestBlockhash('confirmed');\n    }\n\n    const txFields: TransactionBlockhashCtor = {\n      ...blockhashWithExpiryBlockHeight,\n      feePayer: this.feePayer,\n    };\n\n    let instructions: TransactionInstruction[] = [];\n    let cleanupInstructions: TransactionInstruction[] = [];\n    let signers: Signer[] = [];\n    this.instructions.forEach((curr) => {\n      instructions = instructions.concat(curr.instructions);\n      cleanupInstructions = cleanupInstructions.concat(curr.cleanupInstructions);\n      signers = signers.concat(curr.signers);\n    });\n\n    const transaction = new Transaction(txFields);\n    instructions.concat(cleanupInstructions).forEach((ix) => transaction.add(ix));\n    transaction.feePayer = this.feePayer;\n\n    return {\n      transaction: transaction,\n      signers: signers,\n      execute: this.owner.isKeyPair\n        ? () => {\n            return this.connection.sendTransaction(transaction, signers);\n          }\n        : async () => {\n            throw new Error('Please use a Keypair for the owner parameter to enable the execute function');\n          },\n    };\n  }\n}\n","import { Keypair, PublicKey, Signer } from '@solana/web3.js';\n\ntype _Owner = Keypair | PublicKey;\n\nexport class Owner {\n  private readonly _owner: _Owner;\n\n  constructor(owner: _Owner) {\n    this._owner = owner;\n  }\n\n  get publicKey(): PublicKey {\n    if (Owner.isKeyPair(this._owner)) {\n      return this._owner.publicKey;\n    }\n\n    return this._owner;\n  }\n\n  get signer(): Signer | undefined {\n    return Owner.isKeyPair(this._owner) ? this._owner : undefined;\n  }\n\n  get isKeyPair(): boolean {\n    return Owner.isKeyPair(this._owner);\n  }\n\n  get isPublicKey(): boolean {\n    return Owner.isPublicKey(this._owner);\n  }\n\n  static isKeyPair(owner: _Owner): owner is Keypair {\n    return (owner as Keypair).secretKey !== undefined;\n  }\n\n  static isPublicKey(owner: _Owner): owner is PublicKey {\n    return !Owner.isKeyPair(owner);\n  }\n}\n","export const wait = (time: number) => new Promise<void>((resolve) => setTimeout(resolve, time));\n","import { TransactionError } from '@mercurial-finance/optimist';\nimport { bs58 } from '@project-serum/anchor/dist/cjs/utils/bytes';\nimport {\n  ConfirmedTransactionMeta,\n  Connection,\n  PublicKey,\n  SendOptions,\n  Transaction,\n  TransactionResponse,\n  TransactionSignature,\n} from '@solana/web3.js';\nimport Decimal from 'decimal.js';\nimport promiseRetry from 'promise-retry';\nimport { WRAPPED_SOL_MINT, JUPITER_ERRORS } from '../constants';\nimport { wait } from './wait';\n\ntype ResponseMeta = NonNullable<TransactionResponse['meta']>;\ntype ReponseTransaction = TransactionResponse['transaction'];\n\nfunction diffTokenBalance(accountKeyIndex: number, meta: ConfirmedTransactionMeta): number | undefined {\n  const postBalance = meta.postTokenBalances?.find(\n    (postTokenBalance) => postTokenBalance.accountIndex === accountKeyIndex,\n  )?.uiTokenAmount.amount;\n  const preBalance = meta.preTokenBalances?.find((preTokenBalance) => preTokenBalance.accountIndex === accountKeyIndex)\n    ?.uiTokenAmount.amount;\n\n  // When token account is created it isn't present in preBalance\n  if (!postBalance) return;\n  return Math.abs(parseInt(postBalance) - (preBalance !== undefined ? parseInt(preBalance) : 0));\n}\n\nexport function extractTokenBalanceChangeFromTransaction(\n  meta: ResponseMeta,\n  transaction: ReponseTransaction,\n  tokenAccountAddress: PublicKey,\n): number | undefined {\n  const message = transaction.message;\n\n  if (!meta) {\n    return;\n  }\n  const index = message.accountKeys.findIndex((p) => p.equals(tokenAccountAddress));\n\n  return diffTokenBalance(index, meta);\n}\n\nexport function extractSOLChangeFromTransaction(\n  meta: ResponseMeta,\n  transaction: ReponseTransaction,\n  user: PublicKey,\n): number {\n  let accountKeyIndex = transaction.message.accountKeys.findIndex((p) => p.equals(user));\n\n  if (accountKeyIndex !== -1) {\n    return Math.abs(meta.postBalances[accountKeyIndex] - meta.preBalances[accountKeyIndex]);\n  }\n\n  // if 0 is returned it will throw error in the caller function\n  return 0;\n}\n\nexport function getWritableKeys(transaction: Transaction) {\n  return [\n    ...new Set(\n      transaction.instructions\n        .map((inst) => inst.keys.filter((key) => key.isWritable).map((k) => k.pubkey))\n        .reduce((acc, el) => acc.concat(el)),\n    ).values(),\n  ];\n}\n\nexport function getTokenBalanceChangesFromTransactionResponse({\n  txid,\n  inputMint,\n  outputMint,\n  user,\n  sourceAddress,\n  destinationAddress,\n  transactionResponse,\n  hasWrappedSOL,\n}: {\n  txid: TransactionSignature;\n  inputMint: PublicKey;\n  outputMint: PublicKey;\n  user: PublicKey;\n  sourceAddress: PublicKey;\n  destinationAddress: PublicKey;\n  transactionResponse: TransactionResponse | null;\n  hasWrappedSOL: boolean;\n}) {\n  let sourceTokenBalanceChange: number | undefined;\n  let destinationTokenBalanceChange: number | undefined;\n\n  if (transactionResponse) {\n    let { meta, transaction } = transactionResponse;\n    if (meta) {\n      sourceTokenBalanceChange =\n        inputMint.equals(WRAPPED_SOL_MINT) && !hasWrappedSOL\n          ? extractSOLChangeFromTransaction(meta, transaction, user)\n          : extractTokenBalanceChangeFromTransaction(meta, transaction, sourceAddress);\n      destinationTokenBalanceChange =\n        outputMint.equals(WRAPPED_SOL_MINT) && !hasWrappedSOL\n          ? extractSOLChangeFromTransaction(meta, transaction, user)\n          : extractTokenBalanceChangeFromTransaction(meta, transaction, destinationAddress);\n    }\n  }\n\n  if (!(sourceTokenBalanceChange && destinationTokenBalanceChange)) {\n    throw new TransactionError(\n      'Cannot find source or destination token account balance change',\n      txid,\n      JUPITER_ERRORS['BalancesNotExtractedProperly'].code,\n    );\n  }\n\n  return [sourceTokenBalanceChange, destinationTokenBalanceChange];\n}\n\nexport function getUnixTs() {\n  return new Date().getTime();\n}\n\nconst SEND_OPTIONS: SendOptions = { skipPreflight: true, maxRetries: 2 };\n\n/**\n * awaits confirmation while resending the transaction periodically\n *\n * Our RPC node settings\n * solana_send_leader_count: 8\n * solana_send_retry_ms: 15000\n **/\nexport async function transactionSenderAndConfirmationWaiter(\n  connection: Connection,\n  signedTransaction: Transaction,\n  timeout = 120_000, // 2 minutes, (sendInterval * sendRetries) = 80_000 + extra wait 40_000\n  pollInterval = 500,\n  sendInterval = 2_000,\n  sendRetries = 40,\n): Promise<{ txid: TransactionSignature; transactionResponse: TransactionResponse | null }> {\n  const rawTransaction = signedTransaction.serialize();\n  const txid = await connection.sendRawTransaction(rawTransaction, SEND_OPTIONS);\n\n  const start = getUnixTs();\n  let lastSendTimestamp = getUnixTs();\n  let retries = 0;\n\n  while (getUnixTs() - start < timeout) {\n    const timestamp = getUnixTs();\n    if (retries < sendRetries && timestamp - lastSendTimestamp > sendInterval) {\n      lastSendTimestamp = timestamp;\n      retries += 1;\n      await connection.sendRawTransaction(rawTransaction, SEND_OPTIONS);\n    }\n    const response = await Promise.any([\n      connection.getTransaction(txid, {\n        commitment: 'confirmed',\n      }),\n      wait(5000),\n    ]);\n    if (response) return { txid, transactionResponse: response };\n    await wait(pollInterval);\n  }\n  return { txid, transactionResponse: null };\n}\n\nexport function getSignature(transaction: Transaction) {\n  const signature = transaction.signature;\n  if (!signature) {\n    throw new Error('Transaction has no signature');\n  }\n  return bs58.encode(signature);\n}\n","// The package is missing cjs. Apache License 2.0\n// https://github.com/ehmicky/fast-cartesian/blob/619a497dffd978fb4a09a83f2ca047915579774f/src/main.js\n\n// Validate 'array()' input\nconst validateInput = function <T>(arrays: T[][]) {\n  if (!Array.isArray(arrays)) {\n    throw new TypeError('Argument must be an array of arrays');\n  }\n\n  arrays.forEach(validateArray);\n  validateDimensions(arrays);\n  validateCombinations(arrays);\n};\n\nconst validateArray = function <T>(array: T[]) {\n  if (!Array.isArray(array)) {\n    throw new TypeError(`Argument must be an array: ${array}`);\n  }\n};\n\n// Maximum number of nested `for` loops. In my machine, it's 604 but it is\n// engine-specific so we use a safe number. Above the limit, a max call stack\n// error is thrown by the engine.\nconst validateDimensions = function <T>({ length }: T[]) {\n  if (length >= MAX_DIMENSIONS) {\n    throw new TypeError(\n      `Too many arrays (${length}): please use the 'big-cartesian' library instead of 'fast-cartesian'`,\n    );\n  }\n};\n\nconst MAX_DIMENSIONS = 1e2;\n\n// Max array size in JavaScript. This is the limit of the final return value.\nconst validateCombinations = function <T>(arrays: T[][]) {\n  const size = arrays.reduce(multiplySize, 1);\n\n  if (size >= MAX_SIZE) {\n    const sizeStr = Number.isFinite(size) ? ` (${size.toExponential(0)})` : '';\n    throw new TypeError(\n      `Too many combinations${sizeStr}: please use the 'big-cartesian' library instead of 'fast-cartesian'`,\n    );\n  }\n};\n\nconst multiplySize = function <T>(size: number, array: T[]) {\n  return size * array.length;\n};\n\nconst MAX_SIZE = 4294967296; // 2 ** 32 = 4,294,967,296\n\n// Does a cartesian product on several arrays.\n// Returns an array with the results.\n// Optimized to be the fastest implementation in JavaScript.\nexport default function fastCartesian<T>(arrays: T[][]): T[][] {\n  validateInput(arrays);\n\n  if (arrays.length === 0) {\n    return [];\n  }\n\n  const loopFunc = getLoopFunc(arrays.length);\n  const result: T[][] = [];\n  loopFunc(arrays, result);\n  return result;\n}\n\nconst getLoopFunc = function (length: number) {\n  const cachedLoopFunc = cache[length];\n\n  if (cachedLoopFunc !== undefined) {\n    return cachedLoopFunc;\n  }\n\n  const loopFunc = mGetLoopFunc(length);\n  // eslint-disable-next-line fp/no-mutation\n  cache[length] = loopFunc;\n  return loopFunc;\n};\n\nconst cache: Record<number, any> = {};\n\n// Create a function with `new Function()` that does:\n//   function(arrays, results) {\n//     for (const value0 of arrays[0]) {\n//       for (const value1 of arrays[1]) {\n//         // and so on\n//         results.push([value0, value1])\n//       }\n//     }\n//   }\nconst mGetLoopFunc = function (length: number) {\n  const indexes = Array.from({ length }, getIndex);\n  const start = indexes.map((index) => `for (const value${index} of arrays[${index}]) {`).join('\\n');\n  const middle = indexes.map((index) => `value${index}`).join(', ');\n  const end = '}\\n'.repeat(length);\n\n  // eslint-disable-next-line no-new-func\n  return new Function('arrays', 'result', `${start}\\nresult.push([${middle}])\\n${end}`);\n};\n\nconst getIndex = function (value: any, index: number) {\n  return String(index);\n};\n","import { Connection, PublicKey } from '@solana/web3.js';\nimport { chunkedGetMultipleAccountInfos } from '../utils/chunkedGetMultipleAccountInfos';\nimport { Amm, SwapMode, Quote } from './amm';\nimport { SplitTradeAmm } from './split-trade/splitTradeAmm';\nimport { isValidRoute, MarketInfo } from './market';\nimport { ammCrossProtocolPairs, isPlatformFeeSupported, Route, RouteInfo, TransactionFeeInfo } from './routes';\nimport { TokenRouteSegments } from './types';\nimport { IS_DEV } from '../constants';\nimport fastCartesian from '../utils/cartesian';\nimport JSBI from 'jsbi';\nimport { ZERO } from '@jup-ag/math';\nimport Decimal from 'decimal.js';\n\nconst PLATFORM_FEE_DENOMINATOR = JSBI.BigInt(10000);\n\nexport async function fetchAccountInfos(connection: Connection, routes: TokenRouteSegments): Promise<void> {\n  const accountInfosMap = new Map();\n\n  const accountsToFetchSet = new Set<string>();\n  const ammMap = new Map<string, Amm>();\n  routes.forEach((innerMap) => {\n    innerMap.forEach((amms) => {\n      amms.forEach((amm) => {\n        ammMap.set(amm.id, amm);\n        amm.getAccountsForUpdate().forEach((account) => {\n          // Only add accountInfos that is not in the Map\n          accountsToFetchSet.add(account.toBase58());\n        });\n      });\n    });\n  });\n\n  const accountsToFetch = Array.from(accountsToFetchSet);\n\n  if (accountsToFetch.length > 0) {\n    const accountInfos = await chunkedGetMultipleAccountInfos(connection, accountsToFetch);\n\n    accountInfos.forEach((item, index) => {\n      const publicKey = accountsToFetch[index];\n      if (item) {\n        accountInfosMap.set(publicKey, item);\n      }\n    });\n\n    ammMap.forEach((amm) => {\n      amm.update(accountInfosMap);\n    });\n  }\n}\n\ninterface GetQuotesParams {\n  inputRouteSegment: TokenRouteSegments;\n  amount: JSBI;\n  inputMint: PublicKey;\n  outputMint: PublicKey;\n  platformFeeBps: number;\n  slippage: number;\n  filterTopNResult?: number;\n  onlyDirectRoutes?: boolean;\n  swapMode: SwapMode;\n  getDepositAndFeeForRoute: (params: {\n    marketInfos: RouteInfo['marketInfos'];\n  }) => Promise<TransactionFeeInfo | undefined>;\n}\n\nfunction getInputOutputId({ inputMint, outputMint }: { inputMint: string; outputMint: string }) {\n  return `${inputMint}-${outputMint}`;\n}\n\nfunction getQuoteId({ ammId, amount }: { ammId: string; amount: JSBI }) {\n  return `${ammId}-${amount.toString()}`;\n}\n\ntype QuoteMap = Map<string, Quote>;\n\nfunction getQuoteAndSortBasedOnOutAmount({\n  amms,\n  inputMint,\n  outputMint,\n  amount,\n  swapMode,\n}: {\n  amms: Amm[];\n  inputMint: string;\n  outputMint: string;\n  amount: JSBI;\n  swapMode: SwapMode;\n}): Array<{ amm: Amm; quote: Quote }> {\n  const quotes = amms\n    .map((amm) => {\n      try {\n        const quote = amm.getQuote({\n          amount,\n          sourceMint: new PublicKey(inputMint),\n          destinationMint: new PublicKey(outputMint),\n          swapMode,\n        });\n        return { quote, amm: amm };\n      } catch (e) {\n        if (IS_DEV) {\n          console.error(e);\n        }\n        return undefined;\n      }\n    })\n    .filter(Boolean)\n    .sort((a, b) =>\n      JSBI.greaterThanOrEqual(b?.quote.outAmount || ZERO, a?.quote.outAmount || ZERO) ? 1 : -1,\n    ) as Array<{\n    amm: Amm;\n    quote: Quote;\n  }>;\n\n  return quotes;\n}\n\n// Change this to support N-1 level of hops\nconst MAX_LEVEL = 2;\n\nexport function processInputRouteSegmentToRoutesInfos({\n  inputRouteSegment,\n  inputMint,\n  outputMint,\n  amount,\n  getDepositAndFeeForRoute,\n  platformFeeBps,\n  slippage,\n  filterTopNResult = 3,\n  onlyDirectRoutes,\n  swapMode,\n}: GetQuotesParams) {\n  const inputMintString = inputMint.toBase58();\n  const outputMintString = outputMint.toBase58();\n  // (InputMint-OutputMint) map to (AmmId-InputAmount) map to Quote from the amm with the inputAmount\n  // this is used to prevent calculation being repeated later on.\n  const tradeIdQuoteMap = new Map<string, Map<string, Quote>>();\n  const inputMintInnerMap = inputRouteSegment.get(inputMintString);\n\n  const routes: Route[] = [];\n\n  if (!inputMintInnerMap) {\n    throw new Error('No routes found for the input and output mints');\n  }\n\n  const maxLevel = onlyDirectRoutes ? 0 : MAX_LEVEL;\n  /*\n   * It get the rate of all single pair that is linked to the inputMint\n   * Example: SOL => USDC, will have direct pair, while\n   *          SOL => USDT, USDT => SOL will have a hop\n   *\n   * So we go through each of the hop and get the top 3 rate and drop others\n   * This will eventually reduce the needs to compute bad rate for the same pair\n   *\n   * The loop below is doing for the inputMint, while the one after is doing for the outputMint.\n   */\n  const walkTheTree = ({\n    inputMint,\n    level = 0,\n    walked = [inputMint],\n  }: {\n    inputMint: string;\n    amount: JSBI;\n    level?: number;\n    walked?: string[];\n  }) => {\n    const inputMintInnerMap = inputRouteSegment.get(inputMint);\n\n    if (inputMintInnerMap) {\n      inputMintInnerMap.forEach((amms, outMint) => {\n        const tradeId = getInputOutputId({\n          inputMint,\n          outputMint: outMint,\n        });\n\n        const sortedQuotesWithAmms = getQuoteAndSortBasedOnOutAmount({\n          amms,\n          inputMint,\n          outputMint: outMint,\n          amount,\n          swapMode,\n        });\n\n        const { filteredAmms, quoteMap } = sortedQuotesWithAmms.reduce(\n          (result, item, idx) => {\n            if (idx < filterTopNResult) {\n              result.filteredAmms.push(item.amm);\n            }\n            result.quoteMap.set(getQuoteId({ ammId: item.amm.id, amount }), item.quote);\n            return result;\n          },\n          { filteredAmms: [] as Amm[], quoteMap: new Map() as QuoteMap },\n        );\n\n        const splitTradeAmms: SplitTradeAmm[] = [];\n        // add split trade in when outputMint match and it's not direct only routes\n        if (outMint === outputMintString && !onlyDirectRoutes) {\n          ammCrossProtocolPairs(filteredAmms.slice(), (firstAmm, secondAmm) => {\n            const splitTradeAmm = SplitTradeAmm.create(firstAmm, secondAmm);\n            if (splitTradeAmm) {\n              splitTradeAmms.push(splitTradeAmm);\n            }\n          });\n        }\n\n        inputMintInnerMap.set(outMint, filteredAmms.concat(splitTradeAmms));\n\n        tradeIdQuoteMap.set(tradeId, quoteMap);\n\n        // keep looping if not walked and not reached max level\n        if (outMint !== outputMintString && quoteMap.size && !walked.includes(outMint) && level < maxLevel - 1) {\n          walkTheTree({\n            inputMint: outMint,\n            amount: quoteMap.values().next().value.outAmount,\n            level: level + 1,\n            walked: walked.concat(outMint),\n          });\n        } else if (outMint === outputMintString) {\n          if (level === 0) {\n            // we need to add the direct routes as it is computed instead of using filteredAmms\n            inputMintInnerMap.set(outMint, sortedQuotesWithAmms.map((item) => item.amm).concat(splitTradeAmms));\n          }\n\n          // if output reached, we add the route\n          const mints = walked.concat(outMint);\n          const _mints = mints.map((i) => new PublicKey(i));\n          const ammsArr = mints.reduce((amms, _, index) => {\n            if (index < mints.length - 1) {\n              amms.push(inputRouteSegment.get(mints[index])?.get(mints[index + 1])!);\n            }\n            return amms;\n          }, [] as Amm[][]);\n\n          const permutations: Amm[][] = fastCartesian(ammsArr);\n\n          permutations.forEach((item) => {\n            if (item.length === 1 || isValidRoute(item[0], item[1])) {\n              routes.push({\n                amms: item,\n                mints: _mints,\n              });\n            }\n          });\n        }\n      });\n    }\n  };\n\n  walkTheTree({\n    inputMint: inputMintString,\n    amount,\n  });\n\n  const routesInfo: RouteInfo[] = routes\n    .map((route) => {\n      const { amms, mints } = route;\n\n      // Chain all amms\n      let marketInfos: MarketInfo[] = [];\n      let intermediateAmount = amount;\n      let otherAmountThreshold = ZERO;\n      const platformFeeSupported = isPlatformFeeSupported(swapMode, amms);\n      const tokenMints: PublicKey[] = mints;\n\n      const legs = amms.length;\n      for (const [i, amm] of amms.entries()) {\n        try {\n          const sourceMint = tokenMints[i];\n          const destinationMint = tokenMints[i + 1];\n\n          const tradeId = getInputOutputId({\n            inputMint: sourceMint.toBase58(),\n            outputMint: destinationMint.toBase58(),\n          });\n\n          const cacheQuote = tradeIdQuoteMap\n            .get(tradeId)\n            ?.get(getQuoteId({ ammId: amm.id, amount: intermediateAmount }));\n\n          const quote =\n            cacheQuote ||\n            amm.getQuote({\n              sourceMint,\n              destinationMint,\n              amount: intermediateAmount,\n              swapMode,\n            });\n\n          // Platform fee applicable only on last leg\n          const isLastLeg = legs - 1 === i;\n          const platformFee =\n            isLastLeg && platformFeeSupported\n              ? {\n                  amount: JSBI.divide(\n                    JSBI.multiply(quote.outAmount, JSBI.BigInt(platformFeeBps)),\n                    PLATFORM_FEE_DENOMINATOR,\n                  ),\n                  mint: destinationMint.toBase58(),\n                  pct: platformFeeBps / 100,\n                }\n              : { amount: ZERO, mint: destinationMint.toBase58(), pct: 0 };\n\n          const amountForFees = swapMode === SwapMode.ExactIn ? quote.outAmount : quote.inAmount;\n          let amountAfterFees =\n            swapMode === SwapMode.ExactIn\n              ? JSBI.subtract(amountForFees, platformFee.amount)\n              : JSBI.add(amountForFees, platformFee.amount);\n\n          if (JSBI.lessThan(amountAfterFees, ZERO)) {\n            amountAfterFees = ZERO;\n          }\n\n          const legOtherAmountThreshold = JSBI.BigInt(\n            swapMode === SwapMode.ExactIn\n              ? new Decimal(amountAfterFees.toString()).mul(1 - slippage / 100).ceil()\n              : new Decimal(amountAfterFees.toString()).mul(1 + slippage / 100).floor(),\n          );\n\n          const [inAmount, outAmount] =\n            swapMode === SwapMode.ExactIn ? [quote.inAmount, amountAfterFees] : [amountAfterFees, intermediateAmount];\n\n          marketInfos.push({\n            amm,\n            inputMint: sourceMint,\n            outputMint: destinationMint,\n            notEnoughLiquidity: quote.notEnoughLiquidity,\n            minInAmount: quote.minInAmount,\n            minOutAmount: quote.minOutAmount,\n            inAmount,\n            outAmount,\n            priceImpactPct: quote.priceImpactPct,\n            lpFee: {\n              amount: quote.feeAmount,\n              mint: quote.feeMint,\n              pct: quote.feePct,\n            },\n            platformFee,\n          });\n\n          intermediateAmount = swapMode === SwapMode.ExactIn ? amountAfterFees : amount;\n          otherAmountThreshold = legOtherAmountThreshold;\n        } catch (e: any) {\n          if (IS_DEV) {\n            console.error(e);\n          }\n\n          return undefined;\n        }\n      }\n\n      return {\n        marketInfos,\n        getDepositAndFee: () => getDepositAndFeeForRoute({ marketInfos }),\n        inAmount: marketInfos[0].inAmount,\n        outAmount: intermediateAmount,\n        amount,\n        otherAmountThreshold,\n        swapMode,\n        priceImpactPct:\n          1 -\n          marketInfos.reduce((priceFactor, marketInfo) => {\n            priceFactor *= 1 - marketInfo.priceImpactPct;\n            return priceFactor;\n          }, 1),\n      };\n    })\n    .filter((item): item is RouteInfo => item !== undefined)\n    .sort((a, b) => (JSBI.greaterThanOrEqual(b.outAmount, a.outAmount) ? 1 : -1)); // sort based on which one have better output\n\n  return routesInfo;\n}\n","import { parseErrorForTransaction, TransactionError, UNKNOWN_ERROR } from '@mercurial-finance/optimist';\nimport { TransactionResponse } from '@solana/web3.js';\nimport { ErrorDetails, JUPITER_ERRORS } from '../../constants';\nimport { JUPITER_PROGRAM_ID } from '../../lib/jupiterInstruction';\n\nconst codeToErrorRecord = Object.values(JUPITER_ERRORS).reduce((record, error) => {\n  record[error.code] = error;\n  return record;\n}, {} as Record<number, ErrorDetails>);\n\n// Throws when not found or contains error to satisfy upper control flow\nexport async function validateTransactionResponse({\n  txid,\n  transactionResponse,\n}: {\n  txid: string;\n  transactionResponse: TransactionResponse | null;\n}): Promise<TransactionResponse | TransactionError | null> {\n  if (!transactionResponse) {\n    return new TransactionError('Transaction was not confirmed', txid);\n  }\n  if (transactionResponse?.meta?.err) {\n    let { message, programId, code } = parseErrorForTransaction(transactionResponse);\n\n    if (programId === JUPITER_PROGRAM_ID.toBase58() && code) {\n      message = codeToErrorRecord[code]?.msg;\n    }\n\n    if (!message) {\n      message = UNKNOWN_ERROR;\n    }\n\n    return new TransactionError(message || '', txid, code);\n  }\n  return transactionResponse;\n}\n","import fetch from 'cross-fetch';\n\ntype Address = string;\n\nexport async function getTopTokens() {\n  const topTokens = (await (await fetch('https://cache.jup.ag/top-tokens')).json()) as Address[];\n\n  return new Set(topTokens.filter((_, idx) => idx < 60));\n}\n","export interface IndexedRouteMap {\n  mintKeys: string[];\n  indexedRouteMap: { [key: number]: number[] };\n}\n\nfunction getOrAddKeyToIndexMap(pk: string, mintToIndexMap: Map<string, number>): number {\n  let keyIndex = mintToIndexMap.get(pk);\n  if (keyIndex === undefined) {\n    keyIndex = mintToIndexMap.size;\n    mintToIndexMap.set(pk, keyIndex);\n  }\n  return keyIndex;\n}\n\n/** An indexed route map which is light (less data to compress/decompress) and can quickly be inflated into the full route map  */\nexport function routeMapToIndexedRouteMap(routeMap: Map<string, string[]>) {\n  const { mintToIndexMap, indexedRouteMap: innerIndexedRouteMap } = Array.from(routeMap).reduce<{\n    mintToIndexMap: Map<string, number>;\n    indexedRouteMap: Record<number, number[]>;\n  }>(\n    ({ mintToIndexMap, indexedRouteMap }, [key, item]) => {\n      const keyIndex = getOrAddKeyToIndexMap(key, mintToIndexMap);\n\n      const indexedOutputMintCache = [];\n      for (const routeOutputKey of item) {\n        const routeOutputKeyIndex = getOrAddKeyToIndexMap(routeOutputKey, mintToIndexMap);\n        indexedOutputMintCache.push(routeOutputKeyIndex);\n      }\n      indexedRouteMap[keyIndex] = indexedOutputMintCache;\n\n      return { mintToIndexMap, indexedRouteMap };\n    },\n    { mintToIndexMap: new Map(), indexedRouteMap: {} },\n  );\n\n  const indexedRouteMap = {\n    mintKeys: [...mintToIndexMap.keys()],\n    indexedRouteMap: innerIndexedRouteMap,\n  };\n\n  return indexedRouteMap;\n}\n\nexport function indexedRouteMapToRouteMap(indexedRouteMap: IndexedRouteMap) {\n  const getMint = (index: number) => indexedRouteMap.mintKeys[index];\n\n  // generate route map by replacing indexes with mint addresses\n  const generatedRouteMap: Map<string, string[]> = new Map();\n  Object.keys(indexedRouteMap.indexedRouteMap).forEach((key) => {\n    generatedRouteMap.set(\n      getMint(key as any as number),\n      indexedRouteMap['indexedRouteMap'][key as any as number].map((index: number) => getMint(index)),\n    );\n  });\n\n  return generatedRouteMap;\n}\n","import { ASSOCIATED_TOKEN_PROGRAM_ID, Token, TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport {\n  BlockhashWithExpiryBlockHeight,\n  Cluster,\n  Connection,\n  FeeCalculator,\n  Keypair,\n  PublicKey,\n  Transaction,\n  TransactionResponse,\n  TransactionSignature,\n} from '@solana/web3.js';\n\nimport { OpenOrders } from '@project-serum/serum';\nimport {\n  computeInputRouteSegments,\n  computeRouteMap,\n  fetchMarketCache,\n  getAllAmms,\n  getTokenRouteSegments,\n  isSplitSetupRequired,\n  RouteInfo,\n} from './routes';\nimport { MarketInfo } from './market';\nimport {\n  DEVNET_SERUM_DEX_PROGRAM,\n  JUPITER_WALLET,\n  MAINNET_SERUM_DEX_PROGRAM,\n  WRAPPED_SOL_MINT,\n  MARKETS_URL,\n  SWAP_PROTOCOL_TOKENS,\n  INDEXED_ROUTE_MAP_URL,\n} from '../constants';\nimport { getDepositAndFeeFromInstructions, NO_PLATFORM_FEE } from './fee';\nimport routeToInstructions, { routeAtaInstructions } from './routeToInstructions';\nimport { getOrCreateOpenOrdersAddress } from './serum/openOrders';\nimport { createAndCloseWSOLAccount } from '../utils/token';\nimport { getEmptyInstruction, Instruction } from '../utils/instruction';\nimport { TransactionBuilder } from '../utils/TransactionBuilder';\nimport { Owner } from '../utils/Owner';\nimport {\n  getSignature,\n  getTokenBalanceChangesFromTransactionResponse,\n  transactionSenderAndConfirmationWaiter,\n} from '../utils/transactionHelpers';\nimport { createInitializeTokenLedgerInstruction, TOKEN_LEDGER } from './jupiterInstruction';\nimport { fetchAccountInfos, processInputRouteSegmentToRoutesInfos } from './computeRouteInfos';\nimport type { SignerWalletAdapter } from '@solana/wallet-adapter-base';\nimport { TokenRouteSegments, PlatformFeeAndAccounts, QuoteMintToReferrer } from './types';\nimport { SerumAmm } from './serum/serumAmm';\nimport { SaberAmm } from './saber/saberAmm';\nimport { SplTokenSwapAmm } from './spl-token-swap/splTokenSwapAmm';\nimport { MercurialAmm } from './mercurial/mercurialAmm';\nimport { AldrinAmm } from './aldrin/aldrinAmm';\nimport { RaydiumAmm } from './raydium/raydiumAmm';\nimport { CropperAmm } from './cropper/cropperAmm';\nimport { SenchaAmm } from './sencha/senchaAmm';\nimport { SplitTradeAmm } from './split-trade/splitTradeAmm';\nimport { TokenMintAddress, SetupInstructions } from './types';\nimport { getPlatformFeeAccounts } from './fee';\nimport { Amm, SwapMode } from './amm';\nimport { validateTransactionResponse } from '../utils/tx/errors';\nimport { TransactionError } from '@mercurial-finance/optimist';\nimport { getSaberWrappedDecimalsAmms, SaberAddDecimalsAmm } from './saber/saberAddDecimalsAmm';\nimport { getTopTokens } from './getTopTokens';\nimport { WhirlpoolAmm } from './whirlpool/whirlpoolAmm';\nimport { CykuraAmm } from './cykura/cykuraAmm';\nimport JSBI from 'jsbi';\nimport { indexedRouteMapToRouteMap, IndexedRouteMap } from '../utils/indexedRouteMap';\nimport fetch from 'cross-fetch';\n\nexport type SerumOpenOrdersMap = Map<string, PublicKey>;\nexport { MarketInfo } from './market';\nexport { getPlatformFeeAccounts } from './fee';\nexport * from './types';\nexport { transactionSenderAndConfirmationWaiter } from '../utils/transactionHelpers';\nexport { routeMapToIndexedRouteMap, indexedRouteMapToRouteMap, IndexedRouteMap } from '../utils/indexedRouteMap';\nexport { RouteInfo, TransactionFeeInfo, getRouteInfoUniqueId } from './routes';\nexport { getSaberWrappedDecimalsAmms, TransactionError };\nexport {\n  Amm,\n  AldrinAmm,\n  CykuraAmm,\n  RaydiumAmm,\n  SerumAmm,\n  SaberAmm,\n  SplTokenSwapAmm,\n  MercurialAmm,\n  CropperAmm,\n  SenchaAmm,\n  SaberAddDecimalsAmm,\n  SplitTradeAmm,\n  WhirlpoolAmm,\n  SwapMode,\n};\n\nexport type SwapResult =\n  | {\n      txid: string;\n      inputAddress: PublicKey;\n      outputAddress: PublicKey;\n      inputAmount: number;\n      outputAmount: number;\n    }\n  | {\n      error?: TransactionError;\n    };\n\ntype InputMintAndOutputMint = string;\n\nexport type JupiterLoadParams = {\n  connection: Connection;\n  cluster: Cluster;\n  user?: PublicKey | Keypair;\n  platformFeeAndAccounts?: PlatformFeeAndAccounts;\n  /** See {@link Jupiter.quoteMintToReferrer} */\n  quoteMintToReferrer?: Map<TokenMintAddress, PublicKey>;\n  /** See {@link Jupiter.routeCacheDuration} */\n  routeCacheDuration?: number;\n  /** See {@link Jupiter.wrapUnwrapSOL} */\n  wrapUnwrapSOL?: boolean;\n  /** A markets cache URL, default to jupiter markets cache */\n  marketUrl?: string;\n  /**\n   * On multi-leg trades, the intermediate tokens is restricted to X top tokens in volume and certain utility tokens (Saber wrapped decimal tokens)\n   * This is to reduce the load by having to compute trades through routes that are not so liquid\n   */\n  restrictIntermediateTokens?: boolean;\n  /** See {@link Jupiter.tokenLedger}, default to the standard Jupiter token ledger */\n  tokenLedger?: PublicKey;\n  /** See {@link Jupiter.shouldLoadSerumOpenOrders}, default to true */\n  shouldLoadSerumOpenOrders?: boolean;\n};\n\nexport type OnTransaction = (\n  txid: TransactionSignature,\n  totalTxs: number,\n  txDescription: IConfirmationTxDescription,\n  awaiter: Promise<TransactionResponse | TransactionError | null>,\n) => void;\n\nexport type IConfirmationTxDescription = 'SETUP' | 'SWAP' | 'CLEANUP';\ntype ExecuteParams = {\n  wallet?: Pick<SignerWalletAdapter, 'sendTransaction' | 'signAllTransactions' | 'signTransaction'>;\n  /**\n   * Allows to customize control of sending and awaiting confirmation in the single/multi transaction flow\n   */\n  onTransaction?: OnTransaction;\n};\n\nexport class Jupiter {\n  /* promise because we can choose not to await it when we dont need it */\n  private serumOpenOrdersPromise: Promise<SerumOpenOrdersMap> | undefined = undefined;\n  private user: Keypair | PublicKey | undefined;\n  private routeCache = new Map<InputMintAndOutputMint, { fetchTimestamp: number }>();\n\n  constructor(\n    private connection: Connection,\n    private cluster: Cluster,\n    public tokenRouteSegments: TokenRouteSegments,\n    private feeCalculator: FeeCalculator,\n    private platformFeeAndAccounts: PlatformFeeAndAccounts,\n    /** Referrer account to collect Serum referrer fees for each given quote mint, the referrer fee is 20% of the Serum protocol fee */\n    private quoteMintToReferrer: QuoteMintToReferrer,\n    /**\n     * -1, it will not fetch when shouldFetch == false\n     * 0, it will fetch everytime\n     * A duration in ms, the time interval between AMM accounts refetch, recommendation for a UI 20 seconds,\n     */\n    private routeCacheDuration: number = 0,\n    /** When set to true (default) native SOL is wrapped and wSOL unwrapped in each swap, otherwise it assumes wSOL is funded when it exists */\n    private wrapUnwrapSOL: boolean = true,\n    /** A token ledger which can be used to track volume as it can be made unique per platform, also alleviates write locks on a single token ledger account */\n    private tokenLedger: PublicKey,\n    private intermediateTokens: TokenMintAddress[] | undefined,\n    /** Perform a getProgramAccounts on user's serum open orders. Recomended to turn off if RPC is slow to perform a gPA */\n    private shouldLoadSerumOpenOrders: boolean,\n  ) {}\n\n  /**\n   * load performs the necessary async scaffolding of the Jupiter object\n   */\n  static async load({\n    connection,\n    cluster,\n    user,\n    platformFeeAndAccounts = NO_PLATFORM_FEE,\n    quoteMintToReferrer,\n    routeCacheDuration = 0,\n    wrapUnwrapSOL = true,\n    // @internal,\n    marketUrl,\n    restrictIntermediateTokens = false,\n    tokenLedger = TOKEN_LEDGER,\n    shouldLoadSerumOpenOrders = true,\n  }: JupiterLoadParams) {\n    const [\n      tokenRouteSegments,\n      {\n        value: { feeCalculator },\n      },\n      _quoteMintToReferrer,\n      intermediateTokens,\n    ] = await Promise.all([\n      Jupiter.fetchTokenRouteSegments(connection, cluster, marketUrl),\n      connection.getRecentBlockhashAndContext('processed'),\n      quoteMintToReferrer ?? getPlatformFeeAccounts(connection, new PublicKey(JUPITER_WALLET)),\n      restrictIntermediateTokens ? Jupiter.getIntermediateTokens() : undefined,\n    ]);\n\n    const jupiter = new Jupiter(\n      connection,\n      cluster,\n      tokenRouteSegments,\n      feeCalculator,\n      platformFeeAndAccounts,\n      _quoteMintToReferrer,\n      routeCacheDuration,\n      wrapUnwrapSOL,\n      tokenLedger,\n      intermediateTokens,\n      shouldLoadSerumOpenOrders,\n    );\n    if (user) jupiter.setUserPublicKey(user);\n    return jupiter;\n  }\n\n  getAccountToAmmMap() {\n    const accountToAmmMap = new Map<string, Amm>();\n    this.tokenRouteSegments.forEach((tokenRouteSegment) => {\n      Array.from(tokenRouteSegment.values()).forEach((marketInfos) => {\n        marketInfos.forEach((amm) => {\n          amm.getAccountsForUpdate().forEach((account) => {\n            accountToAmmMap.set(account.toBase58(), amm);\n          });\n        });\n      });\n    });\n    return accountToAmmMap;\n  }\n\n  getAmmIdToAmmMap() {\n    const ammIdToAmmMap = new Map<string, Amm>();\n\n    this.tokenRouteSegments.forEach((tokenRouteSegment) => {\n      Array.from(tokenRouteSegment.values()).forEach((marketInfos) => {\n        marketInfos.forEach((amm) => {\n          ammIdToAmmMap.set(amm.id, amm);\n        });\n      });\n    });\n\n    return ammIdToAmmMap;\n  }\n\n  public getDepositAndFees = async ({\n    marketInfos,\n    userPublicKey,\n    /**\n     * We can use Jupiter.findSerumOpenOrdersForOwner for this, if we want to reuse existing user serum open orders.\n     */\n    serumOpenOrdersPromise = Promise.resolve(new Map()),\n  }: {\n    marketInfos: MarketInfo[];\n    userPublicKey: PublicKey;\n    serumOpenOrdersPromise?: Promise<SerumOpenOrdersMap>;\n  }) => {\n    return getDepositAndFeeFromInstructions({\n      connection: this.connection,\n      feeCalculator: this.feeCalculator,\n      inputMint: marketInfos[0].inputMint,\n      marketInfos,\n      serumOpenOrdersPromise,\n      owner: new Owner(userPublicKey),\n      wrapUnwrapSOL: this.wrapUnwrapSOL,\n    });\n  };\n\n  private getDepositAndFeesForUser = ({ marketInfos }: { marketInfos: MarketInfo[] }) => {\n    if (this.user && this.serumOpenOrdersPromise) {\n      const user = new Owner(this.user);\n\n      return this.getDepositAndFees({\n        marketInfos,\n        userPublicKey: user.publicKey,\n        serumOpenOrdersPromise: this.serumOpenOrdersPromise,\n      });\n    }\n    return Promise.resolve(undefined);\n  };\n\n  async computeRoutes({\n    inputMint,\n    outputMint,\n    amount,\n    slippage,\n    feeBps = 0,\n    forceFetch,\n    onlyDirectRoutes,\n    swapMode = SwapMode.ExactIn,\n    filterTopNResult,\n  }: {\n    inputMint: PublicKey;\n    outputMint: PublicKey;\n    amount: JSBI;\n    slippage: number;\n    feeBps?: number;\n    forceFetch?: boolean;\n    onlyDirectRoutes?: boolean;\n    swapMode?: SwapMode;\n    /**\n     * filter how many top individual route to be used to compared\n     */\n    filterTopNResult?: number;\n  }) {\n    const inputMintString = inputMint.toBase58();\n    const outputMintString = outputMint.toBase58();\n\n    // Platform fee can only be applied when fee account exists\n    const platformFeeBps =\n      feeBps ||\n      (this.platformFeeAndAccounts.feeAccounts.get(outputMintString) ? this.platformFeeAndAccounts.feeBps : 0);\n\n    const now = new Date().getTime();\n\n    // do sort so that it's always the same order for the same inputMint and outputMint and vice versa\n    const inputMintAndOutputMint = [inputMintString, outputMintString].sort((a, b) => a.localeCompare(b)).join('');\n\n    const routeCache = this.routeCache.get(inputMintAndOutputMint);\n\n    const inputRouteSegment = computeInputRouteSegments({\n      inputMint: inputMintString,\n      outputMint: outputMintString,\n      tokenRouteSegments: this.tokenRouteSegments,\n      intermediateTokens: this.intermediateTokens,\n      onlyDirectRoutes,\n      swapMode,\n    });\n\n    let shouldBustCache = false;\n    // special -1 condition to not fetch\n    if (this.routeCacheDuration === -1) {\n      shouldBustCache = false;\n    } else if (this.routeCacheDuration === 0) {\n      shouldBustCache = true;\n    } else {\n      if (routeCache) {\n        const { fetchTimestamp } = routeCache;\n        if (now - fetchTimestamp > this.routeCacheDuration) {\n          shouldBustCache = true;\n        }\n      } else {\n        shouldBustCache = true;\n      }\n    }\n\n    if (forceFetch || shouldBustCache) {\n      await fetchAccountInfos(this.connection, inputRouteSegment);\n      this.routeCache.set(inputMintAndOutputMint, {\n        fetchTimestamp: new Date().getTime(),\n      });\n    }\n\n    try {\n      const routesInfos = processInputRouteSegmentToRoutesInfos({\n        inputRouteSegment,\n        inputMint,\n        outputMint,\n        amount,\n        getDepositAndFeeForRoute: this.getDepositAndFeesForUser,\n        onlyDirectRoutes,\n        slippage,\n        platformFeeBps,\n        filterTopNResult,\n        swapMode,\n      });\n\n      return {\n        routesInfos,\n        /* indicate if the result is fetched or get from cache */\n        cached: !(forceFetch || shouldBustCache),\n      };\n    } catch (e) {\n      throw e;\n    } finally {\n      // clear cache if it is expired\n      this.routeCache.forEach(({ fetchTimestamp }, key) => {\n        if (fetchTimestamp - now > this.routeCacheDuration) {\n          this.routeCache.delete(key);\n        }\n      });\n    }\n  }\n\n  setUserPublicKey(userPublicKey: Keypair | PublicKey) {\n    this.user = userPublicKey;\n    const owner = new Owner(this.user);\n    this.serumOpenOrdersPromise = this.shouldLoadSerumOpenOrders\n      ? Jupiter.findSerumOpenOrdersForOwner({\n          connection: this.connection,\n          cluster: this.cluster,\n          userPublicKey: owner.publicKey,\n        })\n      : Promise.resolve(new Map());\n  }\n\n  /**\n   * The token route segments contains all the routes and the market meta information.\n   */\n  static async fetchTokenRouteSegments(connection: Connection, cluster: Cluster, marketUrl?: string) {\n    const marketCaches = await fetchMarketCache(marketUrl || MARKETS_URL[cluster]);\n    const amms = await getAllAmms(connection, marketCaches);\n\n    const tokenRouteSegments = getTokenRouteSegments(amms);\n\n    return tokenRouteSegments;\n  }\n\n  /**\n   * This generate a routeMap which represents every possible output token mint for a given input token mint.\n   * For example, we have SOL to USDC and this pairs have many routings like\n   * SOL => USDT\n   * USDT => USDC\n   * SOL => USDC\n   *\n   * From here we know that we can have 2 different routing of SOL => USDC.\n   * We do single level routing map but for all coins which result in the route map below:\n   * SOL => USDT, USDC\n   * USDT => SOL\n   * USDC => SOL, USDT\n   *\n   * From this route map we can map out all possible route from one to another by checking the intersection.\n   */\n  getRouteMap(onlyDirectRoutes?: boolean) {\n    return computeRouteMap(this.tokenRouteSegments, this.intermediateTokens, onlyDirectRoutes);\n  }\n\n  static async getRemoteRouteMap(\n    {\n      onlyDirectRoutes,\n      restrictIntermediateTokens,\n    }: { onlyDirectRoutes?: boolean; restrictIntermediateTokens?: boolean },\n    indexedRouteMapUrl?: string,\n  ) {\n    let url = indexedRouteMapUrl || INDEXED_ROUTE_MAP_URL;\n    if (onlyDirectRoutes) {\n      url = url.concat('?onlyDirectRoutes=true');\n    } else if (restrictIntermediateTokens) {\n      url = url.concat('?restrictIntermediateTokens=true');\n    }\n\n    const indexedRouteMap = (await (await fetch(url)).json()) as IndexedRouteMap;\n\n    return indexedRouteMapToRouteMap(indexedRouteMap);\n  }\n\n  /**\n   * Query existing open order account, this query is slow.\n   * We suggest to fetch this in the background.\n   */\n  static findSerumOpenOrdersForOwner = async ({\n    userPublicKey,\n    cluster,\n    connection,\n  }: {\n    userPublicKey: PublicKey;\n    cluster: Cluster;\n    connection: Connection;\n  }) => {\n    const newMarketToOpenOrdersAddress: SerumOpenOrdersMap = new Map();\n\n    if (userPublicKey) {\n      const programId = cluster === 'mainnet-beta' ? MAINNET_SERUM_DEX_PROGRAM : DEVNET_SERUM_DEX_PROGRAM;\n\n      const allOpenOrders = await OpenOrders.findForOwner(connection, userPublicKey, programId);\n\n      allOpenOrders.forEach((openOrders) => {\n        newMarketToOpenOrdersAddress.set(openOrders.market.toString(), openOrders.address);\n      });\n    }\n    return newMarketToOpenOrdersAddress;\n  };\n\n  public exchange: (params: {\n    routeInfo: RouteInfo;\n    /**\n     * This will overwrite the default Jupiter.setUser, useful for stateless usage like API\n     */\n    userPublicKey?: PublicKey;\n    /**\n     * This will overwrite the default token ledger, useful for stateless usage like API\n     */\n    tokenLedger?: PublicKey;\n    /**\n     * This will overwrite the default fee account, useful for stateless usage like API\n     */\n    feeAccount?: PublicKey;\n    /**\n     * This will overwrite the default wrapUnwrapSOL, useful for stateless usage like API\n     */\n    wrapUnwrapSOL?: boolean;\n    /**\n     * The transaction will use the blockhash and valid blockheight to create transaction\n     */\n    blockhashWithExpiryBlockHeight?: BlockhashWithExpiryBlockHeight;\n  }) => Promise<{\n    transactions: {\n      setupTransaction?: Transaction;\n      swapTransaction: Transaction;\n      cleanupTransaction?: Transaction;\n    };\n    execute: (params?: ExecuteParams) => Promise<SwapResult>;\n  }> = async ({ routeInfo, userPublicKey, feeAccount, wrapUnwrapSOL, tokenLedger, blockhashWithExpiryBlockHeight }) => {\n    const { connection, serumOpenOrdersPromise } = this;\n    const user: PublicKey | Keypair | undefined = userPublicKey || this.user;\n    if (!user) {\n      throw new Error('user not found');\n    }\n\n    const owner = new Owner(user);\n\n    const lastMarketInfoIndex = routeInfo.marketInfos.length - 1;\n    const inputMint = routeInfo.marketInfos[0].inputMint;\n    const outputMint = routeInfo.marketInfos[lastMarketInfoIndex].outputMint;\n    const _wrapUnwrapSOL = wrapUnwrapSOL ?? this.wrapUnwrapSOL;\n\n    const [sourceInstruction, ataInstructions, openOrdersInstructions] = await Promise.all([\n      inputMint.equals(WRAPPED_SOL_MINT) && _wrapUnwrapSOL\n        ? createAndCloseWSOLAccount({\n            connection,\n            owner,\n            amount: routeInfo.swapMode === SwapMode.ExactIn ? routeInfo.amount : routeInfo.otherAmountThreshold,\n          })\n        : Token.getAssociatedTokenAddress(\n            ASSOCIATED_TOKEN_PROGRAM_ID,\n            TOKEN_PROGRAM_ID,\n            inputMint,\n            owner.publicKey,\n            true,\n          ).then((address) => ({\n            ...getEmptyInstruction(),\n            address,\n          })),\n      routeAtaInstructions({ connection, marketInfos: routeInfo.marketInfos, owner, unwrapSOL: _wrapUnwrapSOL }),\n      Promise.all(\n        routeInfo.marketInfos.map(async ({ amm }) => {\n          if (amm instanceof SerumAmm || amm instanceof SplitTradeAmm) {\n            if (!amm.market) return;\n            return await getOrCreateOpenOrdersAddress(\n              connection,\n              owner.publicKey,\n              amm.market,\n              await serumOpenOrdersPromise,\n            );\n          }\n          return;\n        }),\n      ),\n    ]);\n\n    const instructions = {\n      intermediate: ataInstructions.userIntermediaryTokenAccountResult,\n      destination: ataInstructions.userDestinationTokenAccountResult,\n      openOrders: openOrdersInstructions,\n    };\n\n    const hasOpenOrders = instructions.openOrders.filter(Boolean).length > 0;\n\n    // Construct platform fee\n    feeAccount = feeAccount || this.platformFeeAndAccounts.feeAccounts.get(outputMint.toBase58());\n\n    const platformFee = feeAccount\n      ? {\n          feeBps:\n            this.platformFeeAndAccounts.feeBps ||\n            Math.floor(routeInfo.marketInfos[lastMarketInfoIndex].platformFee.pct * 100),\n          feeAccount,\n        }\n      : undefined;\n\n    const preparedInstructions = await routeToInstructions({\n      user: owner,\n      tokenLedger: tokenLedger || this.tokenLedger,\n      openOrdersAddresses: instructions.openOrders.map((oo) => oo?.address),\n      userSourceTokenAccountAddress: sourceInstruction.address,\n      userIntermediaryTokenAccountAddress: instructions.intermediate?.address,\n      userDestinationTokenAccountAddress: instructions.destination.address,\n      routeInfo,\n      platformFee,\n      quoteMintToReferrer: this.quoteMintToReferrer,\n    });\n\n    const { needCleanup, needSetup } = isSplitSetupRequired(routeInfo.marketInfos, {\n      hasSerumOpenOrderInstruction: hasOpenOrders,\n    });\n\n    const setupTransactionBuilder = new TransactionBuilder(connection, owner.publicKey, owner);\n\n    const transactionBuilder = new TransactionBuilder(connection, owner.publicKey, owner);\n\n    const cleanupTransactionBuilder = new TransactionBuilder(connection, owner.publicKey, owner);\n\n    const ixs = [\n      instructions.intermediate,\n      sourceInstruction,\n      // if source address the same as destination address, then we don't need to setup or cleanup twice, mainly SOL-SOL\n      !instructions.destination.address.equals(sourceInstruction.address) && instructions.destination,\n    ];\n\n    if (needSetup) {\n      if (hasOpenOrders) {\n        instructions.openOrders.forEach((openOrders) => {\n          if (openOrders) {\n            setupTransactionBuilder.addInstruction(openOrders);\n          }\n        });\n      }\n\n      ixs.forEach((instruction) => {\n        if (instruction) {\n          // we cannot put cleanup here because we cannot do cleanup in setupTransaction\n          setupTransactionBuilder.addInstruction({\n            ...instruction,\n            cleanupInstructions: [],\n          });\n\n          if (instruction.cleanupInstructions.length) {\n            const cleanupIx = {\n              ...getEmptyInstruction(),\n              cleanupInstructions: instruction.cleanupInstructions,\n            };\n            if (needCleanup) {\n              cleanupTransactionBuilder.addInstruction(cleanupIx);\n            } else {\n              transactionBuilder.addInstruction(cleanupIx);\n            }\n          }\n        }\n      });\n    } else {\n      if (hasOpenOrders) {\n        instructions.openOrders.forEach((openOrders) => {\n          if (openOrders) {\n            transactionBuilder.addInstruction(openOrders);\n          }\n        });\n      }\n\n      ixs.forEach((instruction) => {\n        if (instruction) {\n          transactionBuilder.addInstruction(instruction);\n        }\n      });\n    }\n\n    transactionBuilder.addInstruction(preparedInstructions);\n\n    blockhashWithExpiryBlockHeight =\n      blockhashWithExpiryBlockHeight || (await this.connection.getLatestBlockhash('confirmed'));\n\n    const { transaction: setupTransaction } = await setupTransactionBuilder.build(blockhashWithExpiryBlockHeight);\n\n    const { transaction } = await transactionBuilder.build(blockhashWithExpiryBlockHeight);\n\n    const { transaction: cleanupTransaction } = await cleanupTransactionBuilder.build(blockhashWithExpiryBlockHeight);\n\n    const [setupTransactionObject, swapTransactionObject, cleanupTransactionObject] = [\n      setupTransaction.instructions.length ? setupTransaction : undefined,\n      transaction,\n      cleanupTransaction.instructions.length ? cleanupTransaction : undefined,\n    ];\n\n    const setupInstructions = instructions;\n    return {\n      transactions: {\n        setupTransaction: setupTransactionObject,\n        swapTransaction: swapTransactionObject,\n        cleanupTransaction: cleanupTransactionObject,\n      },\n      execute: ({ wallet, onTransaction }: ExecuteParams = {}) =>\n        this.executeInternal({\n          wallet,\n          onTransaction,\n          inputMint,\n          outputMint,\n          sourceInstruction,\n          setupInstructions,\n          setupTransaction: setupTransactionObject,\n          swapTransaction: swapTransactionObject,\n          cleanupTransaction: cleanupTransactionObject,\n          wrapUnwrapSOL: _wrapUnwrapSOL,\n          owner,\n        }),\n    };\n  };\n\n  /** sign, send and await confirmation for an exchange */\n  private async executeInternal({\n    wallet,\n    onTransaction,\n    inputMint,\n    outputMint,\n    sourceInstruction,\n    setupInstructions,\n    setupTransaction,\n    swapTransaction,\n    cleanupTransaction,\n    owner,\n    wrapUnwrapSOL,\n  }: {\n    wallet: ExecuteParams['wallet'];\n    onTransaction?: OnTransaction;\n    inputMint: PublicKey;\n    outputMint: PublicKey;\n    sourceInstruction: Instruction & { address: PublicKey };\n    setupInstructions: SetupInstructions;\n    setupTransaction?: Transaction;\n    swapTransaction: Transaction;\n    cleanupTransaction?: Transaction;\n    wrapUnwrapSOL?: boolean;\n    owner: Owner;\n  }): Promise<SwapResult> {\n    let swapError: TransactionError | undefined = undefined;\n    let swapResult: SwapResult | undefined = undefined;\n\n    try {\n      const transactions = [setupTransaction, swapTransaction, cleanupTransaction].filter(\n        (tx): tx is Transaction => tx !== undefined,\n      );\n\n      const totalTxs = transactions.length;\n\n      if (owner.signer) {\n        const signer = owner.signer;\n        transactions.forEach((transaction) => {\n          transaction.sign(signer);\n        });\n      } else {\n        if (!wallet) {\n          throw new Error('Signer wallet not found');\n        }\n        if (totalTxs > 1) {\n          const signedTransactions = await wallet.signAllTransactions(transactions);\n          let i = 0;\n          [setupTransaction, swapTransaction, cleanupTransaction] = [\n            setupTransaction ? signedTransactions[i++] : undefined,\n            signedTransactions[i++],\n            cleanupTransaction ? signedTransactions[i++] : undefined,\n          ];\n        } else {\n          swapTransaction = await wallet.signTransaction(swapTransaction);\n        }\n      }\n\n      if (setupTransaction) {\n        let setupTxid = getSignature(setupTransaction);\n        const setupTransactionSender = async () => {\n          return await validateTransactionResponse(\n            await transactionSenderAndConfirmationWaiter(this.connection, setupTransaction!),\n          );\n        };\n        const setupPromise = setupTransactionSender();\n        onTransaction?.(setupTxid, totalTxs, 'SETUP', setupPromise);\n        const setupResult = await setupPromise;\n        if (setupResult instanceof Error) {\n          throw swapResult;\n        }\n      }\n\n      const swapTxid = getSignature(swapTransaction);\n\n      try {\n        const swapTransactionSender = async () => {\n          return await validateTransactionResponse(\n            await transactionSenderAndConfirmationWaiter(this.connection, swapTransaction),\n          );\n        };\n        const swapPromise = swapTransactionSender();\n        onTransaction?.(swapTxid, totalTxs, 'SWAP', swapPromise);\n        const transactionResponse = await swapPromise;\n\n        if (transactionResponse instanceof Error) {\n          throw transactionResponse;\n        }\n\n        const [sourceTokenBalanceChange, destinationTokenBalanceChange] = getTokenBalanceChangesFromTransactionResponse(\n          {\n            txid: swapTxid,\n            inputMint,\n            outputMint,\n            user: owner.publicKey,\n            sourceAddress: sourceInstruction.address,\n            destinationAddress: setupInstructions.destination.address,\n            transactionResponse,\n            hasWrappedSOL: Boolean(cleanupTransaction) || !wrapUnwrapSOL,\n          },\n        );\n\n        swapResult = {\n          txid: swapTxid,\n          inputAddress: sourceInstruction.address,\n          outputAddress: setupInstructions.destination.address,\n          inputAmount: sourceTokenBalanceChange,\n          outputAmount: destinationTokenBalanceChange,\n        };\n      } catch (e: any) {\n        swapError = e;\n      } finally {\n        if (cleanupTransaction) {\n          const cleanupTxid = getSignature(cleanupTransaction);\n          const cleanupTransactionSender = async () => {\n            return validateTransactionResponse(\n              await transactionSenderAndConfirmationWaiter(this.connection, cleanupTransaction!),\n            );\n          };\n\n          const cleanupPromise = cleanupTransactionSender();\n          onTransaction?.(cleanupTxid, totalTxs, 'CLEANUP', cleanupPromise);\n          await cleanupPromise;\n        }\n      }\n\n      if (swapError || !swapResult) {\n        throw swapError || new Error('Swap failed');\n      }\n\n      // return must be after `finally` clause to ensure we wait what we done in the `finally`\n      return swapResult;\n    } catch (error) {\n      return { error: error as TransactionError };\n    } finally {\n      this.routeCache.clear();\n    }\n  }\n\n  static async getIntermediateTokens() {\n    const intermediateTokensSet = await getTopTokens();\n    for (const swapProtocolToken of SWAP_PROTOCOL_TOKENS) {\n      intermediateTokensSet.add(swapProtocolToken);\n    }\n    const saberDecimalAmms = getSaberWrappedDecimalsAmms();\n\n    saberDecimalAmms.forEach((item) => {\n      intermediateTokensSet.add(item.wrappedToken.addDecimals.mint.toBase58());\n    });\n\n    return Array.from(intermediateTokensSet);\n  }\n\n  static createInitializeTokenLedgerInstruction = createInitializeTokenLedgerInstruction;\n}\n"],"names":["IDL","version","name","instructions","accounts","isMut","isSigner","args","type","option","defined","kind","fields","types","variants","errors","code","msg","WRAPPED_SOL_MINT","PublicKey","MAINNET_SERUM_DEX_PROGRAM","DEVNET_SERUM_DEX_PROGRAM","MARKETS_URL","devnet","testnet","INDEXED_ROUTE_MAP_URL","TOKEN_LIST_URL","LAMPORTS_PER_SIGNATURE","RAYDIUM_AMM_V4_PROGRAM_ID","ALDRIN_SWAP_PROGRAM_ID","ALDRIN_SWAP_V2_PROGRAM_ID","SABER_ADD_DECIMALS_PROGRAM_ID","CROPPER_PROGRAM_ID","SENCHA_PROGRAM_ID","LIFINITY_PROGRAM_ID","CREMA_PROGRAM_ID","JUPITER_WALLET","MERCURIAL_SWAP_PROGRAM_ID","WHIRLPOOL_PROGRAM_ID","CYKURA_PROGRAM_ID","CYKURA_FACTORY_STATE_ADDRESS","MARINADE_PROGRAM_ID","STEPN_PROGRAM_ID","ORCA_PROGRAM_ID","STEP_TOKEN_SWAP_PROGRAM_ID","PENGUIN_PROGRAM_ID","SAROS_PROGRAM_ID","SWAP_PROTOCOL_TOKENS","JUPITER_ERRORS","Object","freeze","AlreadyInUse","InsufficientSOL","TransactionNotConfirmed","BalancesNotExtractedProperly","reduce","accErrors","error","IS_DEV","process","env","NODE_ENV","MIN_SEGMENT_SIZE_FOR_INTERMEDIATE_MINTS","PublicKeyLayout","Layout","constructor","property","layout","blob","span","getSpan","b","offset","decode","encode","src","toBuffer","publicKey","U64Layout","bn","u64","toArrayLike","Buffer","uint64","uint128","arr","isBuffer","Uint8Array","from","buffer","byteOffset","byteLength","createProgramAddressSyncUnsafe","seeds","programId","alloc","forEach","seed","length","MAX_SEED_LENGTH","TypeError","concat","hash","sha256","publicKeyBytes","BN","toArray","undefined","CropperTokenSwapLayout","struct","u8","CropperStateLayout","CROPPER_STATE_ADDRESS","accountInfoToCropperPoolState","address","accountInfo","owner","decoded","data","authority","nonce","isInitialized","Boolean","ammId","serumProgramId","tokenProgramId","tokenAAccount","tokenBAccount","serumMarket","poolMint","mintA","mintB","stateAccountInfoToCropperState","stateOwner","feeOwner","initialSupply","returnFeeNumerator","toNumber","fixedFeeNumerator","feeDenominator","curveType","curveParameters","Side","Bid","bid","Ask","ask","JUPITER_PROGRAM_ID_PRODUCTION","JUPITER_PROGRAM_ID","JUPITER_PROGRAM","Program","PRODUCTION_TOKEN_LEDGERS","TOKEN_LEDGER","Math","floor","random","stableSwapNPoolIntoMercurialExchange","swayLayout","sourceTokenAccount","destinationTokenAccount","userTransferAuthority","swapProgram","swapState","tokenProgram","TOKEN_PROGRAM_ID","poolAuthority","ammAuthority","findProgramAddressSync","replace","raydiumAmmToRaydiumSwap","raydiumAmm","userSourceTokenAccount","userDestinationTokenAccount","serumMarketKeys","Error","ammOpenOrders","poolCoinTokenAccount","poolPcTokenAccount","serumBids","serumAsks","serumEventQueue","serumCoinVaultAccount","serumPcVaultAccount","serumVaultSigner","userSourceOwner","marketIntoSerumSwap","market","openOrdersAddress","orderPayerTokenAccountAddress","coinWallet","pcWallet","vaultSigner","createProgramAddressSync","vaultSignerNonce","openOrders","requestQueue","eventQueue","bids","bidsAddress","asks","asksAddress","coinVault","baseVault","pcVault","quoteVault","orderPayerTokenAccount","dexProgram","rent","SYSVAR_RENT_PUBKEY","createMercurialExchangeInstruction","swapLayout","inAmount","minimumOutAmount","tokenLedger","platformFee","remainingAccounts","swapTokenAccount","tokenAccounts","push","pubkey","isWritable","prepareRemainingAccounts","feeAccount","instruction","mercurialExchange","feeBps","createSerumSwapInstruction","sourceMint","referrer","side","equals","baseMintAddress","serumSwap","createTokenSwapInstruction","tokenSwapState","isStep","swapSource","swapDestination","tokenAccountA","tokenAccountB","stepTokenSwap","tokenSwap","tokenSwapProgram","swap","source","destination","poolToken","poolFee","createSenchaSwapInstruction","poolState","token0Mint","token0Reserves","token1Reserves","feesSource","feesDestination","token0Fees","token1Fees","senchaExchange","userAuthority","inputUserAccount","inputTokenAccount","inputFeesAccount","outputUserAccount","outputTokenAccount","outputFeesAccount","createCropperSwapInstruction","cropperTokenSwap","createRaydiumSwapInstruction","raydiumSwapV2","createAldrinSwapInstruction","userBaseTokenAccount","userQuoteTokenAccount","baseTokenMint","aldrinSwap","pool","poolSigner","baseTokenVault","quoteTokenVault","feePoolTokenAccount","walletAuthority","createAldrinV2SwapInstruction","curve","aldrinV2Swap","createCremaSwapInstruction","cremaTokenSwap","poolSourceTokenAccount","poolDestinationTokenAccount","poolTicksAccount","ticksKey","createRiskCheckAndFeeInstruction","riskCheckAndFee","createSetTokenLedgerInstruction","tokenAccountAddress","setTokenLedger","tokenAccount","createInitializeTokenLedgerInstruction","payer","initializeTokenLedger","systemProgram","SystemProgram","createOpenOrdersInstruction","ix","createOpenOrders","saberPoolIntoSaberSwap","saberPool","sourceMintAddress","feesTokenAccount","state","tokenA","mint","tokenB","adminFeeAccount","reserve","config","swapProgramID","swapAccount","swapAuthority","createSaberSwapInstruction","stableSwap","saberSwap","createSaberAddDecimalsDepositInstruction","addDecimals","saberAddDecimalsDeposit","addDecimalsProgram","wrapper","wrapperMint","wrapperUnderlyingTokens","userUnderlyingTokens","userWrappedTokens","createSaberAddDecimalsWithdrawInstruction","saberAddDecimalsWithdraw","createLifinitySwapInstruction","tokenAMint","lifinityTokenSwap","amm","sourceInfo","destinationInfo","pythAccount","pythPcAccount","configAccount","createCykuraSwapInstruction","additionalArgs","cykuraSwap","signer","factoryState","poolAddress","inputVault","outputVault","lastObservationState","coreProgram","swapAccountMetas","nextObservationState","createWhirlpoolSwapInstruction","tokenOwnerAccountA","tokenOwnerAccountB","aToB","whirlpoolSwap","tokenAuthority","whirlpool","tokenVaultA","tokenVaultB","tickArray0","tickArray1","tickArray2","oracle","createMarinadeFinanceDepositInstruction","transferFrom","tempWsolTokenAccount","tempSolPda","marinadeFinanceDeposit","marinadeFinanceProgram","msolMint","marinadeStateResponse","liqPoolSolLegPda","liqPoolMsolLeg","liqPool","msolLeg","liqPoolMsolLegAuthority","reservePda","mintTo","msolMintAuthority","userWsolTokenAccount","wsolMint","NATIVE_MINT","createMarinadeFinanceLiquidUnstakeInstruction","marinadeFinanceLiquidUnstake","treasuryMsolAccount","getMsolFrom","getMsolFromAuthority","transferSolTo","createWhirlpoolSwapExactOutputInstruction","outAmount","maximumInAmount","whirlpoolSwapExactOutput","getSaberWrappedDecimalsAmms","addDecimalsJson","map","addDecimalJson","underlying","underlyingDecimals","decimals","SaberAddDecimalsAmm","WrappedToken","multiplier","JSBI","BigInt","getOutputAmount","inputAmount","inputMint","calculateWithdrawOutputAmount","calculateDepositOutputAmount","toString","multiply","divide","wrappedToken","id","label","shouldPrefetch","exactOutputSupported","toBase58","getAccountsForUpdate","Array","update","_accountInfoMap","getQuote","amount","notEnoughLiquidity","feeAmount","ZERO","feeMint","feePct","priceImpactPct","createSwapInstructions","swapParams","otherAmountThreshold","reserveTokenMints","getTwoPermutations","array","acc","item","otherItem","chunks","size","apply","ceil","_","index","slice","chunkedGetMultipleAccountInfos","connection","pks","batchChunkSize","maxAccountsChunkSize","Promise","all","batchPubkeys","batch","pubkeys","methodName","_buildArgs","commitment","_rpcBatchRequest","then","batchResults","res","result","value","catch","e","flat","SwapMode","mapAddressToAccountInfos","accountInfoMap","addresses","accountInfos","get","tokenAccountsToJSBIs","prefetchAmms","amms","accountInfosMap","Map","set","AMM_INFO_LAYOUT_V4","nu64","RaydiumAmm","ammAccountInfo","params","coinMint","pcMint","status","ammTargetOrders","coinReserve","pcReserve","calculator","coinMintAddress","pcMintAddress","keys","pk","swapFeeNumerator","swapFeeDenominator","Decimal","div","TokenSwapConstantProduct","Fraction","ZERO_FRACTION","decodeSerumMarketKeysString","serumMarketInfo","decodedMarket","Market","getLayout","poolCoinTokenAccountInfo","poolPcTokenAccountInfo","ammOpenOrdersAccountInfo","coinAmount","pcAmount","tokenAmountAccessor","OpenOrders","fromAccountInfo","add","baseTokenTotal","sub","String","needTakePnlCoin","quoteTokenTotal","needTakePnlPc","tokenAccountInfo","fromBuffer","outputIndex","exchange","expectedOutputAmount","fees","priceImpact","TAKER_FEE_PCT","STABLE_TAKER_FEE_PCT","STABLE_MARKET_ADDRESSES","getOutAmountMeta","fromAmount","fromMint","toMint","takerFeePct","includes","quoteMintAddress","forecastBuy","forecastSell","orderbook","pcIn","coinOut","bestPrice","worstPrice","totalCost","totalCoins","quoteSizeLots","quoteSizeLotsToNumber","availablePc","baseSizeLots","baseSizeLotsToNumber","lotPrice","lotQuantity","getL2","equal","orderCoinAmount","orderPcAmount","greaterThanOrEqual","numberLotsPurchasable","subtract","bestPriceDecimal","worstPriceDecimal","bestPriceSizeLots","priceLotsToDecimal","totalCostSizeLots","inAmountWithoutFee","mul","fee","lessThanOrEqual","minimum","in","out","coinIn","pcOut","totalCoin","availableCoin","numberLotsCanSell","totalCoinAmountToSell","pcOutAfterFee","minus","greaterThan","round","descending","isBids","key","quantity","slab","items","price","ushrn","divideBnToDecimal","numerator","denominator","quotient","rem","umod","gcd","baseLotSize","_decoded","isZero","quoteLotSize","_baseSplTokenMultiplier","_quoteSplTokenMultiplier","SerumAmm","_orderbooks","orderbooks","asksAccountInfo","bidsAccountInfo","Orderbook","destinationMint","outAmountMeta","minInAmount","minOutAmount","quoteMintToReferrer","isSplitSupported","firstAmm","secondAmm","HUNDRED","SplitTradeAmm","portion1","portion2","getAmmIdsFromSplitTradeAmmId","ammIds","split","create","firstAmmTwoPermutations","secondAmmTwoPermutations","firstAmmTwoPermutation","secondAmmTwoPermutation","every","setPortions","labelWithPortions","portion","sort","a","join","quoteParams","sourceMintString","bestSolution","firstQuote","secondQuote","p","firstAmount","secondAmount","lessThan","firstAmmFee","secondAmmFee","isValidRoute","ammA","ammB","isSerumAndRaydium","marketInfos","mi","SaberAmm","Stable","TWO","calculateAmpFactor","ONE","trade","tokenAccountInfos","info","deserializeAccount","asFraction","toFixed","inputIndex","setAmp","Percentage","fromDecimal","number","fromFraction","toDecimalPlaces","num","denom","toDecimal","eq","p2","denomGcd","denomLcm","p1DenomAdjustment","p2DenomAdjustment","p1NumeratorAdjusted","p2NumeratorAdjusted","newNumerator","FEES_LAYOUT","POOL_FIELDS_COMMON","POOL_LAYOUT","POOL_V2_LAYOUT","STABLE_CURVE_LAYOUT","accountInfoToAldrinPoolState","isV2","curveObject","quoteTokenMint","feeBaseAccount","feeQuoteAccount","traderFee","tradeFeeNumerator","tradeFeeDenominator","ownerFee","ownerTradeFeeNumerator","ownerTradeFeeDenominator","AldrinAmm","amp","TokenSwapStable","decodeStableCurveAmp","PROGRAM_ID_TO_LABEL","TokenSwapLayout","StepTokenSwapLayout","accountInfoToTokenSwapState","tokenSwapAccountInfo","tokenSwapData","bumpSeed","tokenPool","ownerWithdrawFeeNumerator","ownerWithdrawFeeDenominator","poolNonce","CurveType","SplTokenSwapAmm","swapStateAccountInfo","ConstantProduct","FEE_DENOMINATOR","pow","MercurialSwapLayout","u32","accountInfoToMercurialSwapLayout","tokenAccountsLength","precisionMultipliers","precisionMultiplierA","precisionMultiplierB","precisionMultiplierC","precisionMultiplierD","tokenAccountC","tokenAccountD","amplificationCoefficient","feeNumerator","precisionFactor","MercurialAmm","precisionMultiplier","filter","x","findIndex","tokenMints","tokenMint","decodeSwapLayout","CropperAmm","getStateFromStateAccount","getAccountInfo","tokenAFeeAccount","tokenBFeeAccount","decodePoolState","accountInfoToCremaPoolState","TokenSwapAccountLayout","swapTokenA","swapTokenB","tokenBMint","currentSqrtPrice","currentLiquity","CremaAmm","ticks","ticksAccountInfo","ticksInfo","parseTicksAccount","preSwapA","preSwapB","revert","amountOut","feeUsed","impact","amountIn","calculateSwapA2B","currentPriceA","transactionPriceA","amountUsed","abs","calculateSwapB2A","currentPriceB","transactionPriceB","SenchaSwapLayout","accountInfoToSenchaPoolState","isPaused","bump","token1Mint","tradeFeeKbps","SenchaAmm","swapStateToPoolInfo","poolCoinMint","poolPcMint","poolCoinDecimal","poolPcDecimal","poolMintDecimal","pythBaseDecimal","accountInfoLifinitySwapLayout","LIFINITY_AMM_LAYOUT","poolFeeAccount","LifinityAmm","poolInfo","idx","account","tradeDirection","TradeDirection","AtoB","BtoA","pyth","pythPc","coinBalance","pcBalance","getParsedData","getCurveAmount","publishSlot","amountSwapped","feePercent","FEE_RATE_MUL_VALUE","fromX64","parseWhirlpoolSafe","whirlpoolData","parseWhirlpool","WhirlpoolAmm","whirlpoolAccountInfo","tickArrays","tickPks","feeRate","getTickArrayPks","clear","tickArrayPk","tickArrayAddress","tickArrayAccountInfo","tickArray","parseTickArray","swapMode","swapQuote","getSwapQuote","ExactIn","tokenAmount","isInput","quotePrice","currentPrice","sqrtPrice","Number","tokenMintA","targetSqrtPrice","getDefaultSqrtPriceLimit","getTickArrayPublicKeysForSwap","tickCurrentIndex","tickSpacing","tokenMintB","SolanaTickDataProvider","program","bitmapCache","tickCache","accountsToFetch","bitmaps","eagerLoadCache","tickCurrent","compressed","wordPos","tickPosition","bitmapsToFetch","WORD_POS_MIN","TickMath","MIN_TICK","WORD_POS_MAX","MAX_TICK","minWord","max","maxWord","min","i","getBitmapAddressSync","fetchedBitmaps","tickBitmapState","fetchMultiple","tickAddresses","currentWordPos","wordArray","word","generateBitmapWord","eqn","j","shrn","and","tick","tickAddress","getTickAddressSync","fetchedTicks","tickState","fetchedTick","liquidityNet","lazyLoadAccountsToCache","bitmap","tickAddressesToFetch","getTick","savedTick","getTickAddress","TICK_SEED","token0","token1","u32ToSeed","getBitmapAddress","BITMAP_SEED","u16ToSeed","getBitmap","savedBitmap","nextInitializedTickWithinOneWord","lte","bitPos","cachedBitmap","next","nextBit","initialized","nextInitializedBit","nextTick","buildTick","updateCachedAccountInfos","bitmapAddress","bitmapAccountInfo","coder","tickStateAccountInfo","provider","anchor","AnchorProvider","skipPreflight","CYCLOS_CORE","CykuraAmm","accountInfoOrPoolState","tickDataProvider","tokens","vaults","sqrtPriceX32","liquidity","Token","CykuraPool","vault0","ASSOCIATED_TOKEN_PROGRAM_ID","vault1","poolAccountInfo","inputToken","currentOutAmount","newPool","CurrencyAmount","fromRawAmount","priceImpactDecimal","sqrtRatioX32","OBSERVATION_SEED","observationIndex","observationCardinalityNext","unstakeNowFeeBp","lpMinFeeBasisPoints","lpMaxFeeBasisPoints","lpLiquidityTarget","lamportsAvailable","lamportsToObtain","gte","lamportsAfter","delta","proportionalBN","MarinadeAmm","liqPoolSolLegPdaAddress","marinadeState","marinadeFinanceIdlSchema","findProgramDerivedAddress","stateAccountInfo","liqPoolMSOLLegAccountInfo","liqPoolMSOLLeg","MarinadeState","lamports","amountBN","depositQuote","liquidUnstakeQuote","extraSeeds","liqPoolSolLegPdaLamports","liqPoolMSOLLegAmount","userLamports","userMSOLBuyOrder","calcMSOLFromLamports","swapMSOLMax","outAmountBN","gt","lamportsForTheLiqPool","calcLamportsFromMSOLAmount","saturatingSub","checkStakingCap","MSOLToMint","transferingLamports","resultAmount","totalLamportsUnderControl","stakingSolCap","stakeLamports","sharesFromValue","totalVirtualStakedLamports","msolSupply","msolAmount","valueFromShares","circulatingTicketBalance","validatorSystem","totalActiveBalance","totalCoolingDown","availableReserveBalance","stakeSystem","delayedUnstakeCoolingDown","emergencyCoolingDown","maxLamports","rentExemptForTokenAcc","liquidUnstakeFeeBp","lpMinFee","basisPoints","lpMaxFee","msolFee","workingLamportsValue","shares","totalValue","totalShares","left","right","ammFactory","SerumMarket","accountFlags","SABER_SWAP_PROGRAM_ID","StableSwap","loadWithData","senchaAmm","fetchMarketCache","url","marketsCache","fetch","json","fetchExtraKeyedAccountInfos","extraKeyedAccountInfos","getAllAmms","marketCacheToAccountInfo","format","rest","marketKeyedAccountInfos","extraKeys","keyedAccountInfo","ammCrossProtocolPairs","callback","mintCache","getOrUpdatePublicKeyCache","pkBase64","_bn","cached","pkBase58","getTokenRouteSegments","tokenRouteSegments","reserveTokenMintPermutations","firstReserveMint","secondReserveMint","firstMintBase58","secondMintBase58","addSegment","inMint","outMint","segments","computeInputRouteSegments","outputMint","intermediateTokens","onlyDirectRoutes","inputRouteSegments","inputSegment","outputSegment","minSegmentSize","shouldStartWithInputSegment","inputInnerMap","outputInnerMap","startSegment","endSegment","startMint","endMint","entries","filteredAmms","ExactOut","shouldSkipOutputMint","intersectionAmms","filteredIntersectionAmms","computeRouteMap","routeMap","firstLevelOutputs","validOutputMints","Set","firstLevelOutputMint","firstLevelAmms","secondLevelOutputs","secondLevelOutputMint","secondLevelAmms","outputMintSize","found","firstLevelAmm","secondLevelAmm","isSplitSetupRequired","hasSerumOpenOrderInstruction","needSetup","needCleanup","marketInfo","isPlatformFeeSupported","firstMarket","secondMarket","getRouteInfoUniqueId","routeInfo","getEmptyInstruction","cleanupInstructions","signers","createAndCloseWSOLAccount","toAccount","getAssociatedTokenAddress","createAssociatedTokenAccountInstruction","transfer","fromPubkey","toPubkey","createSyncNativeInstruction","createCloseAccountInstruction","findOrCreateAssociatedAccountByMint","mintAddress","unwrapSOL","associatedToken","associatedTokenProgramId","TransactionInstruction","routeToInstructions","user","openOrdersAddresses","userSourceTokenAccountAddress","userIntermediaryTokenAccountAddress","userDestinationTokenAccountAddress","legs","effectiveQuoteMintToReferrer","userIntermediateTokenAccountAddresses","userTokenAccountAddresses","platformFeeSupported","legAmount","isLastLeg","legOtherAmountThreshold","legPlatformFee","isKeyPair","routeAtaInstructions","getUserIntermediateTokenAccountAddress","userIntermediateTokenAccountAddress","getUserDestinationTokenAccountAddress","userIntermediaryTokenAccountResult","userDestinationTokenAccountResult","getOrCreateOpenOrdersAddress","marketToOpenOrdersAddress","marketAddress","openOrdersAccountInfo","newOpenOrdersAddress","newOpenOrdersAddressInfo","SERUM_OPEN_ACCOUNT_LAMPORTS","OPEN_TOKEN_ACCOUNT_LAMPORTS","sum","values","calculateTransactionDepositAndFee","intermediate","hasWrapUnwrapSOL","feeCalculator","openOrdersDeposits","ooi","ataDeposits","signatureFee","oo","lamportsPerSignature","totalFeeAndDeposits","minimumSOLForTransaction","getDepositAndFeeFromInstructions","serumOpenOrdersPromise","wrapUnwrapSOL","openOrdersInstructionsPromise","promise","openOrdersInstructions","instructionResult","NO_PLATFORM_FEE","feeAccounts","getPlatformFeeAccounts","feeAccountOwner","getTokenAccountsByOwner","deserializedtokenAccount","TransactionBuilder","feePayer","addInstruction","build","blockhashWithExpiryBlockHeight","getLatestBlockhash","txFields","curr","transaction","Transaction","execute","sendTransaction","Owner","_owner","isPublicKey","secretKey","wait","time","resolve","setTimeout","diffTokenBalance","accountKeyIndex","meta","postBalance","postTokenBalances","find","postTokenBalance","accountIndex","uiTokenAmount","preBalance","preTokenBalances","preTokenBalance","parseInt","extractTokenBalanceChangeFromTransaction","message","accountKeys","extractSOLChangeFromTransaction","postBalances","preBalances","getTokenBalanceChangesFromTransactionResponse","txid","sourceAddress","destinationAddress","transactionResponse","hasWrappedSOL","sourceTokenBalanceChange","destinationTokenBalanceChange","TransactionError","getUnixTs","Date","getTime","SEND_OPTIONS","maxRetries","transactionSenderAndConfirmationWaiter","signedTransaction","timeout","pollInterval","sendInterval","sendRetries","rawTransaction","serialize","sendRawTransaction","start","lastSendTimestamp","retries","timestamp","response","any","getTransaction","getSignature","signature","bs58","validateInput","arrays","isArray","validateArray","validateDimensions","validateCombinations","MAX_DIMENSIONS","multiplySize","MAX_SIZE","sizeStr","isFinite","toExponential","fastCartesian","loopFunc","getLoopFunc","cachedLoopFunc","cache","mGetLoopFunc","indexes","getIndex","middle","end","repeat","Function","PLATFORM_FEE_DENOMINATOR","fetchAccountInfos","routes","accountsToFetchSet","ammMap","innerMap","getInputOutputId","getQuoteId","getQuoteAndSortBasedOnOutAmount","quotes","quote","MAX_LEVEL","processInputRouteSegmentToRoutesInfos","inputRouteSegment","getDepositAndFeeForRoute","platformFeeBps","slippage","filterTopNResult","inputMintString","outputMintString","tradeIdQuoteMap","inputMintInnerMap","maxLevel","walkTheTree","level","walked","tradeId","sortedQuotesWithAmms","quoteMap","splitTradeAmms","splitTradeAmm","mints","_mints","ammsArr","permutations","routesInfo","route","intermediateAmount","cacheQuote","pct","amountForFees","amountAfterFees","lpFee","getDepositAndFee","priceFactor","codeToErrorRecord","record","validateTransactionResponse","err","parseErrorForTransaction","UNKNOWN_ERROR","getTopTokens","topTokens","getOrAddKeyToIndexMap","mintToIndexMap","keyIndex","routeMapToIndexedRouteMap","indexedRouteMap","innerIndexedRouteMap","indexedOutputMintCache","routeOutputKey","routeOutputKeyIndex","mintKeys","indexedRouteMapToRouteMap","getMint","generatedRouteMap","Jupiter","cluster","platformFeeAndAccounts","routeCacheDuration","shouldLoadSerumOpenOrders","routeCache","getDepositAndFees","userPublicKey","getDepositAndFeesForUser","lastMarketInfoIndex","_wrapUnwrapSOL","sourceInstruction","ataInstructions","hasOpenOrders","preparedInstructions","setupTransactionBuilder","transactionBuilder","cleanupTransactionBuilder","ixs","cleanupIx","setupTransaction","cleanupTransaction","setupTransactionObject","swapTransactionObject","cleanupTransactionObject","setupInstructions","transactions","swapTransaction","wallet","onTransaction","executeInternal","load","marketUrl","restrictIntermediateTokens","_quoteMintToReferrer","fetchTokenRouteSegments","getRecentBlockhashAndContext","getIntermediateTokens","jupiter","setUserPublicKey","getAccountToAmmMap","accountToAmmMap","tokenRouteSegment","getAmmIdToAmmMap","ammIdToAmmMap","computeRoutes","forceFetch","now","inputMintAndOutputMint","localeCompare","shouldBustCache","fetchTimestamp","routesInfos","delete","findSerumOpenOrdersForOwner","marketCaches","getRouteMap","getRemoteRouteMap","indexedRouteMapUrl","swapError","swapResult","tx","totalTxs","sign","signedTransactions","signAllTransactions","signTransaction","setupTxid","setupTransactionSender","setupPromise","setupResult","swapTxid","swapTransactionSender","swapPromise","inputAddress","outputAddress","outputAmount","cleanupTxid","cleanupTransactionSender","cleanupPromise","intermediateTokensSet","swapProtocolToken","saberDecimalAmms","newMarketToOpenOrdersAddress","allOpenOrders","findForOwner"],"mappings":"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"}